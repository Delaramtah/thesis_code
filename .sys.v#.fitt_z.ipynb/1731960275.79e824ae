{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "61f4200d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/__init__.py:63: UserWarning: TensorFlow warnings are by default suppressed by zfit. In order to show them, set the environment variable ZFIT_DISABLE_TF_WARNINGS=0. In order to suppress the TensorFlow warnings AND this warning, set ZFIT_DISABLE_TF_WARNINGS=1.\n",
      "  warnings.warn(\n",
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/basemodel.py:199: UserWarning: For the future, also decorate _pdf with @supports and specify what you support (such as 'norm=True' to keep the same behavior as before)\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import zfit\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()  # Extract values and edges\n",
    "\n",
    "# Now, hist_values are your y-values (histogram counts), and hist_edges are the x-values (bin edges).\n",
    "# You can use hist_edges to define the x-axis values.\n",
    "\n",
    "# Convert hist_edges to center of bins for x_vals\n",
    "x_vals = (hist_edges[:-1] + hist_edges[1:]) / 2  # Take the average of the bin edges to get the center\n",
    "\n",
    "# Define the observable variable for the PDF\n",
    "x = zfit.Space(\"x\", limits=(70, 110))  # Example range for the mass\n",
    "\n",
    "# Create a zfit Data object for the x values\n",
    "x_vals_data = zfit.Data.from_numpy(array=x_vals, obs=x)  # Pass both the data array and observable\n",
    "\n",
    "# Define the Breit-Wigner function as a custom zfit PDF\n",
    "class BreitWigner(zfit.pdf.BasePDF):\n",
    "    def __init__(self, mass, width, name=\"BreitWigner\", obs=None):\n",
    "        super().__init__(obs=obs, name=name)\n",
    "        self.mass = mass  # Peak mass (mean of Breit-Wigner)\n",
    "        self.width = width  # Width of the Breit-Wigner (Gamma)\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        \"\"\" Return the unnormalized Breit-Wigner function \"\"\"\n",
    "        x_val = x.value()  # Extract the values from the zfit.Data object\n",
    "        return 1 / (np.pi * self.width * (1 + ((x_val - self.mass) / self.width) ** 2))\n",
    "\n",
    "    def _pdf(self, x, norm=True):\n",
    "        \"\"\" Implement the PDF function correctly for zfit with norm handling \"\"\"\n",
    "        unnorm_pdf = self._unnormalized_pdf(x)\n",
    "\n",
    "        if norm:\n",
    "            # Optional: Return the normalized PDF (for now, assume it's already normalized)\n",
    "            return unnorm_pdf\n",
    "        else:\n",
    "            return unnorm_pdf\n",
    "\n",
    "# Define the mass and width for the Breit-Wigner distribution\n",
    "mu = 91.1876  # Mass of the Z boson in GeV\n",
    "sigma = 2.495  # Width of the Z boson in GeV\n",
    "\n",
    "# Create the signal model (Breit-Wigner)\n",
    "signal_model = BreitWigner(mass=mu, width=sigma, obs=x, name=\"SignalModel\")\n",
    "\n",
    "# Define a safe PDF evaluation function with checks for NaN or Inf\n",
    "def safe_pdf_eval(pdf, x_vals_data):\n",
    "    \"\"\" Safely evaluate the PDF with checks for NaN or Inf \"\"\"\n",
    "    result = pdf.pdf(x_vals_data)\n",
    "\n",
    "    if np.any(np.isnan(result)) or np.any(np.isinf(result)):\n",
    "        raise ValueError(f\"NaN or Inf encountered in the PDF evaluation for x_vals={x_vals_data}\")\n",
    "\n",
    "    return result\n",
    "\n",
    "# Evaluate the signal model using safe_pdf_eval\n",
    "signal_model_vals = safe_pdf_eval(signal_model, x_vals_data)\n",
    "\n",
    "# Now you can plot the results or use them for further analysis\n",
    "plt.plot(x_vals, signal_model_vals, label=\"Breit-Wigner Model\")\n",
    "plt.xlabel(\"Mass (GeV)\")\n",
    "plt.ylabel(\"PDF Value\")\n",
    "plt.title(\"Breit-Wigner PDF\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# If needed, you can also define a convolution kernel or perform any other operations\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6380d47",
   "metadata": {},
   "outputs": [
    {
     "ename": "InvalidArgumentError",
     "evalue": "{{function_node __wrapped__CheckNumerics_device_/job:localhost/replica:0/task:0/device:CPU:0}} Check if pdf output contains any NaNs of Infs : Tensor had NaN values [Op:CheckNumerics] name: ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_456/2932372208.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignal_convolved\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/tensorflow/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    574\u001b[0m                 \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m                 instructions)\n\u001b[0;32m--> 576\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    578\u001b[0m     doc = _add_deprecated_arg_notice_to_docstring(\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/util/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(norm, norm_range, *args, **kwargs)\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0mnorm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm_range\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m\"unexpected keyword argument 'norm'\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/z/zextension.py\u001b[0m in \u001b[0;36mconcrete_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    245\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mconcrete_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_jit\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcurrently_traced\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 247\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    248\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcurrently_traced\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/basepdf.py\u001b[0m in \u001b[0;36mpdf\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m    408\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_single_hook_pdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumeric_checks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 410\u001b[0;31m                 z.check_numerics(\n\u001b[0m\u001b[1;32m    411\u001b[0m                     \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Check if pdf output contains any NaNs of Infs\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    412\u001b[0m                 )\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/z/wrapping_tf.py\u001b[0m in \u001b[0;36mcheck_numerics\u001b[0;34m(tensor, message, name)\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0mcheck_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreal_check\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimag_check\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         check_op = tf.debugging.check_numerics(\n\u001b[0m\u001b[1;32m     95\u001b[0m             \u001b[0mtensor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m         )\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/tensorflow/python/ops/gen_array_ops.py\u001b[0m in \u001b[0;36mcheck_numerics\u001b[0;34m(tensor, message, name)\u001b[0m\n\u001b[1;32m    964\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    965\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 966\u001b[0;31m       \u001b[0m_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    967\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_FallbackException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    968\u001b[0m       \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   6654\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6655\u001b[0m   \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6656\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6658\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: {{function_node __wrapped__CheckNumerics_device_/job:localhost/replica:0/task:0/device:CPU:0}} Check if pdf output contains any NaNs of Infs : Tensor had NaN values [Op:CheckNumerics] name: "
     ]
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Define the Breit-Wigner function\n",
    "class BreitWignerPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['M', 'Gamma']\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        M = self.params['M']  # Resonance mass\n",
    "        Gamma = self.params['Gamma']  # Width\n",
    "        x = zfit.z.unstack_x(x)  # Extract the independent variable\n",
    "        numerator = Gamma / 2\n",
    "        denominator = (x - M)**2 + (Gamma / 2)**2\n",
    "        return numerator / denominator\n",
    "\n",
    "# Define models for each category\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    M_name = generate_unique_name(f\"M_{category}\")\n",
    "    Gamma_name = generate_unique_name(f\"Gamma_{category}\")\n",
    "    mu_kernel_name = generate_unique_name(f\"mu_kernel_{category}\")\n",
    "    sigma_kernel_name = generate_unique_name(f\"sigma_kernel_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    M = zfit.Parameter(M_name, 90.0, 80.0, 100.0)  # Mean resonance mass\n",
    "    Gamma = zfit.Parameter(Gamma_name, 2.5, 0.1, 10.0)  # Width\n",
    "    \n",
    "    # Signal model (Breit-Wigner)\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "    # Define Gaussian kernel parameters for convolution\n",
    "    mu = zfit.Parameter(mu_kernel_name, 0.0, -5.0, 5.0)\n",
    "    sigma = zfit.Parameter(sigma_kernel_name, 1.0, 0.1, 5.0)\n",
    "    gaussian_kernel = zfit.pdf.Gauss(mu=mu, sigma=sigma, obs=obs)\n",
    "    \n",
    "    # Use FFTConvolution to convolve the Breit-Wigner signal with the Gaussian kernel\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "    \n",
    "    signal_convolved = zfit.pdf.FFTConvPDFV1(func=signal_model, kernel=gaussian_kernel)\n",
    " \n",
    "    x = np.linspace(0, 1000, num=10000)\n",
    "    \n",
    "    y = signal_convolved.pdf(x)\n",
    "    \n",
    "    \n",
    "\n",
    "# # The histogram data\n",
    "# x_data = (hist_edges[:-1] + hist_edges[1:]) / 2  # Bin centers\n",
    "# y_data = hist_values  # Bin contents\n",
    "# print(signal_convolved)\n",
    "\n",
    "# # --- Plotting signal_convolved ---\n",
    "# # Create a grid of points over the observable range\n",
    "# x_values = np.linspace(hist_edges[0], hist_edges[-1], 1000)  # 1000 points for smoothness\n",
    "\n",
    "# # Set the parameters with their initial values\n",
    "# parameter_values = {\n",
    "#     M.name: M.value,  # Initial value for M\n",
    "#     Gamma.name: Gamma.value,  # Initial value for Gamma\n",
    "#     mu.name: mu.value,  # Initial value for mu\n",
    "#     sigma.name: sigma.value  # Initial value for sigma\n",
    "# }\n",
    "\n",
    "# # Evaluate the convolved signal PDF on the grid\n",
    "# with zfit.param.set_values(parameter_values):  # Pass the dictionary of parameter values\n",
    "#     y_values = signal_convolved.pdf(x_values).numpy()\n",
    "\n",
    "# # Plot the signal_convolved PDF\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# plt.plot(x_values, y_values, label=\"Convolved Signal PDF\", color='blue')\n",
    "# plt.xlabel(\"x (observable)\")\n",
    "# plt.ylabel(\"PDF\")\n",
    "# plt.title(\"Convolved Signal (Breit-Wigner and Gaussian Kernel)\")\n",
    "# plt.legend()\n",
    "# plt.grid()\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1bf919cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Breit-Wigner PDF values: [0.00212706 0.00213614 0.00214528 0.00215448 0.00216374 0.00217306\n",
      " 0.00218244 0.00219187 0.00220137 0.00221093]\n",
      "Error with Gaussian kernel: {{function_node __wrapped__CheckNumerics_device_/job:localhost/replica:0/task:0/device:CPU:0}} Check if pdf output contains any NaNs of Infs : Tensor had NaN values [Op:CheckNumerics] name: \n",
      "Error with convolution: {{function_node __wrapped__CheckNumerics_device_/job:localhost/replica:0/task:0/device:CPU:0}} Check if pdf output contains any NaNs of Infs : Tensor had NaN values [Op:CheckNumerics] name: \n"
     ]
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # For timestamp-based unique names\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Define the Breit-Wigner function\n",
    "class BreitWignerPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['M', 'Gamma']\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        M = self.params['M']  # Resonance mass\n",
    "        Gamma = self.params['Gamma']  # Width\n",
    "        x = zfit.z.unstack_x(x)  # Extract the independent variable\n",
    "        numerator = Gamma / 2\n",
    "        denominator = (x - M)**2 + (Gamma / 2)**2\n",
    "        return numerator / denominator\n",
    "\n",
    "# Define models for each category\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    M_name = generate_unique_name(f\"M_{category}\")\n",
    "    Gamma_name = generate_unique_name(f\"Gamma_{category}\")\n",
    "    mu_kernel_name = generate_unique_name(f\"mu_kernel_{category}\")\n",
    "    sigma_kernel_name = generate_unique_name(f\"sigma_kernel_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    M = zfit.Parameter(M_name, 90.0, 80.0, 100.0)  # Mean resonance mass\n",
    "    Gamma = zfit.Parameter(Gamma_name, 2.5, 0.1, 10.0)  # Width\n",
    "    \n",
    "    # Signal model (Breit-Wigner)\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "    # Define Gaussian kernel parameters for convolution\n",
    "    mu = zfit.Parameter(mu_kernel_name, 0.0, -5.0, 5.0)\n",
    "    sigma = zfit.Parameter(sigma_kernel_name, 2.0, 0.1, 5.0)  # Increased sigma to improve stability\n",
    "    gaussian_kernel = zfit.pdf.Gauss(mu=mu, sigma=sigma, obs=obs)\n",
    "\n",
    "# --- Debugging: Check individual PDFs before convolution ---\n",
    "# Create a grid of points over the observable range\n",
    "x_values = np.linspace(hist_edges[0], hist_edges[-1], 1000)  # 1000 points for smoothness\n",
    "\n",
    "# Set the parameter values directly\n",
    "M.set_value(90.0)    # Initial value for M\n",
    "Gamma.set_value(2.5) # Initial value for Gamma\n",
    "mu.set_value(0.0)    # Initial value for mu (Gaussian kernel)\n",
    "sigma.set_value(2.0) # Increased value for sigma (Gaussian kernel)\n",
    "\n",
    "# Check the Breit-Wigner PDF before convolution\n",
    "bw_values = signal_model.pdf(x_values).numpy()\n",
    "print(\"Breit-Wigner PDF values:\", bw_values[:10])  # Print first 10 values\n",
    "\n",
    "# --- Debugging: Check Gaussian kernel separately ---\n",
    "try:\n",
    "    # Check the Gaussian kernel PDF separately\n",
    "    gaussian_values = gaussian_kernel.pdf(x_values).numpy()\n",
    "    if np.any(np.isnan(gaussian_values)) or np.any(np.isinf(gaussian_values)):\n",
    "        print(\"Warning: Gaussian kernel produced NaNs or Infs!\")\n",
    "    else:\n",
    "        print(\"Gaussian Kernel PDF values:\", gaussian_values[:10])  # Print first 10 values\n",
    "except Exception as e:\n",
    "    print(f\"Error with Gaussian kernel: {e}\")\n",
    "\n",
    "# --- Checking if the convolution introduces instability ---\n",
    "# Now evaluate the convolved signal PDF on the grid\n",
    "try:\n",
    "    y_values = signal_convolved.pdf(x_values).numpy()\n",
    "\n",
    "    # Check if the output contains NaNs or Infs\n",
    "    if np.any(np.isnan(y_values)) or np.any(np.isinf(y_values)):\n",
    "        print(\"Warning: Convolution result contains NaNs or Infs!\")\n",
    "    else:\n",
    "        # Plot the signal_convolved PDF\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.plot(x_values, y_values, label=\"Convolved Signal PDF\", color='blue')\n",
    "        plt.xlabel(\"x (observable)\")\n",
    "        plt.ylabel(\"PDF\")\n",
    "        plt.title(\"Convolved Signal (Breit-Wigner and Gaussian Kernel)\")\n",
    "        plt.legend()\n",
    "        plt.grid()\n",
    "        plt.show()\n",
    "except Exception as e:\n",
    "    print(f\"Error with convolution: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6dd08f3a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# The histogram data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = hist_values  # Bin contents\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ea4a049",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "# Load the data from the ROOT file\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the zfit observable (space for mass)\n",
    "obs = zfit.Space(\"mass\", limits=(hist_edges[0], hist_edges[-1]))\n",
    "\n",
    "# Parameters for the Breit-Wigner distribution (signal)\n",
    "M = 91.1876  # Z boson mass in GeV\n",
    "Gamma = 2.495  # Z boson width in GeV\n",
    "\n",
    "# Step 1: Define the Breit-Wigner PDF model\n",
    "class BreitWignerPDF(zfit.pdf.BasePDF):\n",
    "    def __init__(self, obs, M, Gamma):\n",
    "        self.M = M\n",
    "        self.Gamma = Gamma\n",
    "        super().__init__(obs=obs)\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "    # Extract the numpy array from the zfit.Data object\n",
    "        x_values = x.numpy()  # This will get the raw values in a numpy array\n",
    "    \n",
    "    # Now, use TensorFlow operations on the numpy array\n",
    "        x_minus_M = tf.subtract(x_values, self.M)  # Subtraction using TensorFlow\n",
    "        bw = (1 / (np.pi * self.Gamma)) * (self.Gamma**2 / (tf.square(x_minus_M) + self.Gamma**2))\n",
    "    \n",
    "        return bw\n",
    "\n",
    "# Create the Breit-Wigner PDF model\n",
    "bw_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "# Step 2: Define the Gaussian kernel for convolution\n",
    "class GaussianKernel(zfit.pdf.BasePDF):\n",
    "    def __init__(self, obs, mu, sigma):\n",
    "        self.mu = mu\n",
    "        self.sigma = sigma\n",
    "        super().__init__(obs=obs)\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        # Gaussian formula with TensorFlow operations\n",
    "        gauss = (1 / (self.sigma * tf.sqrt(2 * np.pi))) * tf.exp(-0.5 * tf.square((x - self.mu) / self.sigma))\n",
    "        return gauss\n",
    "\n",
    "# Parameters for the Gaussian kernel (e.g., for smoothing)\n",
    "sigma = 1.0  # Standard deviation of the Gaussian\n",
    "mu = 0.0  # Mean of the Gaussian\n",
    "\n",
    "# Create the Gaussian kernel PDF\n",
    "gaussian_kernel = GaussianKernel(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "# Step 3: Perform the FFT-based convolution\n",
    "signal_convoluted = zfit.pdf.FFTConvPDFV1(func=bw_model, kernel=gaussian_kernel)\n",
    "\n",
    "\n",
    "# # Step 4: Evaluate the convolved signal\n",
    "# x_values = np.linspace(hist_edges[0], hist_edges[-1], 1000)\n",
    "# signal_values = signal_convoluted.pdf(x_values)\n",
    "\n",
    "# Create a Data object using zfit with the x_values\n",
    "\n",
    "# # Step 5: Plot the results\n",
    "# plt.figure(figsize=(10, 6))\n",
    "x_values = np.linspace(hist_edges[0], hist_edges[-1], 1000).astype(np.float32)  # Cast to float32\n",
    "x_data = zfit.data.Data.from_numpy(obs=obs, array=x_values)\n",
    "\n",
    "# Now, evaluate the PDF with the Data object\n",
    "signal_values = signal_convoluted.pdf(x_data)\n",
    "# # Plot the convoluted signal\n",
    "# plt.plot(x_values, signal_values, label=\"Convolved Signal\", color=\"red\", linewidth=2)\n",
    "\n",
    "# # Plot the histogram data\n",
    "# plt.hist(hist_values, bins=hist_edges, histtype='step', label=\"Histogram Data\", density=True)\n",
    "\n",
    "# plt.legend()\n",
    "# plt.xlabel(\"Mass (GeV)\")\n",
    "# plt.ylabel(\"Probability Density\")\n",
    "# plt.title(\"Signal Convolution with Gaussian Kernel (using zfit)\")\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "91cee652",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import zfit\n",
    "import uuid  # To generate unique parameter names\n",
    "\n",
    "# Enable eager execution\n",
    "tf.config.experimental_run_functions_eagerly(True)\n",
    "\n",
    "# Define the observable\n",
    "obs = zfit.Space(\"x\", limits=(-10, 10))  # Adjust the limits as appropriate\n",
    "\n",
    "# Generate unique names for parameters\n",
    "unique_id = uuid.uuid4().hex[:8]  # Short unique identifier\n",
    "\n",
    "# Parameters for the Gaussian kernel\n",
    "mu_gaussian = zfit.Parameter(f\"mu_gaussian_{unique_id}\", 0.0)  # Unique name for Gaussian mean\n",
    "sigma_gaussian = zfit.Parameter(f\"sigma_gaussian_{unique_id}\", 1.0)  # Unique name for Gaussian std dev\n",
    "\n",
    "# Parameters for the Breit-Wigner\n",
    "M_bw = zfit.Parameter(f\"M_bw_{unique_id}\", 0.0)  # Unique name for Breit-Wigner mass\n",
    "Gamma_bw = zfit.Parameter(f\"Gamma_bw_{unique_id}\", 2.0)  # Unique name for Breit-Wigner width\n",
    "\n",
    "# Custom Breit-Wigner PDF\n",
    "class BreitWignerPDF(zfit.pdf.BasePDF):\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        # Convert x to tensor\n",
    "        x_tensor = x.value()  # Extract the tensor value from zfit.Data\n",
    "        M_val = tf.convert_to_tensor(zfit.run(M_bw), dtype=tf.float64)\n",
    "        Gamma_val = tf.convert_to_tensor(zfit.run(Gamma_bw), dtype=tf.float64)\n",
    "        return 1 / ((x_tensor - M_val) ** 2 + (Gamma_val / 2) ** 2)\n",
    "\n",
    "# Instantiate the Breit-Wigner PDF\n",
    "signal_model = BreitWignerPDF(obs=obs)\n",
    "\n",
    "# Create the Gaussian kernel and the convolved signal\n",
    "gaussian_kernel = zfit.pdf.Gauss(mu=mu_gaussian, sigma=sigma_gaussian, obs=obs)\n",
    "signal_convolved = zfit.pdf.FFTConvPDFV1(func=signal_model, kernel=gaussian_kernel)\n",
    "\n",
    "# Generate x values\n",
    "x_values = np.linspace(-10, 10, 500)  # Adjust range and resolution as needed\n",
    "\n",
    "# Evaluate the convolved signal at the x values\n",
    "x_tensor = tf.convert_to_tensor(x_values, dtype=tf.float64)  # Convert to tensor for evaluation\n",
    "signal_convolved_values = signal_convolved.pdf(x_tensor).numpy()  # Ensure eager execution for .numpy()\n",
    "\n",
    "# Plot the result\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.plot(x_values, signal_convolved_values, label=\"Convolved Signal\")\n",
    "plt.title(\"Convolution of Breit-Wigner and Gaussian\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"PDF\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "668962fa",
   "metadata": {},
   "outputs": [
    {
     "ename": "InvalidArgumentError",
     "evalue": "{{function_node __wrapped__CheckNumerics_device_/job:localhost/replica:0/task:0/device:CPU:0}} Check if pdf output contains any NaNs of Infs : Tensor had NaN values [Op:CheckNumerics] name: ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_440/4093782672.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0msignal_model_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignal_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m \u001b[0mgaussian_kernel_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgaussian_kernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0msignal_convolved_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignal_convolved\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/tensorflow/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    574\u001b[0m                 \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m                 instructions)\n\u001b[0;32m--> 576\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    578\u001b[0m     doc = _add_deprecated_arg_notice_to_docstring(\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/util/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(norm, norm_range, *args, **kwargs)\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0mnorm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm_range\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m\"unexpected keyword argument 'norm'\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/z/zextension.py\u001b[0m in \u001b[0;36mconcrete_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    245\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mconcrete_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_jit\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcurrently_traced\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 247\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    248\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcurrently_traced\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/basepdf.py\u001b[0m in \u001b[0;36mpdf\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m    408\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_single_hook_pdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumeric_checks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 410\u001b[0;31m                 z.check_numerics(\n\u001b[0m\u001b[1;32m    411\u001b[0m                     \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Check if pdf output contains any NaNs of Infs\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    412\u001b[0m                 )\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/z/wrapping_tf.py\u001b[0m in \u001b[0;36mcheck_numerics\u001b[0;34m(tensor, message, name)\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0mcheck_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreal_check\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimag_check\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         check_op = tf.debugging.check_numerics(\n\u001b[0m\u001b[1;32m     95\u001b[0m             \u001b[0mtensor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m         )\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/tensorflow/python/ops/gen_array_ops.py\u001b[0m in \u001b[0;36mcheck_numerics\u001b[0;34m(tensor, message, name)\u001b[0m\n\u001b[1;32m    964\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    965\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 966\u001b[0;31m       \u001b[0m_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    967\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_FallbackException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    968\u001b[0m       \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   6654\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6655\u001b[0m   \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6656\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6658\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: {{function_node __wrapped__CheckNumerics_device_/job:localhost/replica:0/task:0/device:CPU:0}} Check if pdf output contains any NaNs of Infs : Tensor had NaN values [Op:CheckNumerics] name: "
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import zfit\n",
    "import uuid  # To generate unique parameter names\n",
    "\n",
    "# Enable eager execution\n",
    "tf.config.experimental_run_functions_eagerly(True)\n",
    "\n",
    "# Define the observable\n",
    "obs = zfit.Space(\"x\", limits=(76, 106))  # Adjust the limits as appropriate\n",
    "\n",
    "# Generate unique names for parameters\n",
    "unique_id = uuid.uuid4().hex[:8]  # Short unique identifier\n",
    "\n",
    "# Parameters for the Gaussian kernel\n",
    "mu_gaussian = zfit.Parameter(f\"mu_gaussian_{unique_id}\", 0.0)  # Unique name for Gaussian mean\n",
    "sigma_gaussian = zfit.Parameter(f\"sigma_gaussian_{unique_id}\", 1.0)  # Unique name for Gaussian std dev\n",
    "\n",
    "# Parameters for the Breit-Wigner\n",
    "M_bw = zfit.Parameter(f\"M_bw_{unique_id}\", 0.0)  # Unique name for Breit-Wigner mass\n",
    "Gamma_bw = zfit.Parameter(f\"Gamma_bw_{unique_id}\", 2.0)  # Unique name for Breit-Wigner width\n",
    "\n",
    "# Custom Breit-Wigner PDF\n",
    "class BreitWignerPDF(zfit.pdf.BasePDF):\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        # Convert x to tensor\n",
    "        x_tensor = x.value()  # Extract the tensor value from zfit.Data\n",
    "        M_val = tf.convert_to_tensor(zfit.run(M_bw), dtype=tf.float64)\n",
    "        Gamma_val = tf.convert_to_tensor(zfit.run(Gamma_bw), dtype=tf.float64)\n",
    "        return 1 / ((x_tensor - M_val) ** 2 + (Gamma_val / 2) ** 2)\n",
    "\n",
    "# Instantiate the Breit-Wigner PDF\n",
    "signal_model = BreitWignerPDF(obs=obs)\n",
    "gaussian_kernel = zfit.pdf.Gauss(mu=mu_gaussian, sigma=sigma_gaussian, obs=obs)\n",
    "\n",
    "signal_convolved = zfit.pdf.FFTConvPDFV1(func=signal_model, kernel=gaussian_kernel)\n",
    "\n",
    "\n",
    "\n",
    "# Provided histogram values and edges\n",
    "hist_values = np.array([\n",
    "    9, 7, 11, 2, 9, 10, 10, 8, 6, 11, 8, 12, 11, 11, 18, 14, 8, 17, 10, 13,\n",
    "    14, 24, 23, 19, 19, 34, 28, 24, 27, 29, 27, 42, 29, 41, 43, 45, 40, 56,\n",
    "    66, 53, 78, 84, 80, 115, 129, 123, 142, 156, 185, 189, 225, 241, 252, 281,\n",
    "    297, 319, 334, 363, 405, 412, 396, 351, 340, 370, 320, 258, 269, 238, 188,\n",
    "    174, 147, 116, 107, 93, 87, 87, 59, 59, 57, 50, 41, 35, 38, 41, 24, 29,\n",
    "    26, 27, 21, 16, 17, 14, 12, 15, 13, 13, 12, 14, 14, 11, 7, 11, 9, 22, 16,\n",
    "    11, 6, 6, 13, 2, 5, 6, 6, 6, 6, 4, 6, 3, 6, 5\n",
    "])\n",
    "hist_edges = np.linspace(76, 106, len(hist_values) + 1)\n",
    "\n",
    "# Calculate the bin centers (mid-points of each bin)\n",
    "bin_centers = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "\n",
    "# Convert bin centers to a TensorFlow tensor for evaluation\n",
    "x_tensor = tf.convert_to_tensor(bin_centers, dtype=tf.float64)  # Convert to tensor for evaluation\n",
    "\n",
    "# Evaluate the pure signal model (Breit-Wigner) at the bin centers\n",
    "\n",
    "\n",
    "signal_model_values = signal_model.pdf(x_tensor).numpy()\n",
    "gaussian_kernel_values = gaussian_kernel.pdf(x_tensor).numpy()\n",
    "signal_convolved_values = signal_convolved.pdf(x_tensor).numpy()\n",
    "\n",
    "# signal_model_values = signal_model.pdf(x_tensor)\n",
    "# signal_model_values = signal_model_values.numpy()  # Convert to numpy array for further use\n",
    "print(\"Breit-Wigner PDF values:\", signal_model_values)\n",
    "print(\"Gaussian Kernel values:\", gaussian_kernel_values)\n",
    "print(\"Convolved Signal values:\", signal_convolved_values)\n",
    "# Evaluate the Gaussian kernel at the bin centers\n",
    "# gaussian_kernel_values = gaussian_kernel.pdf(x_tensor)\n",
    "# gaussian_kernel_values = gaussian_kernel_values.numpy()  # Convert to numpy array for further use\n",
    "\n",
    "# Evaluate the convolved signal at the bin centers\n",
    "# signal_convolved_values = signal_convolved.pdf(x_tensor)\n",
    "# signal_convolved_values = signal_convolved_values.numpy()  # Convert to numpy array for further use\n",
    "\n",
    "# Plot the result\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.step(bin_centers, hist_values, label=\"Histogram\", where='mid', color='blue')  # Plot histogram as step plot\n",
    "plt.plot(bin_centers, signal_convolved_values, label=\"Convolved Signal\", color='red')  # Convolved signal\n",
    "# plt.plot(bin_centers, signal_model_values, label=\"Signal Model (Breit-Wigner)\", color='green', linestyle='--')  # Pure Breit-Wigner\n",
    "plt.title(\"Convolution of Breit-Wigner and Gaussian with Histogram\")\n",
    "plt.xlabel(\"x (bin centers)\")\n",
    "plt.ylabel(\"PDF / Histogram\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ca556347",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[ 76.125  76.375  76.625  76.875  77.125  77.375  77.625  77.875  78.125\n",
      "  78.375  78.625  78.875  79.125  79.375  79.625  79.875  80.125  80.375\n",
      "  80.625  80.875  81.125  81.375  81.625  81.875  82.125  82.375  82.625\n",
      "  82.875  83.125  83.375  83.625  83.875  84.125  84.375  84.625  84.875\n",
      "  85.125  85.375  85.625  85.875  86.125  86.375  86.625  86.875  87.125\n",
      "  87.375  87.625  87.875  88.125  88.375  88.625  88.875  89.125  89.375\n",
      "  89.625  89.875  90.125  90.375  90.625  90.875  91.125  91.375  91.625\n",
      "  91.875  92.125  92.375  92.625  92.875  93.125  93.375  93.625  93.875\n",
      "  94.125  94.375  94.625  94.875  95.125  95.375  95.625  95.875  96.125\n",
      "  96.375  96.625  96.875  97.125  97.375  97.625  97.875  98.125  98.375\n",
      "  98.625  98.875  99.125  99.375  99.625  99.875 100.125 100.375 100.625\n",
      " 100.875 101.125 101.375 101.625 101.875 102.125 102.375 102.625 102.875\n",
      " 103.125 103.375 103.625 103.875 104.125 104.375 104.625 104.875 105.125\n",
      " 105.375 105.625 105.875], shape=(120,), dtype=float64)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "volume and kernel should have the same dimensionality",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_439/592185562.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;31m# Perform convolution in the normal (non-FFT) space\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m     \u001b[0mconvolved_signal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msignal_model_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgaussian_kernel_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'same'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/scipy/signal/_signaltools.py\u001b[0m in \u001b[0;36mconvolve\u001b[0;34m(in1, in2, mode, method)\u001b[0m\n\u001b[1;32m   1401\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mvolume\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1402\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mvolume\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1403\u001b[0;31m         raise ValueError(\"volume and kernel should have the same \"\n\u001b[0m\u001b[1;32m   1404\u001b[0m                          \"dimensionality\")\n\u001b[1;32m   1405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: volume and kernel should have the same dimensionality"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import zfit\n",
    "import uuid  # To generate unique parameter names\n",
    "\n",
    "# Enable eager execution for TensorFlow\n",
    "tf.config.experimental_run_functions_eagerly(True)\n",
    "\n",
    "# Define the observable (adjust the limits as necessary for your use case)\n",
    "obs = zfit.Space(\"x\", limits=(75, 105))\n",
    "\n",
    "# Generate unique names for parameters to avoid conflicts\n",
    "unique_id = uuid.uuid4().hex[:8]  # Generate a short unique identifier\n",
    "\n",
    "# Parameters for the Gaussian kernel\n",
    "mu_gaussian = zfit.Parameter(f\"mu_gaussian_{unique_id}\", 90.0, lower=75.0, upper=105.0)\n",
    "sigma_gaussian = zfit.Parameter(f\"sigma_gaussian_{unique_id}\", 5.0, lower=0.1, upper=20.0)\n",
    "\n",
    "# Parameters for the Breit-Wigner\n",
    "M_bw = zfit.Parameter(f\"M_bw_{unique_id}\", 90.0, lower=75.0, upper=105.0)\n",
    "Gamma_bw = zfit.Parameter(f\"Gamma_bw_{unique_id}\", 2.0, lower=0.1, upper=10.0)\n",
    "\n",
    "# Custom Breit-Wigner PDF\n",
    "class BreitWignerPDF(zfit.pdf.BasePDF):\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        x_tensor = x.value()  # Get tensor values\n",
    "        M_val = tf.convert_to_tensor(zfit.run(M_bw), dtype=tf.float64)\n",
    "        Gamma_val = tf.convert_to_tensor(zfit.run(Gamma_bw), dtype=tf.float64)\n",
    "        return 1 / ((x_tensor - M_val) ** 2 + (Gamma_val / 2) ** 2)\n",
    "\n",
    "# Instantiate the Breit-Wigner PDF\n",
    "signal_model = BreitWignerPDF(obs=obs)\n",
    "\n",
    "# Create the Gaussian kernel and the convolved signal\n",
    "gaussian_kernel = zfit.pdf.Gauss(mu=mu_gaussian, sigma=sigma_gaussian, obs=obs)\n",
    "\n",
    "# Convolve the Breit-Wigner with the Gaussian kernel\n",
    "# signal_convolved = zfit.pdf.FFTConvPDFV1(func=signal_model, kernel=gaussian_kernel)\n",
    "\n",
    "signal_convolved = zfit.pdf.FFTConvPDFV1(func=signal_model, kernel=gaussian_kernel)\n",
    "# Histogram values and edges (provided data)\n",
    "hist_values = np.array([\n",
    "    9, 7, 11, 2, 9, 10, 10, 8, 6, 11, 8, 12, 11, 11, 18, 14, 8, 17, 10, 13,\n",
    "    14, 24, 23, 19, 19, 34, 28, 24, 27, 29, 27, 42, 29, 41, 43, 45, 40, 56,\n",
    "    66, 53, 78, 84, 80, 115, 129, 123, 142, 156, 185, 189, 225, 241, 252, 281,\n",
    "    297, 319, 334, 363, 405, 412, 396, 351, 340, 370, 320, 258, 269, 238, 188,\n",
    "    174, 147, 116, 107, 93, 87, 87, 59, 59, 57, 50, 41, 35, 38, 41, 24, 29,\n",
    "    26, 27, 21, 16, 17, 14, 12, 15, 13, 13, 12, 14, 14, 11, 7, 11, 9, 22, 16,\n",
    "    11, 6, 6, 13, 2, 5, 6, 6, 6, 6, 4, 6, 3, 6, 5\n",
    "])\n",
    "hist_edges = np.linspace(76, 106, len(hist_values) + 1)\n",
    "\n",
    "# Calculate the bin centers (mid-points of each bin)\n",
    "bin_centers = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "\n",
    "# Convert bin centers to TensorFlow tensor\n",
    "x_tensor = tf.convert_to_tensor(bin_centers, dtype=tf.float64)\n",
    "print(x_tensor)\n",
    "# Check for NaN or Inf issues during evaluation\n",
    "try:\n",
    "    # Evaluate the pure signal model (Breit-Wigner) at the bin centers\n",
    "    signal_model_values = signal_model.pdf(x_tensor)\n",
    "    signal_model_values = signal_model_values.numpy()  # Convert to numpy for plotting\n",
    "\n",
    "    # Evaluate the Gaussian kernel at the bin centers\n",
    "    gaussian_kernel_values = gaussian_kernel.pdf(x_tensor)\n",
    "    gaussian_kernel_values = gaussian_kernel_values.numpy()  # Convert to numpy for plotting\n",
    "\n",
    "    # Evaluate the convolved signal at the bin centers\n",
    "    \n",
    "    \n",
    "    signal_convolved_value = signal_convolved.pdf(x_tensor)\n",
    "    \n",
    "    signal_convolved_values = signal_convolved_value.numpy()  # Convert to numpy for plotting\n",
    "    \n",
    "    from scipy.signal import convolve\n",
    "\n",
    "# Perform convolution in the normal (non-FFT) space\n",
    "    convolved_signal = convolve(signal_model_values, gaussian_kernel_values, mode='same')\n",
    "\n",
    "\n",
    "except tf.errors.InvalidArgumentError as e:\n",
    "    print(\"Invalid Argument Error: Check if input data leads to NaNs or Infs. Error:\", e)\n",
    "    raise\n",
    "\n",
    "# Plot the histogram, the convolved signal, and optionally the Breit-Wigner\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# plt.step(bin_centers, hist_values, label=\"Histogram\", where='mid', color='blue')  # Plot histogram\n",
    "# plt.plot(bin_centers,signal_model_values, label=\"model Signal\", color='red')  # Convolved signal\n",
    "# # Optionally plot the raw signal model (Breit-Wigner)\n",
    "# # plt.plot(bin_centers, gaussian_kernel_values, label=\"Gaussian Kernel\", color='green', linestyle='--')\n",
    "# # plt.title(\"Convolution of Breit-Wigner and Gaussian with Histogram\")\n",
    "# plt.xlabel(\"x (bin centers)\")\n",
    "# plt.ylabel(\"PDF / Histogram\")\n",
    "# plt.legend()\n",
    "# plt.grid()\n",
    "# plt.show()\n",
    "\n",
    "# Plot the result\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(bin_centers, convolved_signal, label=\"Manual Convolution\", color='red')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b19654c7",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluating PDFs...\n",
      "Breit-Wigner Values: [[0.03333333 0.03319965 0.03306625 ... 0.03306625 0.03319965 0.03333333]\n",
      " [0.03346661 0.03333239 0.03319845 ... 0.03319845 0.03333239 0.03346661]\n",
      " [0.03360068 0.03346593 0.03333145 ... 0.03333145 0.03346593 0.03360068]\n",
      " ...\n",
      " [0.03360068 0.03346593 0.03333145 ... 0.03333145 0.03346593 0.03360068]\n",
      " [0.03346661 0.03333239 0.03319845 ... 0.03319845 0.03333239 0.03346661]\n",
      " [0.03333333 0.03319965 0.03306625 ... 0.03306625 0.03319965 0.03333333]]\n",
      "Gaussian Kernel Values: [0.00088877 0.00090491 0.00092131 0.00093798 0.00095491 0.00097212\n",
      " 0.0009896  0.00100735 0.00102539 0.00104371 0.00106232 0.00108123\n",
      " 0.00110043 0.00111993 0.00113974 0.00115985 0.00118028 0.00120103\n",
      " 0.00122209 0.00124348 0.0012652  0.00128725 0.00130964 0.00133237\n",
      " 0.00135544 0.00137886 0.00140264 0.00142678 0.00145128 0.00147615\n",
      " 0.00150139 0.001527   0.001553   0.00157939 0.00160616 0.00163333\n",
      " 0.00166089 0.00168887 0.00171725 0.00174604 0.00177526 0.00180489\n",
      " 0.00183496 0.00186546 0.0018964  0.00192778 0.00195961 0.0019919\n",
      " 0.00202464 0.00205785 0.00209152 0.00212568 0.00216031 0.00219542\n",
      " 0.00223103 0.00226713 0.00230373 0.00234084 0.00237846 0.0024166\n",
      " 0.00245526 0.00249445 0.00253418 0.00257444 0.00261525 0.00265661\n",
      " 0.00269853 0.00274101 0.00278406 0.00282768 0.00287188 0.00291667\n",
      " 0.00296205 0.00300802 0.0030546  0.00310179 0.0031496  0.00319803\n",
      " 0.00324708 0.00329677 0.0033471  0.00339807 0.00344969 0.00350198\n",
      " 0.00355492 0.00360854 0.00366283 0.00371781 0.00377348 0.00382984\n",
      " 0.0038869  0.00394467 0.00400315 0.00406236 0.00412229 0.00418296\n",
      " 0.00424436 0.00430651 0.00436942 0.00443308 0.00449751 0.00456271\n",
      " 0.00462869 0.00469545 0.004763   0.00483135 0.00490051 0.00497048\n",
      " 0.00504126 0.00511286 0.0051853  0.00525857 0.00533269 0.00540766\n",
      " 0.00548348 0.00556016 0.00563772 0.00571615 0.00579546 0.00587566\n",
      " 0.00595675 0.00603875 0.00612165 0.00620547 0.00629021 0.00637587\n",
      " 0.00646247 0.00655001 0.0066385  0.00672794 0.00681834 0.0069097\n",
      " 0.00700203 0.00709534 0.00718964 0.00728493 0.00738121 0.0074785\n",
      " 0.00757679 0.0076761  0.00777644 0.00787779 0.00798019 0.00808362\n",
      " 0.00818809 0.00829362 0.00840021 0.00850785 0.00861657 0.00872636\n",
      " 0.00883723 0.00894919 0.00906224 0.00917638 0.00929163 0.00940799\n",
      " 0.00952545 0.00964404 0.00976376 0.0098846  0.01000657 0.01012969\n",
      " 0.01025395 0.01037936 0.01050593 0.01063365 0.01076254 0.0108926\n",
      " 0.01102383 0.01115625 0.01128984 0.01142462 0.0115606  0.01169777\n",
      " 0.01183614 0.01197572 0.01211651 0.0122585  0.01240172 0.01254616\n",
      " 0.01269182 0.0128387  0.01298682 0.01313618 0.01328677 0.01343861\n",
      " 0.01359169 0.01374601 0.01390159 0.01405842 0.01421651 0.01437586\n",
      " 0.01453647 0.01469834 0.01486148 0.01502589 0.01519157 0.01535852\n",
      " 0.01552675 0.01569625 0.01586704 0.0160391  0.01621244 0.01638706\n",
      " 0.01656297 0.01674016 0.01691864 0.0170984  0.01727945 0.01746179\n",
      " 0.01764542 0.01783033 0.01801653 0.01820402 0.01839279 0.01858286\n",
      " 0.01877421 0.01896684 0.01916077 0.01935597 0.01955246 0.01975023\n",
      " 0.01994929 0.02014962 0.02035123 0.02055411 0.02075827 0.0209637\n",
      " 0.0211704  0.02137837 0.0215876  0.02179809 0.02200985 0.02222285\n",
      " 0.02243711 0.02265262 0.02286937 0.02308736 0.02330659 0.02352706\n",
      " 0.02374875 0.02397167 0.0241958  0.02442115 0.02464771 0.02487548\n",
      " 0.02510444 0.0253346  0.02556595 0.02579847 0.02603218 0.02626705\n",
      " 0.02650309 0.02674028 0.02697862 0.02721811 0.02745873 0.02770048\n",
      " 0.02794334 0.02818732 0.02843241 0.02867859 0.02892586 0.02917421\n",
      " 0.02942363 0.02967412 0.02992565 0.03017823 0.03043184 0.03068648\n",
      " 0.03094213 0.03119879 0.03145644 0.03171508 0.03197468 0.03223525\n",
      " 0.03249677 0.03275923 0.03302262 0.03328693 0.03355214 0.03381825\n",
      " 0.03408523 0.03435309 0.0346218  0.03489135 0.03516173 0.03543293\n",
      " 0.03570494 0.03597773 0.0362513  0.03652564 0.03680072 0.03707654\n",
      " 0.03735307 0.03763032 0.03790825 0.03818685 0.03846612 0.03874603\n",
      " 0.03902657 0.03930773 0.03958948 0.03987181 0.04015471 0.04043816\n",
      " 0.04072214 0.04100663 0.04129162 0.04157709 0.04186303 0.04214941\n",
      " 0.04243622 0.04272344 0.04301105 0.04329904 0.04358738 0.04387606\n",
      " 0.04416506 0.04445436 0.04474394 0.04503379 0.04532387 0.04561418\n",
      " 0.04590469 0.04619539 0.04648625 0.04677725 0.04706838 0.04735961\n",
      " 0.04765092 0.0479423  0.04823371 0.04852515 0.04881659 0.04910801\n",
      " 0.04939938 0.0496907  0.04998192 0.05027304 0.05056404 0.05085488\n",
      " 0.05114555 0.05143602 0.05172628 0.0520163  0.05230606 0.05259554\n",
      " 0.05288471 0.05317355 0.05346205 0.05375016 0.05403789 0.05432519\n",
      " 0.05461205 0.05489844 0.05518435 0.05546974 0.0557546  0.0560389\n",
      " 0.05632262 0.05660573 0.05688821 0.05717004 0.0574512  0.05773165\n",
      " 0.05801138 0.05829036 0.05856858 0.05884599 0.05912259 0.05939835\n",
      " 0.05967324 0.05994724 0.06022032 0.06049247 0.06076366 0.06103386\n",
      " 0.06130305 0.0615712  0.0618383  0.06210432 0.06236923 0.06263301\n",
      " 0.06289564 0.06315709 0.06341734 0.06367637 0.06393414 0.06419065\n",
      " 0.06444586 0.06469975 0.0649523  0.06520348 0.06545327 0.06570165\n",
      " 0.06594859 0.06619408 0.06643808 0.06668057 0.06692154 0.06716095\n",
      " 0.06739879 0.06763503 0.06786965 0.06810263 0.06833394 0.06856357\n",
      " 0.06879148 0.06901767 0.06924209 0.06946475 0.0696856  0.06990464\n",
      " 0.07012183 0.07033717 0.07055062 0.07076216 0.07097178 0.07117945\n",
      " 0.07138515 0.07158887 0.07179058 0.07199026 0.07218789 0.07238345\n",
      " 0.07257692 0.07276829 0.07295753 0.07314462 0.07332955 0.07351229\n",
      " 0.07369283 0.07387115 0.07404723 0.07422105 0.07439259 0.07456185\n",
      " 0.07472879 0.0748934  0.07505567 0.07521558 0.07537311 0.07552824\n",
      " 0.07568097 0.07583127 0.07597912 0.07612452 0.07626744 0.07640788\n",
      " 0.07654581 0.07668123 0.07681412 0.07694446 0.07707224 0.07719745\n",
      " 0.07732007 0.07744009 0.07755751 0.0776723  0.07778445 0.07789395\n",
      " 0.0780008  0.07810497 0.07820647 0.07830527 0.07840136 0.07849475\n",
      " 0.07858541 0.07867333 0.07875852 0.07884095 0.07892062 0.07899752\n",
      " 0.07907164 0.07914298 0.07921153 0.07927728 0.07934021 0.07940034\n",
      " 0.07945764 0.07951212 0.07956376 0.07961257 0.07965853 0.07970164\n",
      " 0.0797419  0.07977931 0.07981385 0.07984552 0.07987433 0.07990027\n",
      " 0.07992333 0.07994351 0.07996081 0.07997524 0.07998678 0.07999543\n",
      " 0.08000121 0.08000409 0.08000409 0.08000121 0.07999543 0.07998678\n",
      " 0.07997524 0.07996081 0.07994351 0.07992333 0.07990027 0.07987433\n",
      " 0.07984552 0.07981385 0.07977931 0.0797419  0.07970164 0.07965853\n",
      " 0.07961257 0.07956376 0.07951212 0.07945764 0.07940034 0.07934021\n",
      " 0.07927728 0.07921153 0.07914298 0.07907164 0.07899752 0.07892062\n",
      " 0.07884095 0.07875852 0.07867333 0.07858541 0.07849475 0.07840136\n",
      " 0.07830527 0.07820647 0.07810497 0.0780008  0.07789395 0.07778445\n",
      " 0.0776723  0.07755751 0.07744009 0.07732007 0.07719745 0.07707224\n",
      " 0.07694446 0.07681412 0.07668123 0.07654581 0.07640788 0.07626744\n",
      " 0.07612452 0.07597912 0.07583127 0.07568097 0.07552824 0.07537311\n",
      " 0.07521558 0.07505567 0.0748934  0.07472879 0.07456185 0.07439259\n",
      " 0.07422105 0.07404723 0.07387115 0.07369283 0.07351229 0.07332955\n",
      " 0.07314462 0.07295753 0.07276829 0.07257692 0.07238345 0.07218789\n",
      " 0.07199026 0.07179058 0.07158887 0.07138515 0.07117945 0.07097178\n",
      " 0.07076216 0.07055062 0.07033717 0.07012183 0.06990464 0.0696856\n",
      " 0.06946475 0.06924209 0.06901767 0.06879148 0.06856357 0.06833394\n",
      " 0.06810263 0.06786965 0.06763503 0.06739879 0.06716095 0.06692154\n",
      " 0.06668057 0.06643808 0.06619408 0.06594859 0.06570165 0.06545327\n",
      " 0.06520348 0.0649523  0.06469975 0.06444586 0.06419065 0.06393414\n",
      " 0.06367637 0.06341734 0.06315709 0.06289564 0.06263301 0.06236923\n",
      " 0.06210432 0.0618383  0.0615712  0.06130305 0.06103386 0.06076366\n",
      " 0.06049247 0.06022032 0.05994724 0.05967324 0.05939835 0.05912259\n",
      " 0.05884599 0.05856858 0.05829036 0.05801138 0.05773165 0.0574512\n",
      " 0.05717004 0.05688821 0.05660573 0.05632262 0.0560389  0.0557546\n",
      " 0.05546974 0.05518435 0.05489844 0.05461205 0.05432519 0.05403789\n",
      " 0.05375016 0.05346205 0.05317355 0.05288471 0.05259554 0.05230606\n",
      " 0.0520163  0.05172628 0.05143602 0.05114555 0.05085488 0.05056404\n",
      " 0.05027304 0.04998192 0.0496907  0.04939938 0.04910801 0.04881659\n",
      " 0.04852515 0.04823371 0.0479423  0.04765092 0.04735961 0.04706838\n",
      " 0.04677725 0.04648625 0.04619539 0.04590469 0.04561418 0.04532387\n",
      " 0.04503379 0.04474394 0.04445436 0.04416506 0.04387606 0.04358738\n",
      " 0.04329904 0.04301105 0.04272344 0.04243622 0.04214941 0.04186303\n",
      " 0.04157709 0.04129162 0.04100663 0.04072214 0.04043816 0.04015471\n",
      " 0.03987181 0.03958948 0.03930773 0.03902657 0.03874603 0.03846612\n",
      " 0.03818685 0.03790825 0.03763032 0.03735307 0.03707654 0.03680072\n",
      " 0.03652564 0.0362513  0.03597773 0.03570494 0.03543293 0.03516173\n",
      " 0.03489135 0.0346218  0.03435309 0.03408523 0.03381825 0.03355214\n",
      " 0.03328693 0.03302262 0.03275923 0.03249677 0.03223525 0.03197468\n",
      " 0.03171508 0.03145644 0.03119879 0.03094213 0.03068648 0.03043184\n",
      " 0.03017823 0.02992565 0.02967412 0.02942363 0.02917421 0.02892586\n",
      " 0.02867859 0.02843241 0.02818732 0.02794334 0.02770048 0.02745873\n",
      " 0.02721811 0.02697862 0.02674028 0.02650309 0.02626705 0.02603218\n",
      " 0.02579847 0.02556595 0.0253346  0.02510444 0.02487548 0.02464771\n",
      " 0.02442115 0.0241958  0.02397167 0.02374875 0.02352706 0.02330659\n",
      " 0.02308736 0.02286937 0.02265262 0.02243711 0.02222285 0.02200985\n",
      " 0.02179809 0.0215876  0.02137837 0.0211704  0.0209637  0.02075827\n",
      " 0.02055411 0.02035123 0.02014962 0.01994929 0.01975023 0.01955246\n",
      " 0.01935597 0.01916077 0.01896684 0.01877421 0.01858286 0.01839279\n",
      " 0.01820402 0.01801653 0.01783033 0.01764542 0.01746179 0.01727945\n",
      " 0.0170984  0.01691864 0.01674016 0.01656297 0.01638706 0.01621244\n",
      " 0.0160391  0.01586704 0.01569625 0.01552675 0.01535852 0.01519157\n",
      " 0.01502589 0.01486148 0.01469834 0.01453647 0.01437586 0.01421651\n",
      " 0.01405842 0.01390159 0.01374601 0.01359169 0.01343861 0.01328677\n",
      " 0.01313618 0.01298682 0.0128387  0.01269182 0.01254616 0.01240172\n",
      " 0.0122585  0.01211651 0.01197572 0.01183614 0.01169777 0.0115606\n",
      " 0.01142462 0.01128984 0.01115625 0.01102383 0.0108926  0.01076254\n",
      " 0.01063365 0.01050593 0.01037936 0.01025395 0.01012969 0.01000657\n",
      " 0.0098846  0.00976376 0.00964404 0.00952545 0.00940799 0.00929163\n",
      " 0.00917638 0.00906224 0.00894919 0.00883723 0.00872636 0.00861657\n",
      " 0.00850785 0.00840021 0.00829362 0.00818809 0.00808362 0.00798019\n",
      " 0.00787779 0.00777644 0.0076761  0.00757679 0.0074785  0.00738121\n",
      " 0.00728493 0.00718964 0.00709534 0.00700203 0.0069097  0.00681834\n",
      " 0.00672794 0.0066385  0.00655001 0.00646247 0.00637587 0.00629021\n",
      " 0.00620547 0.00612165 0.00603875 0.00595675 0.00587566 0.00579546\n",
      " 0.00571615 0.00563772 0.00556016 0.00548348 0.00540766 0.00533269\n",
      " 0.00525857 0.0051853  0.00511286 0.00504126 0.00497048 0.00490051\n",
      " 0.00483135 0.004763   0.00469545 0.00462869 0.00456271 0.00449751\n",
      " 0.00443308 0.00436942 0.00430651 0.00424436 0.00418296 0.00412229\n",
      " 0.00406236 0.00400315 0.00394467 0.0038869  0.00382984 0.00377348\n",
      " 0.00371781 0.00366283 0.00360854 0.00355492 0.00350198 0.00344969\n",
      " 0.00339807 0.0033471  0.00329677 0.00324708 0.00319803 0.0031496\n",
      " 0.00310179 0.0030546  0.00300802 0.00296205 0.00291667 0.00287188\n",
      " 0.00282768 0.00278406 0.00274101 0.00269853 0.00265661 0.00261525\n",
      " 0.00257444 0.00253418 0.00249445 0.00245526 0.0024166  0.00237846\n",
      " 0.00234084 0.00230373 0.00226713 0.00223103 0.00219542 0.00216031\n",
      " 0.00212568 0.00209152 0.00205785 0.00202464 0.0019919  0.00195961\n",
      " 0.00192778 0.0018964  0.00186546 0.00183496 0.00180489 0.00177526\n",
      " 0.00174604 0.00171725 0.00168887 0.00166089 0.00163333 0.00160616\n",
      " 0.00157939 0.001553   0.001527   0.00150139 0.00147615 0.00145128\n",
      " 0.00142678 0.00140264 0.00137886 0.00135544 0.00133237 0.00130964\n",
      " 0.00128725 0.0012652  0.00124348 0.00122209 0.00120103 0.00118028\n",
      " 0.00115985 0.00113974 0.00111993 0.00110043 0.00108123 0.00106232\n",
      " 0.00104371 0.00102539 0.00100735 0.0009896  0.00097212 0.00095491\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0.00093798 0.00092131 0.00090491 0.00088877]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "object too deep for desired array",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_439/1124369556.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0;31m# Manual convolution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0mmanual_convolution_fine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msignal_model_values_fine_1d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgaussian_kernel_values_fine_1d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'same'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m     \u001b[0mmanual_convolution_fine\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmanual_convolution_fine\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Normalize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Manual Convolution (Normalized):\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmanual_convolution_fine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mconvolve\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/numpy/core/numeric.py\u001b[0m in \u001b[0;36mconvolve\u001b[0;34m(a, v, mode)\u001b[0m\n\u001b[1;32m    848\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'v cannot be empty'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 850\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmultiarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorrelate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    851\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: object too deep for desired array"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import zfit\n",
    "import uuid  # To generate unique parameter names\n",
    "# Enable eager execution for TensorFlow\n",
    "tf.config.experimental_run_functions_eagerly(True)\n",
    "\n",
    "# Define the observable (adjust the limits as necessary for your use case)\n",
    "obs = zfit.Space(\"x\", limits=(75, 105))\n",
    "\n",
    "# Generate unique names for parameters to avoid conflicts\n",
    "unique_id = uuid.uuid4().hex[:8]  # Generate a short unique identifier\n",
    "\n",
    "# Parameters for the Gaussian kernel\n",
    "mu_gaussian = zfit.Parameter(f\"mu_gaussian_{unique_id}\", 90.0, lower=75.0, upper=105.0)\n",
    "sigma_gaussian = zfit.Parameter(f\"sigma_gaussian_{unique_id}\", 5.0, lower=0.1, upper=20.0)\n",
    "\n",
    "# Parameters for the Breit-Wigner\n",
    "M_bw = zfit.Parameter(f\"M_bw_{unique_id}\", 90.0, lower=75.0, upper=105.0)\n",
    "Gamma_bw = zfit.Parameter(f\"Gamma_bw_{unique_id}\", 2.0, lower=0.1, upper=10.0)\n",
    "\n",
    "# Custom Breit-Wigner PDF\n",
    "class BreitWignerPDF(zfit.pdf.BasePDF):\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        x_tensor = x.value()  # Get tensor values\n",
    "        M_val = tf.convert_to_tensor(zfit.run(M_bw), dtype=tf.float64)\n",
    "        Gamma_val = tf.convert_to_tensor(zfit.run(Gamma_bw), dtype=tf.float64)\n",
    "        return 1 / ((x_tensor - M_val) ** 2 + (Gamma_val / 2) ** 2)\n",
    "\n",
    "# Instantiate the Breit-Wigner PDF\n",
    "signal_model = BreitWignerPDF(obs=obs)\n",
    "\n",
    "# Create the Gaussian kernel and the convolved signal\n",
    "gaussian_kernel = zfit.pdf.Gauss(mu=mu_gaussian, sigma=sigma_gaussian, obs=obs)\n",
    "\n",
    "# Convolve the Breit-Wigner with the Gaussian kernel\n",
    "signal_convolved = zfit.pdf.FFTConvPDFV1(func=signal_model, kernel=gaussian_kernel)\n",
    "\n",
    "# Histogram values and edges (provided data)\n",
    "hist_values = np.array([\n",
    "    9, 7, 11, 2, 9, 10, 10, 8, 6, 11, 8, 12, 11, 11, 18, 14, 8, 17, 10, 13,\n",
    "    14, 24, 23, 19, 19, 34, 28, 24, 27, 29, 27, 42, 29, 41, 43, 45, 40, 56,\n",
    "    66, 53, 78, 84, 80, 115, 129, 123, 142, 156, 185, 189, 225, 241, 252, 281,\n",
    "    297, 319, 334, 363, 405, 412, 396, 351, 340, 370, 320, 258, 269, 238, 188,\n",
    "    174, 147, 116, 107, 93, 87, 87, 59, 59, 57, 50, 41, 35, 38, 41, 24, 29,\n",
    "    26, 27, 21, 16, 17, 14, 12, 15, 13, 13, 12, 14, 14, 11, 7, 11, 9, 22, 16,\n",
    "    11, 6, 6, 13, 2, 5, 6, 6, 6, 6, 4, 6, 3, 6, 5\n",
    "])\n",
    "hist_edges = np.linspace(76, 106, len(hist_values) + 1)\n",
    "\n",
    "# Calculate the bin centers (mid-points of each bin)\n",
    "bin_centers = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "\n",
    "# Convert bin centers to TensorFlow tensor\n",
    "x_tensor = tf.convert_to_tensor(bin_centers, dtype=tf.float64)\n",
    "\n",
    "# Finer binning for manual convolution\n",
    "x_fine = np.linspace(75, 105, 1000)\n",
    "x_tensor_fine = tf.convert_to_tensor(x_fine, dtype=tf.float64)\n",
    "\n",
    "# Check for NaN or Inf issues during evaluation\n",
    "try:\n",
    "    print(\"Evaluating PDFs...\")\n",
    "    # Evaluate the pure signal model (Breit-Wigner) at the bin centers\n",
    "    signal_model_values_fine = signal_model.pdf(x_tensor_fine).numpy()  # Convert to numpy for plotting\n",
    "    print(\"Breit-Wigner Values:\", signal_model_values_fine)\n",
    "\n",
    "    # Evaluate the Gaussian kernel at the bin centers\n",
    "    gaussian_kernel_values_fine = gaussian_kernel.pdf(x_tensor_fine).numpy()  # Convert to numpy for plotting\n",
    "    print(\"Gaussian Kernel Values:\", gaussian_kernel_values_fine)\n",
    "\n",
    "    # Fix: Ensure arrays are 1D for manual convolution\n",
    "    signal_model_values_fine_1d = np.squeeze(signal_model_values_fine)  # Convert to 1D if needed\n",
    "    gaussian_kernel_values_fine_1d = np.squeeze(gaussian_kernel_values_fine)  # Convert to 1D if needed\n",
    "\n",
    "    # Manual convolution\n",
    "    manual_convolution_fine = np.convolve(signal_model_values_fine_1d, gaussian_kernel_values_fine_1d, mode='same')\n",
    "    manual_convolution_fine /= np.max(manual_convolution_fine)  # Normalize\n",
    "    print(\"Manual Convolution (Normalized):\", manual_convolution_fine)\n",
    "\n",
    "    # Evaluate the convolved signal at the bin centers\n",
    "    signal_convolved_values = signal_convolved.pdf(x_tensor).numpy()  # Convert to numpy for plotting\n",
    "    print(\"Convolved Signal Values:\", signal_convolved_values)\n",
    "except tf.errors.InvalidArgumentError as e:\n",
    "    print(\"Invalid Argument Error: Check if input data leads to NaNs or Infs. Error:\", e)\n",
    "    raise\n",
    "\n",
    "# Plot the results\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(x_fine, manual_convolution_fine, label=\"Manual Convolution\", color=\"red\", linewidth=1.5)\n",
    "plt.plot(bin_centers, signal_convolved_values, label=\"Convolved Signal (FFT)\", color=\"blue\", linestyle=\"--\")\n",
    "plt.title(\"Comparison of Manual Convolution and FFT-Based Convolution\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"PDF\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdaaca81",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
