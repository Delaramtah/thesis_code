{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70aacf02",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) *(2 * N2_prime + N1_prime)) / (4*N2 * N2_prime)\n",
    "    term3 = ((2 * N2 + N1) **2) / (4*N2)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = (4 * (delta_N2) ** 2 + (delta_N1) ** 2) / ((2 * N2 + N1) ** 2)\n",
    "    term4 = (4 * (delta_N2_prime) ** 2 + (delta_N1_prime) ** 2) / ((2 * N2_prime + N1_prime) ** 2)\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.018*0.106)\n",
    "constant_value_2 =  0.00000369\n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_EE\",L_values1)\n",
    "print(\"errorlumi_EE\",delta_L_over_L_squared_values1)\n",
    "\n",
    "rat = [lbril_values[0]/L_values1[0], lbril_values[1]/L_values1[1] , lbril_values[2]/L_values1[2]]\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "\n",
    "print(\"bril\",lbril_values)\n",
    "\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red',  capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_EE\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d0bf691c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_EE [111136.43349056435, 95611.12468628376, 79060.80995194193]\n",
      "bril [114618.486, 97972.294, 81904.476]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) **2 )*((2 * N2_prime + N1_prime)**2) / (16*N2 * (N2_prime)**2)\n",
    "    term3 = ((2 * N2 + N1)*(2 * N2_prime + N1_prime)) / (4*N2* N2_prime)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = ((4 * delta_N2 ** 2 + delta_N1 ** 2) / (2 * N2 + N1)) ** 2\n",
    "    term4 = ((4 * delta_N2_prime ** 2 + delta_N1_prime ** 2) / (2 * N2_prime + N1_prime)) ** 2\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.073*0.106)\n",
    "constant_value_2 =  0.000001582 \n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_EE\",L_values1)\n",
    "\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "rat = [lbril_values[0]/L_values1[0], lbril_values[1]/L_values1[1] , lbril_values[2]/L_values1[2]]\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints,L_values1 ,fmt='o', color='red',  capsize=5,label=\"lumi_EE\")\n",
    "plt.errorbar(lumisec_midpoints, lbril_values , fmt='o', color='black',  capsize=5 ,label=\"lbril\")\n",
    "# plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red', capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.title(\"L vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "423868c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_BE [104538.17036397796, 89200.83999217776, 73517.43533196853]\n",
      "bril [114618.486, 97972.294, 81904.476]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) **2 )*((2 * N2_prime + N1_prime)**2) / (16*N2 * (N2_prime)**2)\n",
    "    term3 = ((2 * N2 + N1)*(2 * N2_prime + N1_prime)) / (4*N2* N2_prime)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = ((4 * delta_N2 ** 2 + delta_N1 ** 2) / (2 * N2 + N1)) ** 2\n",
    "    term4 = ((4 * delta_N2_prime ** 2 + delta_N1_prime ** 2) / (2 * N2_prime + N1_prime)) ** 2\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "N2_files = [\"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "N1_prime_files = [\"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "N2_prime_files = [\"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "delta_N1_files = [\"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "delta_N2_files = [\"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.073*0.112)\n",
    "constant_value_2 =  0.000001582 \n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_BE\",L_values1)\n",
    "\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "rat = [lbril_values[0]/L_values1[0], lbril_values[1]/L_values1[1] , lbril_values[2]/L_values1[2]]\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints,L_values1  , fmt='o', color='red',  capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values , fmt='o', color='black',  capsize=5)\n",
    "# plt.errorbar(lumisec_midpoints, rat ,fmt='o', color='red', capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.title(\"L vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4eee652a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_BB [125129.85682814714, 105982.53742888258, 88180.27290587434]\n",
      "bril [114618.486, 97972.294, 81904.476]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) **2 )*((2 * N2_prime + N1_prime)**2) / (16*N2 * (N2_prime)**2)\n",
    "    term3 = ((2 * N2 + N1)*(2 * N2_prime + N1_prime)) / (4*N2* N2_prime)\n",
    "    return term1 * term2 * term3\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = ((4 * delta_N2 ** 2 + delta_N1 ** 2) / (2 * N2 + N1)) ** 2\n",
    "    term4 = ((4 * delta_N2_prime ** 2 + delta_N1_prime ** 2) / (2 * N2_prime + N1_prime)) ** 2\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"] \n",
    "N2_files = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "delta_N1_files = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.073*0.073)\n",
    "constant_value_2 =  0.000001582 \n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_BB\",L_values1)\n",
    "\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "rat = [lbril_values[0]/L_values1[0], lbril_values[1]/L_values1[1] , lbril_values[2]/L_values1[2]]\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints,L_values1  , fmt='o', color='red',  capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values , fmt='o', color='black',  capsize=5)\n",
    "# plt.errorbar(lumisec_midpoints, rat ,fmt='o', color='red', capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.title(\"L vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "db040765",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_EE [99663.03191473045, 85530.01752005453, 70978.6528632015]\n",
      "errorlumi_EE [26.463186089330147, 19.66965497555974, 18.277960785446947]\n",
      "bril [114618.486, 97972.294, 81904.476]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) ** 2) / (4 * N2) \n",
    "    term3 = ((2 * N2 + N1) * (2 * N2_prime + N1_prime)) / (4 * N2 * N2_prime)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = ((4 * delta_N2 ** 2 + delta_N1 ** 2) / (2 * N2 + N1)) ** 2\n",
    "    term4 = ((4 * delta_N2_prime ** 2 + delta_N1_prime ** 2) / (2 * N2_prime + N1_prime)) ** 2\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"] \n",
    "N2_files = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "delta_N1_files = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.073*0.073)\n",
    "constant_value_2 =  0.000001582 \n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_EE\",L_values1)\n",
    "print(\"errorlumi_EE\",delta_L_over_L_squared_values1)\n",
    "\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "rat = [lbril_values[0]/L_values1[0], lbril_values[1]/L_values1[1] , lbril_values[2]/L_values1[2]]\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints,L_values1  ,yerr= delta_L_over_L_squared_values1, fmt='o', color='red',  capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values , fmt='o', color='black',  capsize=5)\n",
    "# plt.errorbar(lumisec_midpoints, rat ,fmt='o', color='red', capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.title(\"L vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.show()\n",
    "# lumi_EE [99663.03191473045, 85530.01752005453, 70978.6528632015]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "893b8440",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9d3a7bf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
