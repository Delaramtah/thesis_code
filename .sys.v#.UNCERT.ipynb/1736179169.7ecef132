{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ada76428",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final error squared for group 1hee1: 0.0009358969927549031\n",
      "Final error squared for group 1hee2: 0.0009602182987284052\n",
      "Final error squared for group 1hee3: 0.0010040051546537413\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# Function to read values and errors\n",
    "def read_values_and_errors(file1, file2):\n",
    "    \"\"\"\n",
    "    Reads a pair of values from two files and returns the values as floats.\n",
    "    \"\"\"\n",
    "    with open(file1, 'r') as f1, open(file2, 'r') as f2:\n",
    "        value1 = float(f1.read().strip())\n",
    "        value2 = float(f2.read().strip())\n",
    "    return value1, value2\n",
    "\n",
    "# Group files by their suffix (e.g., \"hee1\")\n",
    "def group_files_by_suffix(file_list_1, file_list_2):\n",
    "    \"\"\"\n",
    "    Groups files based on their shared suffix (e.g., \"hee1\").\n",
    "    Assumes filenames follow the format N_<group>.txt.\n",
    "    \"\"\"\n",
    "    groups = {}\n",
    "\n",
    "    for f1, f2 in zip(file_list_1, file_list_2):\n",
    "        # Extract the shared suffix (e.g., \"hee1\")\n",
    "        suffix = f1.split('_')[1].replace('.txt', '')  # Extract the part after '_'\n",
    "        groups[suffix] = {\"file1\": f1, \"file2\": f2}\n",
    "    \n",
    "    return groups\n",
    "\n",
    "# Function to calculate the final error\n",
    "def calculate_final_error(groups, error_files_1, error_files_2):\n",
    "    \"\"\"\n",
    "    Calculates the final error using the formula:\n",
    "    (\\delta_\\epsilon / \\epsilon)^2 = (\\delta_n / n)^2 + (\\delta_{2n + n'}) / (2n + n')^2\n",
    "    \"\"\"\n",
    "    final_errors = []\n",
    "\n",
    "    for suffix, files in groups.items():\n",
    "        # Get the filenames for n and n' files\n",
    "        n_file = files[\"file1\"]  # e.g., N_1hee1.txt\n",
    "        n_prime_file = files[\"file2\"]  # e.g., N_2hee1.txt\n",
    "\n",
    "        # Match error files based on file structure\n",
    "        error_file_1_matches = [ef for ef in error_files_1 if suffix in ef]\n",
    "        error_file_2_matches = [ef for ef in error_files_2 if suffix.replace(\"1h\", \"2h\") in ef]\n",
    "\n",
    "\n",
    "        # Ensure both error files exist\n",
    "        if not error_file_1_matches or not error_file_2_matches:\n",
    "            print(f\"Error: Missing error file for suffix {suffix}. Skipping...\")\n",
    "            continue  # Skip this group if any file is missing\n",
    "\n",
    "        error_file_1 = error_file_1_matches[0]\n",
    "        error_file_2 = error_file_2_matches[0]\n",
    "\n",
    "        # Read values and errors\n",
    "        n, n_prime = read_values_and_errors(n_file, n_prime_file)\n",
    "        dn, dn_prime = read_values_and_errors(error_file_1, error_file_2)\n",
    "\n",
    "        # Calculate the denominator (2n + n')\n",
    "        denominator = 2 * n + n_prime\n",
    "\n",
    "        # Calculate the individual terms in the formula\n",
    "        term1 = (dn / n) ** 2\n",
    "        term2 = (dn_prime / denominator) ** 2\n",
    "\n",
    "        # Calculate the final error squared\n",
    "        final_error_squared = term1 + term2\n",
    "\n",
    "        # Append the final error (squared)\n",
    "        final_errors.append((suffix, final_error_squared))\n",
    "    \n",
    "    return final_errors\n",
    "\n",
    "\n",
    "# Example Usage\n",
    "n_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "n_prime_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "\n",
    "n_error_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "n_prime_error_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "\n",
    "# Group files by their suffix\n",
    "groups = group_files_by_suffix(n_files, n_prime_files)\n",
    "\n",
    "# Calculate final errors\n",
    "final_errors = calculate_final_error(groups, n_error_files, n_prime_error_files)\n",
    "\n",
    "# Print the results\n",
    "for suffix, error in final_errors:\n",
    "    print(f\"Final error squared for group {suffix}: {error}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fb579f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "# Function to read values and errors\n",
    "def read_values_and_errors(file1, file2):\n",
    "    \"\"\"\n",
    "    Reads a pair of values from two files and returns the values as floats.\n",
    "    \"\"\"\n",
    "    with open(file1, 'r') as f1, open(file2, 'r') as f2:\n",
    "        value1 = float(f1.read().strip())\n",
    "        value2 = float(f2.read().strip())\n",
    "    return value1, value2\n",
    "\n",
    "# Group files by their suffix (e.g., \"hee1\")\n",
    "def group_files_by_suffix(file_list_1, file_list_2):\n",
    "    \"\"\"\n",
    "    Groups files based on their shared suffix (e.g., \"hee1\").\n",
    "    Assumes filenames follow the format N_<group>.txt.\n",
    "    \"\"\"\n",
    "    groups = {}\n",
    "\n",
    "    for f1, f2 in zip(file_list_1, file_list_2):\n",
    "        # Extract the shared suffix (e.g., \"hee1\")\n",
    "        suffix = f1.split('_')[1].replace('.txt', '')  # Extract the part after '_'\n",
    "        groups[suffix] = {\"file1\": f1, \"file2\": f2}\n",
    "    \n",
    "    return groups\n",
    "\n",
    "# Function to calculate the final error\n",
    "def calculate_final_error(groups, error_files_1, error_files_2):\n",
    "    \"\"\"\n",
    "    Calculates the final error using the formula:\n",
    "    (\\delta_\\epsilon / \\epsilon)^2 = (\\delta_n / n)^2 + (\\delta_{2n + n'}) / (2n + n')^2\n",
    "    \"\"\"\n",
    "    final_errors = []\n",
    "\n",
    "    for suffix, files in groups.items():\n",
    "        # Get the filenames for n and n' files\n",
    "        n_file = files[\"file1\"]  # e.g., N_1hee1.txt\n",
    "        n_prime_file = files[\"file2\"]  # e.g., N_2hee1.txt\n",
    "\n",
    "        # Match error files based on file structure\n",
    "        error_file_1_matches = [ef for ef in error_files_1 if suffix in ef]\n",
    "        error_file_2_matches = [ef for ef in error_files_2 if suffix.replace(\"1h\", \"2h\") in ef]\n",
    "\n",
    "\n",
    "        # Ensure both error files exist\n",
    "        if not error_file_1_matches or not error_file_2_matches:\n",
    "            print(f\"Error: Missing error file for suffix {suffix}. Skipping...\")\n",
    "            continue  # Skip this group if any file is missing\n",
    "\n",
    "        error_file_1 = error_file_1_matches[0]\n",
    "        error_file_2 = error_file_2_matches[0]\n",
    "\n",
    "        # Read values and errors\n",
    "        n, n_prime = read_values_and_errors(n_file, n_prime_file)\n",
    "        dn, dn_prime = read_values_and_errors(error_file_1, error_file_2)\n",
    "\n",
    "        # Calculate the denominator (2n + n')\n",
    "        denominator = 2 * n + n_prime\n",
    "\n",
    "        # Calculate the individual terms in the formula\n",
    "        term1 = (dn / n) ** 2\n",
    "        term2 = (dn_prime / denominator) ** 2\n",
    "\n",
    "        # Calculate the final error squared\n",
    "        final_error_squared = term1 + term2\n",
    "\n",
    "        # Append the final error (squared)\n",
    "        final_errors.append((suffix, final_error_squared))\n",
    "    \n",
    "    return final_errors\n",
    "\n",
    "\n",
    "# Example Usage\n",
    "n_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "n_prime_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "\n",
    "n_error_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "n_prime_error_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "\n",
    "# Group files by their suffix\n",
    "groups = group_files_by_suffix(n_files, n_prime_files)\n",
    "\n",
    "# Calculate final errors\n",
    "final_errors = calculate_final_error(groups, n_error_files, n_prime_error_files)\n",
    "\n",
    "# Print the results\n",
    "for suffix, error in final_errors:\n",
    "    print(f\"Final error squared for group {suffix}: {error}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3d088c7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final error squared for group 1hee1: 0.0009358969927549031\n",
      "Final error squared for group 1hee2: 0.0009602182987284052\n",
      "Final error squared for group 1hee3: 0.0010040051546537413\n",
      "Final error squared for group 1hbb7: 0.0007453882260237354\n",
      "Final error squared for group 1hbb8: 0.0006480806230196539\n",
      "Final error squared for group 1hbb9: 0.0008670649692484634\n",
      "Final error squared for group 1hbe4: 0.0006282115445206181\n",
      "Final error squared for group 1hbe5: 0.0005910793580087481\n",
      "Final error squared for group 1hbe6: 0.0007130068165834612\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# Function to read values and errors\n",
    "def read_values_and_errors(file1, file2):\n",
    "    \"\"\"\n",
    "    Reads a pair of values from two files and returns the values as floats.\n",
    "    \"\"\"\n",
    "    with open(file1, 'r') as f1, open(file2, 'r') as f2:\n",
    "        value1 = float(f1.read().strip())\n",
    "        value2 = float(f2.read().strip())\n",
    "    return value1, value2\n",
    "\n",
    "# Group files by their suffix (e.g., \"hee1\")\n",
    "def group_files_by_suffix(file_list_1, file_list_2):\n",
    "    \"\"\"\n",
    "    Groups files based on their shared suffix (e.g., \"hee1\").\n",
    "    Assumes filenames follow the format N_<group>.txt.\n",
    "    \"\"\"\n",
    "    groups = {}\n",
    "\n",
    "    for f1, f2 in zip(file_list_1, file_list_2):\n",
    "        # Extract the shared suffix (e.g., \"hee1\")\n",
    "        suffix = f1.split('_')[1].replace('.txt', '')  # Extract the part after '_'\n",
    "        groups[suffix] = {\"file1\": f1, \"file2\": f2}\n",
    "    \n",
    "    return groups\n",
    "\n",
    "# Function to calculate the final error\n",
    "def calculate_final_error(groups, error_files_1, error_files_2):\n",
    "    \"\"\"\n",
    "    Calculates the final error using the formula:\n",
    "    (\\delta_\\epsilon / \\epsilon)^2 = (\\delta_n / n)^2 + (\\delta_{2n + n'}) / (2n + n')^2\n",
    "    \"\"\"\n",
    "    final_errors = []\n",
    "\n",
    "    for suffix, files in groups.items():\n",
    "        # Get the filenames for n and n' files\n",
    "        n_file = files[\"file1\"]  # e.g., N_1hee1.txt\n",
    "        n_prime_file = files[\"file2\"]  # e.g., N_2hee1.txt\n",
    "\n",
    "        # Match error files based on file structure\n",
    "        error_file_1_matches = [ef for ef in error_files_1 if suffix in ef]\n",
    "        error_file_2_matches = [ef for ef in error_files_2 if suffix.replace(\"1h\", \"2h\") in ef]\n",
    "\n",
    "\n",
    "        # Ensure both error files exist\n",
    "        if not error_file_1_matches or not error_file_2_matches:\n",
    "            print(f\"Error: Missing error file for suffix {suffix}. Skipping...\")\n",
    "            continue  # Skip this group if any file is missing\n",
    "\n",
    "        error_file_1 = error_file_1_matches[0]\n",
    "        error_file_2 = error_file_2_matches[0]\n",
    "\n",
    "        # Read values and errors\n",
    "        n, n_prime = read_values_and_errors(n_file, n_prime_file)\n",
    "        dn, dn_prime = read_values_and_errors(error_file_1, error_file_2)\n",
    "\n",
    "        # Calculate the denominator (2n + n')\n",
    "        denominator = 2 * n + n_prime\n",
    "\n",
    "        # Calculate the individual terms in the formula\n",
    "        term1 = (dn / n) ** 2\n",
    "        term2 = (dn_prime / denominator) ** 2\n",
    "\n",
    "        # Calculate the final error squared\n",
    "        final_error_squared = term1 + term2\n",
    "\n",
    "        # Append the final error (squared)\n",
    "        final_errors.append((suffix, final_error_squared))\n",
    "    \n",
    "    return final_errors\n",
    "\n",
    "\n",
    "# Example Usage\n",
    "n_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\",\"N_1hbb7.txt\",\"N_1hbb8.txt\",\"N_1hbb9.txt\",\"N_1hbe4.txt\",\"N_1hbe5.txt\",\"N_1hbe6.txt\"]\n",
    "n_prime_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\",\"N_2hbb7.txt\",\"N_2hbb8.txt\",\"N_2hbb9.txt\",\"N_2hbe4.txt\",\"N_2hbe5.txt\",\"N_2hbe6.txt\"]\n",
    "\n",
    "n_error_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\",\"eN_1hbb7.txt\",\"eN_1hbb8.txt\",\"eN_1hbb9.txt\",\"eN_1hbe4.txt\",\"eN_1hbe5.txt\",\"eN_1hbe6.txt\"]\n",
    "n_prime_error_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\",\"eN_2hbb7.txt\",\"eN_2hbb8.txt\",\"eN_2hbb9.txt\",\"eN_2hbe4.txt\",\"eN_2hbe5.txt\",\"eN_2hbe6.txt\"]\n",
    "\n",
    "# Group files by their suffix\n",
    "groups = group_files_by_suffix(n_files, n_prime_files)\n",
    "\n",
    "# Calculate final errors\n",
    "final_errors = calculate_final_error(groups, n_error_files, n_prime_error_files)\n",
    "\n",
    "# Print the results\n",
    "for suffix, error in final_errors:\n",
    "    print(f\"Final error squared for group {suffix}: {error}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "058e3257",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final error squared for group 1Iee1: 0.001718839761879635\n",
      "Final error squared for group 1Iee2: 0.001518635853659169\n",
      "Final error squared for group 1Iee3: 0.0036654019375770815\n",
      "Final error squared for group 1Ibb9: 0.0018153923658068268\n",
      "Final error squared for group 1Ibb10: 0.0019311077312886911\n",
      "Final error squared for group 1Ibb11: 0.0019421741741463172\n",
      "Final error squared for group 1Ibe4: 0.0009419450653309044\n",
      "Final error squared for group 1Ibe5: 0.0010270575515952673\n",
      "Final error squared for group 1Ibe6: 0.001191166917400971\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# Function to read values and errors\n",
    "def read_values_and_errors(file1, file2):\n",
    "    \"\"\"\n",
    "    Reads a pair of values from two files and returns the values as floats.\n",
    "    \"\"\"\n",
    "    with open(file1, 'r') as f1, open(file2, 'r') as f2:\n",
    "        value1 = float(f1.read().strip())\n",
    "        value2 = float(f2.read().strip())\n",
    "    return value1, value2\n",
    "\n",
    "# Group files by their suffix (e.g., \"hee1\")\n",
    "def group_files_by_suffix(file_list_1, file_list_2):\n",
    "    \"\"\"\n",
    "    Groups files based on their shared suffix (e.g., \"hee1\").\n",
    "    Assumes filenames follow the format N_<group>.txt.\n",
    "    \"\"\"\n",
    "    groups = {}\n",
    "\n",
    "    for f1, f2 in zip(file_list_1, file_list_2):\n",
    "        # Extract the shared suffix (e.g., \"hee1\")\n",
    "        suffix = f1.split('_')[1].replace('.txt', '')  # Extract the part after '_'\n",
    "        groups[suffix] = {\"file1\": f1, \"file2\": f2}\n",
    "    \n",
    "    return groups\n",
    "\n",
    "# Function to calculate the final error\n",
    "def calculate_final_error(groups, error_files_1, error_files_2):\n",
    "    \"\"\"\n",
    "    Calculates the final error using the formula:\n",
    "    (\\delta_\\epsilon / \\epsilon)^2 = (\\delta_n / n)^2 + (\\delta_{2n + n'}) / (2n + n')^2\n",
    "    \"\"\"\n",
    "    final_errors = []\n",
    "\n",
    "    for suffix, files in groups.items():\n",
    "        # Get the filenames for n and n' files\n",
    "        n_file = files[\"file1\"]  # e.g., N_1hee1.txt\n",
    "        n_prime_file = files[\"file2\"]  # e.g., N_2hee1.txt\n",
    "\n",
    "        # Match error files based on file structure\n",
    "        error_file_1_matches = [ef for ef in error_files_1 if suffix in ef]\n",
    "        error_file_2_matches = [ef for ef in error_files_2 if suffix.replace(\"1I\", \"2I\") in ef]\n",
    "\n",
    "\n",
    "        # Ensure both error files exist\n",
    "        if not error_file_1_matches or not error_file_2_matches:\n",
    "            print(f\"Error: Missing error file for suffix {suffix}. Skipping...\")\n",
    "            continue  # Skip this group if any file is missing\n",
    "\n",
    "        error_file_1 = error_file_1_matches[0]\n",
    "        error_file_2 = error_file_2_matches[0]\n",
    "\n",
    "        # Read values and errors\n",
    "        n, n_prime = read_values_and_errors(n_file, n_prime_file)\n",
    "        dn, dn_prime = read_values_and_errors(error_file_1, error_file_2)\n",
    "\n",
    "        # Calculate the denominator (2n + n')\n",
    "        denominator = 2 * n + n_prime\n",
    "\n",
    "        # Calculate the individual terms in the formula\n",
    "        term1 = (dn / n) ** 2\n",
    "        term2 = (dn_prime / denominator) ** 2\n",
    "\n",
    "        # Calculate the final error squared\n",
    "        final_error_squared = term1 + term2\n",
    "\n",
    "        # Append the final error (squared)\n",
    "        final_errors.append((suffix, final_error_squared))\n",
    "    \n",
    "    return final_errors\n",
    "\n",
    "\n",
    "# Example Usage\n",
    "n_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\",\"N_1Ibb9.txt\",\"N_1Ibb10.txt\",\"N_1Ibb11.txt\",\"N_1Ibe4.txt\",\"N_1Ibe5.txt\",\"N_1Ibe6.txt\"]\n",
    "n_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\",\"N_2Ibb9.txt\",\"N_2Ibb10.txt\",\"N_2Ibb11.txt\",\"N_2Ibe4.txt\",\"N_2Ibe5.txt\",\"N_2Ibe6.txt\"]\n",
    "\n",
    "n_error_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\",\"eN_1Ibb9.txt\",\"eN_1Ibb10.txt\",\"eN_1Ibb11.txt\",\"eN_1Ibe4.txt\",\"eN_1Ibe5.txt\",\"eN_1Ibe6.txt\"]\n",
    "n_prime_error_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\",\"eN_2Ibb9.txt\",\"eN_2Ibb10.txt\",\"eN_2Ibb11.txt\",\"eN_2Ibe4.txt\",\"eN_2Ibe5.txt\",\"eN_2Ibe6.txt\"]\n",
    "\n",
    "# Group files by their suffix\n",
    "groups = group_files_by_suffix(n_files, n_prime_files)\n",
    "\n",
    "# Calculate final errors\n",
    "final_errors = calculate_final_error(groups, n_error_files, n_prime_error_files)\n",
    "\n",
    "# Print the results\n",
    "for suffix, error in final_errors:\n",
    "    print(f\"Final error squared for group {suffix}: {error}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c82b4c74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.00264 0.00247 0.001366\n",
      "0.00156 0.00161 0.0019000000000000002\n",
      "0.00255 0.0025700000000000002 0.0028\n",
      "*******\n",
      "4.2162000000000004e-07 5.5358e-07 9.6669e-07\n",
      "4.3467999999999997e-07 5.9759e-07 9.9927e-07\n",
      "7.5935e-07 1.3403400000000002e-06 1.70057e-06\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "erepEE_1 = 0.00093+0.00171\n",
    "erepEE_2 = 0.00096+0.00151\n",
    "erepEE_3 = 0.00100+0.000366\n",
    "erepBE_1 = 0.00062+0.00094\n",
    "erepBE_2 = 0.00059+0.00102\n",
    "erepBE_3 = 0.00071+0.00119\n",
    "erepBB_1 = 0.00074+0.00181\n",
    "erepBB_2 = 0.00064+0.00193\n",
    "erepBB_3 = 0.00086+0.00194\n",
    "print(erepEE_1,erepEE_2,erepEE_3)\n",
    "print(erepBE_1,erepBE_2,erepBE_3)\n",
    "print(erepBB_1,erepBB_2,erepBB_3)\n",
    "print(\"*******\")\n",
    "ernEE_1 = (2.5243+1.6919)*math.pow(10,-7)\n",
    "ernEE_2 = (3.0788+2.4570)*math.pow(10,-7)\n",
    "ernEE_3 = (5.1076+4.5593)*math.pow(10,-7)\n",
    "ernBE_1 = (2.2768+2.0700)*math.pow(10,-7)\n",
    "ernBE_2 = (2.8715+3.1044)*math.pow(10,-7)\n",
    "ernBE_3 = (4.5402+5.4525)*math.pow(10,-7)\n",
    "ernBB_1 = (3.9392+3.6543)*math.pow(10,-7)\n",
    "ernBB_2 = (4.7655+8.6379)*math.pow(10,-7)\n",
    "ernBB_3 = (8.0408+8.9649)*math.pow(10,-7)\n",
    "print(ernEE_1,ernEE_2,ernEE_3)\n",
    "print(ernBE_1,ernBE_2,ernBE_3)\n",
    "print(ernBB_1,ernBB_2,ernBB_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d62196a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result for set 1: 2.5243262710218377e-07\n",
      "Result for set 2: 3.07886655752429e-07\n",
      "Result for set 3: 5.107658367858631e-07\n",
      "Result for set 4: 3.93924588518439e-07\n",
      "Result for set 5: 4.765530969209052e-07\n",
      "Result for set 6: 8.040850419286541e-07\n",
      "Result for set 7: 2.2768434023623824e-07\n",
      "Result for set 8: 2.871517843938897e-07\n",
      "Result for set 9: 4.540252989368545e-07\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Helper function to read a value and its uncertainty from a file\n",
    "def read_value_and_uncertainty(filename, default_uncertainty=1.0):\n",
    "    try:\n",
    "        with open(filename, 'r') as file:\n",
    "            # Read the first line and attempt to split into one value\n",
    "            line = file.readline().strip()\n",
    "\n",
    "            # Skip empty lines\n",
    "            if not line:\n",
    "                raise ValueError(f\"Empty line in file: {filename}\")\n",
    "            \n",
    "            # Only one value is expected\n",
    "            value = float(line)\n",
    "            return value, default_uncertainty\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(f\"Error reading {filename}: {e}\")\n",
    "        return None, None  # Return None to indicate a problem\n",
    "\n",
    "# Function to calculate epsilon\n",
    "def calculate_epsilon(N1, N2):\n",
    "    return (2 * N2) / (2 * N2 + N1)\n",
    "\n",
    "# Function to calculate (delta_N / N)^2\n",
    "def calculate_delta_N_over_N_squared(n1_file, n2_file, n1_error_file, n2_error_file):\n",
    "    results = []  # Initialize an empty list to store results\n",
    "\n",
    "    for i in range(len(n1_file)):\n",
    "        # Read N1 and N2 values and their uncertainties\n",
    "        N1, delta_N1 = read_value_and_uncertainty(n1_file[i])\n",
    "        N2, delta_N2 = read_value_and_uncertainty(n2_file[i])\n",
    "\n",
    "        if N1 is None or N2 is None:\n",
    "            print(f\"Skipping calculation for set {i+1} due to missing or invalid data.\")\n",
    "            continue\n",
    "\n",
    "        # Assume constant uncertainties for the N1 and N2 files (e.g., default value of 1.0)\n",
    "        _, delta_N1_error = read_value_and_uncertainty(n1_error_file[i], default_uncertainty=1.0)\n",
    "        _, delta_N2_error = read_value_and_uncertainty(n2_error_file[i], default_uncertainty=1.0)\n",
    "\n",
    "        if delta_N1_error is None or delta_N2_error is None:\n",
    "            print(f\"Skipping calculation for set {i+1} due to missing uncertainties.\")\n",
    "            continue\n",
    "\n",
    "        # Calculate epsilon\n",
    "        epsilon = calculate_epsilon(N1, N2)\n",
    "\n",
    "        # Calculate relative uncertainties\n",
    "        delta_N2_over_N2 = delta_N2 / N2\n",
    "\n",
    "        # Propagate uncertainty through epsilon formula\n",
    "        delta_epsilon = np.abs(2 * N2 / (2 * N2 + N1)**2) * delta_N1 + np.abs(-2 / (2 * N2 + N1)) * delta_N2\n",
    "        term2 = delta_epsilon / (2 * epsilon * (1 - epsilon))\n",
    "\n",
    "        # Calculate (delta_N / N)^2\n",
    "        delta_N_over_N_squared = delta_N2_over_N2**2 + term2**2\n",
    "        results.append(delta_N_over_N_squared)\n",
    "\n",
    "    return results\n",
    "\n",
    "# Example usage\n",
    "n1_file = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\", \"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\", \"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "n2_file = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\", \"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\", \"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "n1_error_file = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\", \"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\", \"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "n2_error_file = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\", \"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\", \"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "\n",
    "# Loop through all the files and calculate the result for each pair\n",
    "results = calculate_delta_N_over_N_squared(n1_file, n2_file, n1_error_file, n2_error_file)\n",
    "\n",
    "# Print results\n",
    "for i, result in enumerate(results):\n",
    "    print(f\"Result for set {i+1}: {result}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b709f28b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result for set 1: 1.691963323786033e-07\n",
      "Result for set 2: 2.4570905761608477e-07\n",
      "Result for set 3: 4.559327251164106e-07\n",
      "Result for set 4: 3.654311045416467e-07\n",
      "Result for set 5: 8.637976100394578e-07\n",
      "Result for set 6: 8.964979968264938e-07\n",
      "Result for set 7: 2.0700345936944278e-07\n",
      "Result for set 8: 3.1044386465338073e-07\n",
      "Result for set 9: 5.452548059500491e-07\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Helper function to read a value and its uncertainty from a file\n",
    "def read_value_and_uncertainty(filename, default_uncertainty=1.0):\n",
    "    try:\n",
    "        with open(filename, 'r') as file:\n",
    "            # Read the first line and attempt to split into one value\n",
    "            line = file.readline().strip()\n",
    "\n",
    "            # Skip empty lines\n",
    "            if not line:\n",
    "                raise ValueError(f\"Empty line in file: {filename}\")\n",
    "            \n",
    "            # Only one value is expected\n",
    "            value = float(line)\n",
    "            return value, default_uncertainty\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(f\"Error reading {filename}: {e}\")\n",
    "        return None, None  # Return None to indicate a problem\n",
    "\n",
    "# Function to calculate epsilon\n",
    "def calculate_epsilon(N1, N2):\n",
    "    return (2 * N2) / (2 * N2 + N1)\n",
    "\n",
    "# Function to calculate (delta_N / N)^2\n",
    "def calculate_delta_N_over_N_squared(n1_file, n2_file, n1_error_file, n2_error_file):\n",
    "    results = []  # Initialize an empty list to store results\n",
    "\n",
    "    for i in range(len(n1_file)):\n",
    "        # Read N1 and N2 values and their uncertainties\n",
    "        N1, delta_N1 = read_value_and_uncertainty(n1_file[i])\n",
    "        N2, delta_N2 = read_value_and_uncertainty(n2_file[i])\n",
    "\n",
    "        if N1 is None or N2 is None:\n",
    "            print(f\"Skipping calculation for set {i+1} due to missing or invalid data.\")\n",
    "            continue\n",
    "\n",
    "        # Assume constant uncertainties for the N1 and N2 files (e.g., default value of 1.0)\n",
    "        _, delta_N1_error = read_value_and_uncertainty(n1_error_file[i], default_uncertainty=1.0)\n",
    "        _, delta_N2_error = read_value_and_uncertainty(n2_error_file[i], default_uncertainty=1.0)\n",
    "\n",
    "        if delta_N1_error is None or delta_N2_error is None:\n",
    "            print(f\"Skipping calculation for set {i+1} due to missing uncertainties.\")\n",
    "            continue\n",
    "\n",
    "        # Calculate epsilon\n",
    "        epsilon = calculate_epsilon(N1, N2)\n",
    "\n",
    "        # Calculate relative uncertainties\n",
    "        delta_N2_over_N2 = delta_N2 / N2\n",
    "\n",
    "        # Propagate uncertainty through epsilon formula\n",
    "        delta_epsilon = np.abs(2 * N2 / (2 * N2 + N1)**2) * delta_N1 + np.abs(-2 / (2 * N2 + N1)) * delta_N2\n",
    "        term2 = delta_epsilon / (2 * epsilon * (1 - epsilon))\n",
    "\n",
    "        # Calculate (delta_N / N)^2\n",
    "        delta_N_over_N_squared = delta_N2_over_N2**2 + term2**2\n",
    "        results.append(delta_N_over_N_squared)\n",
    "\n",
    "    return results\n",
    "\n",
    "# Example usage\n",
    "n1_file = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\", \"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\", \"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "n2_file = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\", \"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\", \"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "n1_error_file = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\", \"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\", \"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "n2_error_file = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\", \"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\", \"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "# Loop through all the files and calculate the result for each pair\n",
    "results = calculate_delta_N_over_N_squared(n1_file, n2_file, n1_error_file, n2_error_file)\n",
    "\n",
    "# Print results\n",
    "for i, result in enumerate(results):\n",
    "    print(f\"Result for set {i+1}: {result}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a2f26ac2",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_471/3819762956.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;31m# Load all input data for the first set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m \u001b[0mN1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN1_files\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m \u001b[0mN2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN2_files\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0mN1_prime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN1_prime_files\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/tmp/ipykernel_471/3819762956.py\u001b[0m in \u001b[0;36mload_data\u001b[0;34m(file_list)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Load data from text files\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloadtxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfile_list\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# File names for inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/tmp/ipykernel_471/3819762956.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Load data from text files\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloadtxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfile_list\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# File names for inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) ** 2) / (4 * N2)\n",
    "    term3 = ((2 * N2 + N1) * (2 * N2_prime + N1_prime)) / (4 * N2 * N2_prime)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = ((4 * delta_N2 ** 2 + delta_N1 ** 2) / (2 * N2 + N1)) ** 2\n",
    "    term4 = ((4 * delta_N2_prime ** 2 + delta_N1_prime ** 2) / (2 * N2_prime + N1_prime)) ** 2\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.018*0.31)\n",
    "constant_value_2 =  0.000001582 \n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "\n",
    "# File names for inputs (second set of data)\n",
    "N1_files2 = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"] \n",
    "N2_files2 = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files2 = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files2 = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "delta_N1_files2 = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files2 = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files2 = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files2 = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "# Load all input data for the second set\n",
    "N1_alt = load_data(N1_files2)\n",
    "N2_alt = load_data(N2_files2)\n",
    "N1_prime_alt = load_data(N1_prime_files2)\n",
    "N2_prime_alt = load_data(N2_prime_files2)\n",
    "delta_N1_alt = load_data(delta_N1_files2)\n",
    "delta_N2_alt = load_data(delta_N2_files2)\n",
    "delta_N1_prime_alt = load_data(delta_N1_prime_files2)\n",
    "delta_N2_prime_alt = load_data(delta_N2_prime_files2)\n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the second set of inputs\n",
    "L_values2 = []\n",
    "delta_L_over_L_squared_values2 = []\n",
    "for i in range(len(N1_alt)):\n",
    "    L = calculate_L(N1_alt[i], N2_alt[i], N1_prime_alt[i], N2_prime_alt[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1_alt[i], N2_alt[i], N1_prime_alt[i], N2_prime_alt[i], delta_N1_alt[i], delta_N2_alt[i], delta_N1_prime_alt[i], delta_N2_prime_alt[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values2.append(L)\n",
    "    delta_L_over_L_squared_values2.append(delta_L_squared)\n",
    "\n",
    "# File names for inputs (third set of data)\n",
    "N1_files3 = [\"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "N2_files3 = [\"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "N1_prime_files3 = [\"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "N2_prime_files3 = [\"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "delta_N1_files3 = [\"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "delta_N2_files3 = [\"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "delta_N1_prime_files3 = [\"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "delta_N2_prime_files3 = [\"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "# Load all input data for the third set\n",
    "N1_altt = load_data(N1_files3)\n",
    "N2_altt = load_data(N2_files3)\n",
    "N1_prime_altt = load_data(N1_prime_files3)\n",
    "N2_prime_altt = load_data(N2_prime_files3)\n",
    "delta_N1_altt = load_data(delta_N1_files3)\n",
    "delta_N2_altt = load_data(delta_N2_files3)\n",
    "delta_N1_prime_altt = load_data(delta_N1_prime_files3)\n",
    "delta_N2_prime_altt = load_data(delta_N2_prime_files3)\n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the third set of inputs\n",
    "L_values3 = []\n",
    "delta_L_over_L_squared_values3 = []\n",
    "for i in range(len(N1_altt)):\n",
    "    L = calculate_L(N1_altt[i], N2_altt[i], N1_prime_altt[i], N2_prime_altt[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1_altt[i], N2_altt[i], N1_prime_altt[i], N2_prime_altt[i], delta_N1_altt[i], delta_N2_altt[i], delta_N1_prime_altt[i], delta_N2_prime_altt[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values3.append(L)\n",
    "    delta_L_over_L_squared_values3.append(delta_L_squared)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_EE\",L_values1)\n",
    "print(\"errorlumi_EE\",delta_L_over_L_squared_values1)\n",
    "print(\"lumi_BB\",L_values2)\n",
    "print(\"errorlumi_BB\",delta_L_over_L_squared_values2)\n",
    "print(\"lumi_BE\",L_values3)\n",
    "print(\"errorlumi_BE\",delta_L_over_L_squared_values3)\n",
    "a = L_values1[0]+L_values2[0]+L_values3[0]\n",
    "b = L_values1[1]+L_values2[1]+L_values3[1]\n",
    "c = L_values1[2]+L_values2[2]+L_values3[2]\n",
    "alll = [a,b,c]\n",
    "da = delta_L_over_L_squared_values1[0]+delta_L_over_L_squared_values2[0]+delta_L_over_L_squared_values3[0]\n",
    "db = delta_L_over_L_squared_values1[1]+delta_L_over_L_squared_values2[1]+delta_L_over_L_squared_values3[1]\n",
    "dc = delta_L_over_L_squared_values1[2]+delta_L_over_L_squared_values2[2]+delta_L_over_L_squared_values3[2]\n",
    "allle = [da,db,dc]\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "print(\"lumi_tot\",alll )\n",
    "print(\"erlumi_tot\",allle )\n",
    "\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, alll ,yerr=allle , fmt='o', color='red',  capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values , fmt='o', color='black',  capsize=5)\n",
    "\n",
    "# plt.errorbar(lumisec_midpoints, L_values1, yerr=delta_L_over_L_squared_values1, fmt='o', color='black',  capsize=5)\n",
    "# plt.errorbar(lumisec_midpoints, L_values2, yerr=delta_L_over_L_squared_values2, fmt='o', color='blue',  capsize=5)\n",
    "# plt.errorbar(lumisec_midpoints, L_values3, yerr=delta_L_over_L_squared_values3, fmt='o', color='red',  capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.title(\"L vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70aacf02",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) *(2 * N2_prime + N1_prime)) / (4*N2 * N2_prime)\n",
    "    term3 = ((2 * N2 + N1) **2) / (4*N2)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = (4 * (delta_N2) ** 2 + (delta_N1) ** 2) / ((2 * N2 + N1) ** 2)\n",
    "    term4 = (4 * (delta_N2_prime) ** 2 + (delta_N1_prime) ** 2) / ((2 * N2_prime + N1_prime) ** 2)\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.018*0.106)\n",
    "constant_value_2 =  0.00000369\n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_EE\",L_values1)\n",
    "print(\"errorlumi_EE\",delta_L_over_L_squared_values1)\n",
    "\n",
    "rat = [lbril_values[0]/L_values1[0], lbril_values[1]/L_values1[1] , lbril_values[2]/L_values1[2]]\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "\n",
    "print(\"bril\",lbril_values)\n",
    "\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red',  capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_EE\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d0bf691c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_EE [293920.71242498746, 258091.74451378375, 198552.26262029275]\n",
      "errorlumi_EE [61.31920277443618, 43.91422437650629, 41.42379193686973]\n",
      "bril [116086.333, 100081.51, 93398.989]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "# Function to calculate L\n",
    "def calculate_L(N1, N2, N1_prime, N2_prime, constant_value_1):\n",
    "    term1 = (1 / constant_value_1)\n",
    "    term2 = ((2 * N2 + N1) ** 2) / (4 * N1)\n",
    "    term3 = ((2 * N2 + N1) * (2 * N2_prime + N1_prime)) / (4 * N2 * N2_prime)\n",
    "    return term1 * term2 * term3\n",
    "\n",
    "# Function to calculate (delta L / L)^2\n",
    "def calculate_delta_L_over_L_squared(N1, N2, N1_prime, N2_prime, delta_N1, delta_N2, delta_N1_prime, delta_N2_prime, constant_value_2, constant_value_3):\n",
    "    term1 = 3 * (delta_N2 / N2) ** 2\n",
    "    term2 = (delta_N2_prime / N2_prime) ** 2\n",
    "    term3 = ((4 * delta_N2 ** 2 + delta_N1 ** 2) / (2 * N2 + N1)) ** 2\n",
    "    term4 = ((4 * delta_N2_prime ** 2 + delta_N1_prime ** 2) / (2 * N2_prime + N1_prime)) ** 2\n",
    "    return term1 + term2 + term3 + term4 + constant_value_2 + constant_value_3\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "# File names for inputs\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "delta_N1 = load_data(delta_N1_files)\n",
    "delta_N2 = load_data(delta_N2_files)\n",
    "delta_N1_prime = load_data(delta_N1_prime_files)\n",
    "delta_N2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "# Constants\n",
    "constant_value_1 = (2.073*0.097)\n",
    "constant_value_2 =  0.000001582 \n",
    "constant_value_3 =  0.000141 \n",
    "\n",
    "# Calculate L and (delta L / L)^2 for the first set of inputs\n",
    "L_values1 = []\n",
    "delta_L_over_L_squared_values1 = []\n",
    "for i in range(len(N1)):\n",
    "    L = calculate_L(N1[i], N2[i], N1_prime[i], N2_prime[i], constant_value_1)\n",
    "    delta_L_squared = calculate_delta_L_over_L_squared(\n",
    "        N1[i], N2[i], N1_prime[i], N2_prime[i], delta_N1[i], delta_N2[i], delta_N1_prime[i], delta_N2_prime[i],\n",
    "        constant_value_2, constant_value_3\n",
    "    )\n",
    "    L_values1.append(L)\n",
    "    delta_L_over_L_squared_values1.append(delta_L_squared)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "print(\"lumi_EE\",L_values1)\n",
    "print(\"errorlumi_EE\",delta_L_over_L_squared_values1)\n",
    "\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot L\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints,L_values1  ,yerr= delta_L_over_L_squared_values1, fmt='o', color='red',  capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values , fmt='o', color='black',  capsize=5)\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.title(\"L vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "423868c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
