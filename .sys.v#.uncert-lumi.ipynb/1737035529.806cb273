{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a15e9ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# N_z = L Sigma*BR * eff * Acc\n",
    "# We have N_z, eff, and Acc for EE, EB, and BB\n",
    "# Sigma*BR does not depend on the region\n",
    "# We want to evaluate error per region\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "07bf4ac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def RatioError(num, den, eNum, eDen, ifRel):\n",
    "    '''Assumin C = Num/Den. Takes numerator and denominator together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C.'''\n",
    "    # relEr_C^2 = relEr_A^2 + relEr_B^2\n",
    "    relErDen = float(eDen) / float(den)\n",
    "    relErNum = float(eNum) / float(num)\n",
    "    relErC =  math.sqrt(relErDen**2 + relErNum**2)\n",
    "    if ifRel:\n",
    "        return relErC\n",
    "    return relErC*(float(num)/float(den))\n",
    "\n",
    "def MultError(num, den, eNum, eDen, ifRel):\n",
    "    '''Assumin C = Num*Den. Takes numerator and denominator together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C.'''\n",
    "    # relEr_C^2 = relEr_A^2 + relEr_B^2\n",
    "    relErDen = float(eDen) / float(den)\n",
    "    relErNum = float(eNum) / float(num)\n",
    "    relErC =  math.sqrt(relErDen**2 + relErNum**2)\n",
    "    if ifRel:\n",
    "        return relErC\n",
    "    return relErC*(float(num)*float(den))\n",
    "\n",
    "def SumError(a,b,eA,eB, ifRel):\n",
    "    '''Assumin C = a+b. Takes a,b, together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C'''\n",
    "    # Er_C^2 = Er_A^2 + Er_B^2\n",
    "    ErC = math.sqrt(eA**2+eB**2)\n",
    "    if not ifRel:\n",
    "        return ErC\n",
    "    return float(ErC)/float(a+b)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bc8bc8dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def AccError(N_pass, N_tot, ifRel):\n",
    "    Acc = float(N_pass)/float(N_tot)\n",
    "    return Acc, RatioError(N_pass, N_tot, math.sqrt(N_pass), math.sqrt(N_tot), ifRel)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "367cc4d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def EffError(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2dfeb358",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we need to evaluate N_z and its error properly\n",
    "# N_z = N1 / (2*eff_HLT(1-eff_HLT)*eff_ID^2)\n",
    "# Here, N1 is the number read from the HLT fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b1787a44",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3646500084808556\n",
      "0.0007966320344501433\n",
      "effIDEr [0.017929791367310134, 0.017450007661543015, 0.018889313331542333]\n",
      "effHLTEr [0.017717988285035336, 0.018105022791970283, 0.01896598932356834]\n",
      "effID [0.8741508914476283, 0.8810528806287043, 0.8859915955418469]\n",
      "effHLT [0.8604563192021063, 0.8598780114940181, 0.857738048910729]\n",
      "Nz [18368.633803535493, 15916.677367373906, 13202.333661439816]\n",
      "NzEr [1535.4018940561186, 1339.2669121254762, 1144.6892616669613]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### for EE region ###\n",
    "#acceptance EE\n",
    "N_pass = 285929\n",
    "N_tot = 784119\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "print(Acc)\n",
    "print(AccEr)\n",
    "c_h = 0.9998\n",
    "\n",
    "def EffErrorhlt(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "def EffErrorid(N1_prime, N2_prime, eN1_prime, eN2_prime, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2_prime,N1_prime,2*eN2_prime,eN1_prime, False)\n",
    "    eNum = 2*eN2_prime\n",
    "    return  RatioError(2*N2_prime, 2*N2_prime+N1_prime, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1, eN1, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzee = float(N1)/float(2*effeeHLT*(1-effeeHLT)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeHLT*(1-effeeHLT)\n",
    "    eA = MultError(2*(1-effeeHLT),effeeHLT, effHLTeeEr, effHLTeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzee, RatioError(N1, A*B, eN1, eDen, ifRel)\n",
    "Nzee=[]\n",
    "NzeeEr=[]\n",
    "\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Npr = NZandError(N1[i], eN1[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1[i], eN1[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzee.append(Npr)\n",
    "    NzeeEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzee)\n",
    "print(\"NzEr\",NzeeEr)\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzee , yerr= NzeeEr ,fmt='o', color='red',  capsize=5,label=\"N_EE\"  )\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effeeHLT , yerr= effHLTeeEr ,fmt='o', color='red',  capsize=5,label=\"$\\epsilon_{HLT}$ EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(01)\n",
    "plt.grid()\n",
    "plt.legend(loc='lower left')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effeeID , yerr= effIDeeEr ,fmt='o', color='blue',  capsize=5,label=\"$\\epsilon_{ID}$ EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"$\\epsilon_{ID}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciesc = [effeeHLT[0]/c_h , effeeHLT[1]/c_h , effeeHLT[2]/c_h]\n",
    "efficiencyc_errors = [effHLTeeEr[0]/c_h , effHLTeeEr[1]/c_h ,effHLTeeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effeeHLT , yerr= effHLTeeEr, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciescid = [effeeID[0]/c_h , effeeID[1]/c_h , effeeID[2]/c_h]\n",
    "efficiencyc_errorsid = [effIDeeEr[0]/c_h , effIDeeEr[1]/c_h ,effIDeeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effeeID , yerr=effIDeeEr , fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciescid ,yerr=efficiencyc_errorsid, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "38d93a57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3837835838692851\n",
      "0.0008229743421554861\n",
      "effIDEr [0.014616046683239825, 0.015138516614656766, 0.015215721786440147]\n",
      "effHLTEr [0.016066311457174815, 0.015947194729004615, 0.01758041421469559]\n",
      "effID [0.887635627302968, 0.8909856944889246, 0.9012297269046933]\n",
      "effHLT [0.8572305382357737, 0.8515888369206341, 0.8549460767756712]\n",
      "Nz [18468.200419729004, 15714.007635282638, 13151.700345001207]\n",
      "NzEr [1326.5503820988856, 1115.0402289151468, 998.3425581669578]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### for BE region ###\n",
    "\n",
    "#acceptance BE\n",
    "N_pass = 300932\n",
    "N_tot = 784119\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "print(Acc)\n",
    "print(AccEr)\n",
    "\n",
    "def EffErrorhlt(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "def EffErrorid(N1_prime, N2_prime, eN1_prime, eN2_prime, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2_prime,N1_prime,2*eN2_prime,eN1_prime, False)\n",
    "    eNum = 2*eN2_prime\n",
    "    return  RatioError(2*N2_prime, 2*N2_prime+N1_prime, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "N2_files = [\"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "N1_prime_files = [\"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "N2_prime_files = [\"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "delta_N2_files = [\"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDbeEr = []\n",
    "effHLTbeEr = []\n",
    "effbeID = []\n",
    "effbeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTbeEr.append(Ereehlt)\n",
    "    effIDbeEr.append(Ereeid)\n",
    "    effbeHLT.append(effhlt)\n",
    "    effbeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDbeEr)\n",
    "print (\"effHLTEr\",effHLTbeEr)\n",
    "print (\"effID\",effbeID)\n",
    "print (\"effHLT\",effbeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1, eN1, effbeHLT, effbeID, effHLTbeEr, effIDbeEr, ifRel):\n",
    "    Nzbe = float(N1)/float(2*effbeHLT*(1-effbeHLT)*(effbeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effbeHLT*(1-effbeHLT)\n",
    "    eA = MultError(2*(1-effbeHLT),effbeHLT, effHLTbeEr, effHLTbeEr, False)\n",
    "    B = effbeID**2\n",
    "    eB = 2*effbeID*effIDbeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbe, RatioError(N1, A*B, eN1, eDen, ifRel)\n",
    "Nzbe=[]\n",
    "NzbeEr=[]\n",
    "\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Npr = NZandError(N1[i], eN1[i], effbeHLT[i], effbeID[i], effHLTbeEr[i], effIDbeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1[i], eN1[i], effbeHLT[i], effbeID[i], effHLTbeEr[i], effIDbeEr[i], False)[1]\n",
    "    Nzbe.append(Npr)\n",
    "    NzbeEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbe)\n",
    "print(\"NzEr\",NzbeEr)\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbe , yerr= NzbeEr ,fmt='o', color='red',  capsize=5,label=\"N_BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbeHLT , yerr= effHLTbeEr ,fmt='o', color='red',  capsize=5,label=\"$\\epsilon_{HLT}$ BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend(loc='lower left')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbeID , yerr= effIDbeEr ,fmt='o', color='blue',  capsize=5,label=\"$\\epsilon_{ID}$ BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciesc = [effbeHLT[0]/c_h , effbeHLT[1]/c_h , effbeHLT[2]/c_h]\n",
    "efficiencyc_errors = [effHLTbeEr[0]/c_h , effHLTbeEr[1]/c_h ,effHLTbeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbeHLT , yerr= effHLTbeEr, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciescid = [effbeID[0]/c_h , effbeID[1]/c_h , effbeID[2]/c_h]\n",
    "efficiencyc_errorsid = [effIDbeEr[0]/c_h , effIDbeEr[1]/c_h ,effIDbeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbeID , yerr=effIDbeEr , fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciescid ,yerr=efficiencyc_errorsid, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5908fa0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.25156640764985927\n",
      "0.0006336687418369341\n",
      "effIDEr [0.015536852781274332, 0.01573768372643915, 0.016269482748383492]\n",
      "effHLTEr [0.017325927978689693, 0.017669644143513574, 0.019520746615759074]\n",
      "effID [0.8924555068334831, 0.8983428672807079, 0.8971770525232768]\n",
      "effHLT [0.8680686505147411, 0.8602885019413106, 0.8585289540083414]\n",
      "Nz [14669.785237224676, 12394.891164741592, 10278.428143930278]\n",
      "NzEr [1190.1812515925792, 970.8673191986934, 876.4677493208926]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### for BB region ###\n",
    "#acceptance BB\n",
    "\n",
    "N_pass = 197258\n",
    "N_tot = 784119\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "print(Acc)\n",
    "print(AccEr)\n",
    "\n",
    "def EffErrorhlt(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "def EffErrorid(N1_prime, N2_prime, eN1_prime, eN2_prime, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2_prime,N1_prime,2*eN2_prime,eN1_prime, False)\n",
    "    eNum = 2*eN2_prime\n",
    "    return  RatioError(2*N2_prime, 2*N2_prime+N1_prime, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"]\n",
    "N2_files = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDbbEr = []\n",
    "effHLTbbEr = []\n",
    "effbbID = []\n",
    "effbbHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTbbEr.append(Ereehlt)\n",
    "    effIDbbEr.append(Ereeid)\n",
    "    effbbHLT.append(effhlt)\n",
    "    effbbID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDbbEr)\n",
    "print (\"effHLTEr\",effHLTbbEr)\n",
    "print (\"effID\",effbbID)\n",
    "print (\"effHLT\",effbbHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1, eN1, effbbHLT, effbbID, effHLTbbEr, effIDbbEr, ifRel):\n",
    "    Nzbb = float(N1)/float(2*effbbHLT*(1-effbbHLT)*(effbbID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effbbHLT*(1-effbbHLT)\n",
    "    eA = MultError(2*(1-effbbHLT),effbbHLT, effHLTbbEr, effHLTbbEr, False)\n",
    "    B = effbbID**2\n",
    "    eB = 2*effbbID*effIDbbEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbb, RatioError(N1, A*B, eN1, eDen, ifRel)\n",
    "Nzbb=[]\n",
    "NzbbEr=[]\n",
    "\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Npr = NZandError(N1[i], eN1[i], effbbHLT[i], effbbID[i], effHLTbbEr[i], effIDbbEr[i], False)[0]\n",
    "    NzErp = NZandError(N1[i], eN1[i], effbbHLT[i], effbbID[i], effHLTbbEr[i], effIDbbEr[i], False)[1]\n",
    "    Nzbb.append(Npr)\n",
    "    NzbbEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbb)\n",
    "print(\"NzEr\",NzbbEr)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbb , yerr= NzbbEr ,fmt='o', color='red',  capsize=5,label=\"N_BB\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbbHLT , yerr= effHLTbbEr ,fmt='o', color='red',  capsize=5,label=\"$\\epsilon_{HLT} BB$\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend(loc='lower left')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbbID , yerr= effIDbbEr ,fmt='o', color='blue',  capsize=5,label=\"$\\epsilon_{HLT} BB$\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciesc = [effbbHLT[0]/c_h , effbbHLT[1]/c_h , effbbHLT[2]/c_h]\n",
    "efficiencyc_errors = [effHLTbbEr[0]/c_h , effHLTbbEr[1]/c_h ,effHLTbbEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbbHLT , yerr= effHLTbbEr, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciescid = [effbbID[0]/c_h , effbbID[1]/c_h , effbbID[2]/c_h]\n",
    "efficiencyc_errorsid = [effIDbbEr[0]/c_h , effIDbbEr[1]/c_h ,effIDbbEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbbID , yerr=effIDbbEr , fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciescid ,yerr=efficiencyc_errorsid, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e327f21d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def SumError(a,b,c,eA,eB,eC, ifRel):\n",
    "    '''Assumin C = a+b+c. Takes a,b, together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C'''\n",
    "    # Er_C^2 = Er_A^2 + Er_B^2 + Er_c^2 \n",
    "    ErC = math.sqrt(eA**2+eB**2+eC**2)\n",
    "    if not ifRel:\n",
    "        return ErC\n",
    "    return float(ErC)/float(a+b+c)\n",
    "\n",
    "\n",
    "#acceptance tot\n",
    "N_pass = 784119\n",
    "N_tot = 2688599\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "\n",
    "\n",
    "def LumiAndError(Nzee, NzeeEr, Nzbe, NzbeEr, Nzbb, NzbbEr, Acc, AccEr, \n",
    "                 effeeHLT, effbeHLT, effbbHLT, effeeID, effbeID, effbbID, \n",
    "                 effHLTeeEr, effHLTbeEr, effHLTbbEr, effIDeeEr, effIDbeEr, effIDbbEr, \n",
    "                 ifRel):\n",
    "    lumi = []\n",
    "    Erlumi = []\n",
    "    sigmaBr = 2.073\n",
    "    sigmaBrE = 0.024\n",
    "    A_ee = 0.36\n",
    "    dA_ee = 0.000796\n",
    "    A_eb = 0.38\n",
    "    dA_eb = 0.000822\n",
    "    A_bb = 0.25\n",
    "    dA_bb = 0.000633\n",
    "\n",
    "    # Loop over i values\n",
    "    for i in range(3):  # i = 0, 1, 2\n",
    "        # Calculate Lumi\n",
    "        Lumi = float(Nzee[i] + Nzbe[i] + Nzbb[i]) / float(sigmaBr * Acc * (((effeeHLT[i] * effeeID[i]) * A_ee ) + ((effbeHLT[i] * effbeID[i]) * A_eb) + ((effbbHLT[i] * effbbID[i]) * A_bb)))\n",
    "            \n",
    "        \n",
    "        lumi.append(Lumi)\n",
    "\n",
    "        # Calculate errors\n",
    "        A = sigmaBr * Acc\n",
    "        eA = MultError(sigmaBr, Acc, sigmaBrE, AccEr, False)\n",
    "\n",
    "        B11 = effeeHLT[i] * effeeID[i]\n",
    "        eB11 = MultError(effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)\n",
    "        B12 = A_ee\n",
    "        eB12 = dA_ee\n",
    "        B1 = B11 * B12\n",
    "        eB1 = MultError(B11, B12, eB11, eB12, False)\n",
    "\n",
    "        C11 = effbeHLT[i] * effbeID[i]\n",
    "        eC11 = MultError(effbeHLT[i], effbeID[i], effHLTbeEr[i], effIDbeEr[i], False)\n",
    "        C12 = A_eb\n",
    "        eC12 = dA_eb\n",
    "        C1 = C11 * C12\n",
    "        eC1 = MultError(C11, C12, eC11, eC12, False)\n",
    "\n",
    "        D11 = effbbHLT[i] * effbbID[i]\n",
    "        eD11 = MultError(effbbHLT[i], effbbID[i], effHLTbbEr[i], effIDbbEr[i], False)\n",
    "        D12 = A_bb\n",
    "        eD12 = dA_bb\n",
    "        D1 = D11 * D12\n",
    "        eD1 = MultError(D11, D12, eD11, eD12, False)\n",
    "\n",
    "        S = B1 + C1 + D1\n",
    "        eS = SumError(B1, C1, D1, eB1, eC1, eD1, False)\n",
    "        den = S * A\n",
    "        eDen = MultError(S, A, eS, eA, False)\n",
    "        Er = RatioError(Nzee[i] + Nzbe[i] + Nzbb[i], den, NzeeEr[i] + NzbeEr[i] + NzbbEr[i], eDen, ifRel)\n",
    "        Erlumi.append(Er)\n",
    "    \n",
    "    return lumi, Erlumi\n",
    "\n",
    "\n",
    "lumi_final = LumiAndError(Nzee, NzeeEr, Nzbe, NzbeEr, Nzbb, NzbbEr, Acc, AccEr, \n",
    "                 effeeHLT, effbeHLT, effbbHLT, effeeID, effbeID, effbbID, \n",
    "                 effHLTeeEr, effHLTbeEr, effHLTbbEr, effIDeeEr, effIDbeEr, effIDbbEr, \n",
    "                 False)[0]\n",
    "err_lumi =  LumiAndError(Nzee, NzeeEr, Nzbe, NzbeEr, Nzbb, NzbbEr, Acc, AccEr, \n",
    "                 effeeHLT, effbeHLT, effbbHLT, effeeID, effbeID, effbbID, \n",
    "                 effHLTeeEr, effHLTbeEr, effHLTbbEr, effIDeeEr, effIDbeEr, effIDbbEr, \n",
    "                 False)[1]\n",
    "bril =  [114618.486, 97972.294, 81904.476]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1355fb1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, lumi_final , yerr=err_lumi  ,fmt='o', color='red',  capsize=5,label=\"luminosity\")\n",
    "plt.errorbar(lumisec_midpoints,  bril ,fmt='o', color='black',  capsize=5,label=\"luminosty_bril\")\n",
    "\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"L $(nb^{-1})$\")\n",
    "plt.ylim(15000,150000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "81eaecfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "effIDEr [0.017929791367310134, 0.017450007661543015, 0.018889313331542333]\n",
      "effHLTEr [0.017717988285035336, 0.018105022791970283, 0.01896598932356834]\n",
      "effID [0.8741508914476283, 0.8810528806287043, 0.8859915955418469]\n",
      "effHLT [0.8604563192021063, 0.8598780114940181, 0.857738048910729]\n",
      "Nz [24133.452183174515, 20370.695090942525, 16503.940915167823]\n",
      "NzEr [2264.778494407588, 1917.7572105395823, 1849.5442913078264]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def SumError(a,b,eA,eB, ifRel):\n",
    "    '''Assumin C = a+b. Takes a,b, together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C'''\n",
    "    # Er_C^2 = Er_A^2 + Er_B^2\n",
    "    ErC = math.sqrt(eA**2+eB**2)\n",
    "    if not ifRel:\n",
    "        return ErC\n",
    "    return float(ErC)/float(a+b)\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1_prime, eN1_prime, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzeeid = float(N1_prime)/float(2*effeeID*(1-effeeID)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeID*(1-effeeID)\n",
    "    eA = MultError(2*(1-effeeID),effeeID, effIDeeEr, effIDeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzeeid, RatioError(N1_prime, A*B, eN1_prime, eDen, ifRel)\n",
    "Nzeeid=[]\n",
    "NzeeidEr=[]\n",
    "\n",
    "for i in range(len(N1_prime)):\n",
    " \n",
    "    Npr = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzeeid.append(Npr)\n",
    "    NzeeidEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzeeid)\n",
    "print(\"NzEr\",NzeeidEr)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzeeid , yerr= NzeeidEr ,fmt='o', color='blue',  capsize=5,label=\"N_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bf6a11fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "effIDEr [0.014616046683239825, 0.015138516614656766, 0.015215721786440147]\n",
      "effHLTEr [0.016066311457174815, 0.015947194729004615, 0.01758041421469559]\n",
      "effID [0.887635627302968, 0.8909856944889246, 0.9012297269046933]\n",
      "effHLT [0.8572305382357737, 0.8515888369206341, 0.8549460767756712]\n",
      "Nz [23020.99499332506, 19309.3740154181, 15975.007158740067]\n",
      "NzEr [1850.8013881206664, 1639.251508879906, 1469.7326194200468]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "N2_files = [\"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "N1_prime_files = [\"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "N2_prime_files = [\"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "delta_N2_files = [\"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1_prime, eN1_prime, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzbeid = float(N1_prime)/float(2*effeeID*(1-effeeID)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeID*(1-effeeID)\n",
    "    eA = MultError(2*(1-effeeID),effeeID, effIDeeEr, effIDeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbeid, RatioError(N1_prime, A*B, eN1_prime, eDen, ifRel)\n",
    "Nzbeid=[]\n",
    "NzbeidEr=[]\n",
    "\n",
    "for i in range(len(N1_prime)):\n",
    " \n",
    "    Npr = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzbeid.append(Npr)\n",
    "    NzbeidEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbeid)\n",
    "print(\"NzEr\",NzbeidEr)\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbeid , yerr= NzbeidEr ,fmt='o', color='blue',  capsize=5,label=\"N_BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "18bd2fa8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "effIDEr [0.015536852781274332, 0.01573768372643915, 0.016269482748383492]\n",
      "effHLTEr [0.017325927978689693, 0.017669644143513574, 0.019520746615759074]\n",
      "effID [0.8924555068334831, 0.8983428672807079, 0.8971770525232768]\n",
      "effHLT [0.8680686505147411, 0.8602885019413106, 0.8585289540083414]\n",
      "Nz [17726.384762308884, 14774.556528474553, 12373.266266613773]\n",
      "NzEr [1632.0701500434689, 1383.9829532372873, 1215.433109345941]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"]\n",
    "N2_files = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1_prime, eN1_prime, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzbbid = float(N1_prime)/float(2*effeeID*(1-effeeID)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeID*(1-effeeID)\n",
    "    eA = MultError(2*(1-effeeID),effeeID, effIDeeEr, effIDeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbbid, RatioError(N1_prime, A*B, eN1_prime, eDen, ifRel)\n",
    "Nzbbid=[]\n",
    "NzbbidEr=[]\n",
    "\n",
    "for i in range(len(N1_prime)):\n",
    " \n",
    "    Npr = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzbbid.append(Npr)\n",
    "    NzbbidEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbbid)\n",
    "print(\"NzEr\",NzbbidEr)\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbbid , yerr= NzbbidEr ,fmt='o', color='blue',  capsize=5,label=\"N_BB\")\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6d9b74b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "\n",
    "bril =  [114618.486, 97972.294, 81904.476]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "\n",
    "plt.errorbar(lumisec_midpoints,  bril ,fmt='o', color='black',  capsize=5,label=\"luminosty_bril\")\n",
    "\n",
    "\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"L $(nb^{-1})$\")\n",
    "plt.ylim(15000,150000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "850b1e19",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
