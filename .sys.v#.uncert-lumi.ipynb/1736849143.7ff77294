{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a15e9ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# N_z = L Sigma*BR * eff * Acc\n",
    "# We have N_z, eff, and Acc for EE, EB, and BB\n",
    "# Sigma*BR does not depend on the region\n",
    "# We want to evaluate error per region\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "07bf4ac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def RatioError(num, den, eNum, eDen, ifRel):\n",
    "    '''Assumin C = Num/Den. Takes numerator and denominator together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C.'''\n",
    "    # relEr_C^2 = relEr_A^2 + relEr_B^2\n",
    "    relErDen = float(eDen) / float(den)\n",
    "    relErNum = float(eNum) / float(num)\n",
    "    relErC =  math.sqrt(relErDen**2 + relErNum**2)\n",
    "    if ifRel:\n",
    "        return relErC\n",
    "    return relErC*(float(num)/float(den))\n",
    "\n",
    "def MultError(num, den, eNum, eDen, ifRel):\n",
    "    '''Assumin C = Num*Den. Takes numerator and denominator together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C.'''\n",
    "    # relEr_C^2 = relEr_A^2 + relEr_B^2\n",
    "    relErDen = float(eDen) / float(den)\n",
    "    relErNum = float(eNum) / float(num)\n",
    "    relErC =  math.sqrt(relErDen**2 + relErNum**2)\n",
    "    if ifRel:\n",
    "        return relErC\n",
    "    return relErC*(float(num)*float(den))\n",
    "\n",
    "def SumError(a,b,eA,eB, ifRel):\n",
    "    '''Assumin C = a+b. Takes a,b, together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C'''\n",
    "    # Er_C^2 = Er_A^2 + Er_B^2\n",
    "    ErC = math.sqrt(eA**2+eB**2)\n",
    "    if not ifRel:\n",
    "        return ErC\n",
    "    return float(ErC)/float(a+b)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "bc8bc8dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def AccError(N_pass, N_tot, ifRel):\n",
    "    Acc = float(N_pass)/float(N_tot)\n",
    "    return Acc, RatioError(N_pass, N_tot, math.sqrt(N_pass), math.sqrt(N_tot), ifRel)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "367cc4d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def EffError(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2dfeb358",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we need to evaluate N_z and its error properly\n",
    "# N_z = N1 / (2*eff_HLT(1-eff_HLT)*eff_ID^2)\n",
    "# Here, N1 is the number read from the HLT fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "b1787a44",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3646500084808556\n",
      "0.0007966320344501433\n",
      "effIDEr [0.017929791367310134, 0.017450007661543015, 0.018889313331542333]\n",
      "effHLTEr [0.017717988285035336, 0.018105022791970283, 0.01896598932356834]\n",
      "effID [0.8741508914476283, 0.8810528806287043, 0.8859915955418469]\n",
      "effHLT [0.8604563192021063, 0.8598780114940181, 0.857738048910729]\n",
      "Nz [18368.633803535493, 15916.677367373906, 13202.333661439816]\n",
      "NzEr [1535.4018940561186, 1339.2669121254762, 1144.6892616669613]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgEAAAEoCAYAAADBrSICAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAbCUlEQVR4nO3df5Bd5X3f8ffHiOpHDIQfRqNI2FLHahMgNQSVKqVO5ODWtMkEmkKiDAlKSkdTBjf+QSaF0NZKW83YEydymKmZUawE2VGNFWzXhNhJMGRxnPLDJHGMAROUgGGLAgZjLJmIIPztH/dZc7W6u9JKunulPe/XzJ17zvec5+xzH2ztZ59z7jmpKiRJUve8ZtQdkCRJo2EIkCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjpqqCEgyeNJHkjyxST3t9opSW5P8mh7P7lv/+uS7EjySJK39dXPa8fZkeSGJGn1+Uk+1ur3Jlk+zM8jSdJcMhszAW+pqnOqalVbvxa4o6pWAne0dZKcCawFzgIuAj6Y5LjW5kZgPbCyvS5q9SuB56vqjcAm4H2z8HkkSZoTRnE64GJga1veClzSV7+5ql6qqseAHcD5SZYAJ1bV3dW7s9GHJ7WZONYtwIUTswSSJGl6ww4BBfxRkj9Lsr7VFlfVToD2fnqrLwWe7Gs73mpL2/Lk+j5tqmov8AJw6hA+hyRJc868IR//gqp6KsnpwO1JvjLNvoP+gq9p6tO12ffAvQCyHmDhwoXnnXHGGQM78O1vf5vXvMZrJUfBsR8dx350HPvR6Nq4/9Vf/dWzVfW6QduGGgKq6qn2/kySTwLnA08nWVJVO9tU/zNt93Gg/7fzMuCpVl82oN7fZjzJPOAk4OsD+rEZ2AywatWquv/++wf2d2xsjDVr1hzCJ9XhcuxHx7EfHcd+NLo27km+OtW2oUWhJN+V5ISJZeBfAV8GbgXWtd3WAZ9qy7cCa9sV/yvoXQB4XztlsCvJ6na+/4pJbSaOdSlwZ/lEJEmSDsowZwIWA59s1+nNA/53Vf1Bki8A25NcCTwBXAZQVQ8m2Q48BOwFrq6qV9qxrgJuAhYCn2kvgC3AR5LsoDcDsHaIn0eSpDllaCGgqv4GeNOA+nPAhVO02QhsHFC/Hzh7QH0PLURIkqSZGfaFgZIkjcTLL7/M+Pg4e/bs2ad+0kkn8fDDD4+oV8OzYMECli1bxvHHH3/QbQwBkqQ5aXx8nBNOOIHly5fTfwuZXbt2ccIJJ4ywZ0deVfHcc88xPj7OihUrDrpdd74jIUnqlD179nDqqafShXvIJeHUU0/db9bjQAwBkqQ564ABYMMGSA782rBhNrp7WA4l7Hg6QJLUXRs27PsLfuL+AWNjs9+XEXAmQJIkgG3b4J574K67YPny3vphSsI111zznfX3v//9bJhmVmHDhg0sXbqUc8455zuvb3zjG4yNjXHSSSftU//sZz972P1zJkCSpG3bYP16eOml3vpXv9pbB7j88kM+7Pz58/nEJz7Bddddx2mnnXZQbd71rnfxi7/4i/vV3/zmN3Pbbbcdcl8GcSZAkqTrr4cXX9y39uKLvfphmDdvHuvXr2fTpk2HdZxhMQRIkvTEEzOrz8DVV1/Ntm3beOGFFw5q/02bNn1nyv8tb3nLd+p/8id/ss/pgL/+678+7L55OkCSpNe/vncKYFD9MJ144olcccUV3HDDDSxcuPCA+3s6QJKk2bRxIyxatG9t0aJe/Qh45zvfyZYtW/jWt751RI53pBgCJEm6/HLYvBnmz++tv+ENvfXDuCiw3ymnnMJP/uRPsmXLliNyvCPFECBJEvR+4a9eDT/8w/D440csAEy45pprePbZZw+4X/81Aeeccw6PP/44sP81Abfccsth98lrAiRJ3bVhA/zKr+xfn3z3vfe855DuGrh79+7vLC9evJgXJ38DYb/ubBh4H4Hly5cf9IWFM2EIkCR11+Q7BnaMIUCSpFm2ceNGfvd3f3ef2mWXXcb1h3lfgpkyBEiSNMuuv/76Wf+FP4gXBkqS5qyqGnUXZs2hfFZDgCRpTlqwYAHPPfdcJ4JAVfHcc8+xYMGCGbXzdIAkaU5atmwZ4+PjfO1rX9unvmfPnhn/sjwWLFiwgGXLls2ojSFAkjQnHX/88axYsWK/+tjYGOeee+4IenT08XSAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4aeghIclySv0hyW1s/JcntSR5t7yf37Xtdkh1JHknytr76eUkeaNtuSJJWn5/kY61+b5Llw/48kiTNFbMxE/AO4OG+9WuBO6pqJXBHWyfJmcBa4CzgIuCDSY5rbW4E1gMr2+uiVr8SeL6q3ghsAt433I8iSdLcMdQQkGQZ8KPAh/rKFwNb2/JW4JK++s1V9VJVPQbsAM5PsgQ4sarurqoCPjypzcSxbgEunJglkCRJ05s35ON/APgl4IS+2uKq2glQVTuTnN7qS4F7+vYbb7WX2/Lk+kSbJ9ux9iZ5ATgVeLa/E0nW05tJYPHixYyNjQ3s7O7du6fcpuFy7EfHsR8dx340HPdXDS0EJPkx4Jmq+rMkaw6myYBaTVOfrs2+harNwGaAVatW1Zo1g7szNjbGVNs0XI796Dj2o+PYj4bj/qphzgRcAPx4kn8DLABOTPI7wNNJlrRZgCXAM23/ceCMvvbLgKdafdmAen+b8STzgJOArw/rA0mSNJcM7ZqAqrquqpZV1XJ6F/zdWVU/A9wKrGu7rQM+1ZZvBda2K/5X0LsA8L526mBXktXtfP8Vk9pMHOvS9jP2mwmQJEn7G/Y1AYO8F9ie5ErgCeAygKp6MMl24CFgL3B1Vb3S2lwF3AQsBD7TXgBbgI8k2UFvBmDtbH0ISZKOdbMSAqpqDBhry88BF06x30Zg44D6/cDZA+p7aCFCkiTNjHcMlCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHWUIkCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHWUIkCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHWUIkCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHWUIkCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHTW0EJBkQZL7kvxlkgeT/Eqrn5Lk9iSPtveT+9pcl2RHkkeSvK2vfl6SB9q2G5Kk1ecn+Vir35tk+bA+jyRJc80wZwJeAn6kqt4EnANclGQ1cC1wR1WtBO5o6yQ5E1gLnAVcBHwwyXHtWDcC64GV7XVRq18JPF9VbwQ2Ae8b4ueRJGlOGVoIqJ7dbfX49irgYmBrq28FLmnLFwM3V9VLVfUYsAM4P8kS4MSquruqCvjwpDYTx7oFuHBilkCSJE1vqNcEJDkuyReBZ4Dbq+peYHFV7QRo76e33ZcCT/Y1H2+1pW15cn2fNlW1F3gBOHUoH0aSpDlm3jAPXlWvAOck+W7gk0nOnmb3QX/B1zT16drse+BkPb3TCSxevJixsbGBHdi9e/eU2zRcjv3oOPaj49iPhuP+qqGGgAlV9Y0kY/TO5T+dZElV7WxT/c+03caBM/qaLQOeavVlA+r9bcaTzANOAr4+4OdvBjYDrFq1qtasWTOwn2NjY0y1TcPl2I+OYz86jv1oOO6vGua3A17XZgBIshB4K/AV4FZgXdttHfCptnwrsLZd8b+C3gWA97VTBruSrG7n+6+Y1GbiWJcCd7brBiRJ0gEMcyZgCbC1XeH/GmB7Vd2W5G5ge5IrgSeAywCq6sEk24GHgL3A1e10AsBVwE3AQuAz7QWwBfhIkh30ZgDWDvHzSJI0pwwtBFTVl4BzB9SfAy6cos1GYOOA+v3AftcTVNUeWoiQJEkz4x0DJUnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdNW+6jUn+2zSbq6r+xxHujyRJmiXThgDgWwNqi4D/AJwKGAIkSTpGTRsCqurXJpaTnAC8A/j3wM3Ar03VTpIkHf0ONBNAklOAdwOXA1uBH6iq54fdMUmSNFwHuibgV4GfADYD319Vu2elV5IkaegO9O2Aa4DvAf4L8FSSb7bXriTfHH73JEnSsBzomgC/QihJ0hzlL3lJkjrKECBJUkcZAiRJ6ihDgCRJHWUIkCSpowwBkiR1lCFAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHWUIkCSpowwBkiR1lCFAkqSOGloISHJGkj9O8nCSB5O8o9VPSXJ7kkfb+8l9ba5LsiPJI0ne1lc/L8kDbdsNSdLq85N8rNXvTbJ8WJ9HkqS5ZpgzAXuBa6rq+4DVwNVJzgSuBe6oqpXAHW2dtm0tcBZwEfDBJMe1Y90IrAdWttdFrX4l8HxVvRHYBLxviJ9HkqQ5ZWghoKp2VtWft+VdwMPAUuBiYGvbbStwSVu+GLi5ql6qqseAHcD5SZYAJ1bV3VVVwIcntZk41i3AhROzBJIkaXqzck1Am6Y/F7gXWFxVO6EXFIDT225LgSf7mo232tK2PLm+T5uq2gu8AJw6lA8hSdIcM2/YPyDJa4GPA++sqm9O84f6oA01TX26NpP7sJ7e6QQWL17M2NjYwA7s3r17ym0Ay2+6ieVbt065fcLj69bx+M/93AH306sONPYaHsd+dBz70XDcXzXUEJDkeHoBYFtVfaKVn06ypKp2tqn+Z1p9HDijr/ky4KlWXzag3t9mPMk84CTg65P7UVWbgc0Aq1atqjVr1gzs79jYGFNtA2DNGrjppn3Xew332W15e+ngHXDsNTSO/eg49qPhuL9qmN8OCLAFeLiqfr1v063Aura8DvhUX31tu+J/Bb0LAO9rpwx2JVndjnnFpDYTx7oUuLNdNyBJkg5gmDMBFwA/CzyQ5Iut9svAe4HtSa4EngAuA6iqB5NsBx6i982Cq6vqldbuKuAmYCHwmfaCXsj4SJId9GYA1g7x80iSNKcMLQRU1ecZfM4e4MIp2mwENg6o3w+cPaC+hxYiJEnSzHjHwEO1bRvccw/cdRcsX95blyTpGGIIOBTbtsH69fDSS731r361t24QkCQdQwwBh+L66+HFF/etvfhiry5J0jHCEHAonnhiZnVJko5ChoBD8frXz6wuSdJRyBBwKDZuhEWL9q0tWtSrS5J0jDAEHIrLL4fNm2H+/N76G97QW7/88tH2S5KkGRj6swPmrMsvh9/8zd6y96CWJB2DnAmQJKmjDAGShmvDBkgO/NqwYdQ9lTrH0wGShmvDhn1/wU/x9E1Js8+ZgJmY/BfNXXf1Xv5FI0k6BhkCZmLDBqg68MsQIA3mMzeko4ohQNLs8Jkb0lHHECBpdvjMDemoYwiQNDt85oZ01DEESJodPnNDOuoYAiTNDp+5IR11DAGSZofP3JCOOt4sSNLs8Zkb0lHFmQBJkjrKECBJUkcZAiQNl7fblo5ahgBJw+XttqWpjfgpm14YKEnSqIz4KZvOBEiS1FGGAEmSjgYjeMqmIUCSpFEb0VM2DQGSJI3aiJ6yaQiQJGnURvSUTUOAJEmjNqKnbBoCJEkatRE9ZdMQIEnSqI3oKZveLEiSpKPBCJ6y6UyAJEmjMuJnazgTIEnSqEy+bfAscyZAkqSOMgRIktRRhgBJkjrKECBJUkcZAiRJ6qihhYAkv5XkmSRf7qudkuT2JI+295P7tl2XZEeSR5K8ra9+XpIH2rYbkqTV5yf5WKvfm2T5sD6LJElz0TBnAm4CLppUuxa4o6pWAne0dZKcCawFzmptPpjkuNbmRmA9sLK9Jo55JfB8Vb0R2AS8b2ifRJKkOWhoIaCqPgd8fVL5YmBrW94KXNJXv7mqXqqqx4AdwPlJlgAnVtXdVVXAhye1mTjWLcCFE7MEkiTpwGb7ZkGLq2onQFXtTHJ6qy8F7unbb7zVXm7Lk+sTbZ5sx9qb5AXgVODZyT80yXp6swksXryYsSlux7h79+4pt2m4HPvRcexHx7EfDcf9VUfLHQMH/QVf09Sna7N/sWozsBlg1apVtWbNmoGdGBsbY6ptGi7HfnQc+9Fx7EfDcX/VbH874Ok2xU97f6bVx4Ez+vZbBjzV6ssG1Pdpk2QecBL7n36QJElTmO0QcCuwri2vAz7VV1/brvhfQe8CwPvaqYNdSVa38/1XTGozcaxLgTvbdQOSJOkgDO10QJKPAmuA05KMA+8B3gtsT3Il8ARwGUBVPZhkO/AQsBe4uqpeaYe6it43DRYCn2kvgC3AR5LsoDcDsHZYn0WSpLloaCGgqn56ik0XTrH/RmDjgPr9wNkD6ntoIUKSJM2cdwyUJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEiS1FGGAEmSOsoQIElSRxkCJEnqKEOAJEkddcyHgCQXJXkkyY4k1466P5IkHSuO6RCQ5DjgfwH/GjgT+OkkZ462V5IkHRuO6RAAnA/sqKq/qaq/B24GLh5xnyRJOiYc6yFgKfBk3/p4q0mSpAOYN+oOHKYMqNV+OyXrgfVtdXeSR6Y43mnAs0eob5oZx350HPvRcexHo2vj/oapNhzrIWAcOKNvfRnw1OSdqmozsPlAB0tyf1WtOnLd08Fy7EfHsR8dx340HPdXHeunA74ArEyyIsk/ANYCt464T5IkHROO6ZmAqtqb5O3AHwLHAb9VVQ+OuFuSJB0TjukQAFBVnwY+fYQOd8BTBhoax350HPvRcexHw3FvUrXfdXSSJKkDjvVrAiRJ0iHqTAhIckaSP07ycJIHk7yj1U9JcnuSR9v7yX1trmu3I34kydtG1/u5IclxSf4iyW1t3bGfBUm+O8ktSb7S/vf/g4797EjyrvbvzZeTfDTJAsd+OJL8VpJnkny5rzbjsU5yXpIH2rYbkgz6Kvqc0ZkQAOwFrqmq7wNWA1e3WwxfC9xRVSuBO9o6bdta4CzgIuCD7TbFOnTvAB7uW3fsZ8dvAH9QVd8LvInefwPHfsiSLAV+AVhVVWfTu3h5LY79sNxEb9z6HcpY30jvvjIr22vyMeeUzoSAqtpZVX/elnfR+4dwKb3bDG9tu20FLmnLFwM3V9VLVfUYsIPebYp1CJIsA34U+FBf2bEfsiQnAj8EbAGoqr+vqm/g2M+WecDCJPOARfTuY+LYD0FVfQ74+qTyjMY6yRLgxKq6u3oXzH24r82c1JkQ0C/JcuBc4F5gcVXthF5QAE5vu3lL4iPrA8AvAd/uqzn2w/cPga8Bv91OxXwoyXfh2A9dVf0/4P3AE8BO4IWq+iMc+9k007Fe2pYn1+eszoWAJK8FPg68s6q+Od2uA2p+leIQJPkx4Jmq+rODbTKg5tgfmnnADwA3VtW5wLdoU6JTcOyPkHb++WJgBfA9wHcl+ZnpmgyoOfbDMdVYd+6/QadCQJLj6QWAbVX1iVZ+uk0B0d6fafWDuiWxDsoFwI8neZzekx5/JMnv4NjPhnFgvKrubeu30AsFjv3wvRV4rKq+VlUvA58A/jmO/Wya6ViPt+XJ9TmrMyGgXeG5BXi4qn69b9OtwLq2vA74VF99bZL5SVbQu0Dkvtnq71xSVddV1bKqWk7vYpw7q+pncOyHrqr+FngyyT9upQuBh3DsZ8MTwOoki9q/PxfSuxbJsZ89MxrrdspgV5LV7b/ZFX1t5qRj/o6BM3AB8LPAA0m+2Gq/DLwX2J7kSnr/p70MoKoeTLKd3j+Ye4Grq+qVWe/13ObYz47/BGxL7/kafwP8PL0/ABz7Iaqqe5PcAvw5vbH8C3p3qnstjv0Rl+SjwBrgtCTjwHs4tH9jrqL3TYOFwGfaa87yjoGSJHVUZ04HSJKkfRkCJEnqKEOAJEkdZQiQJKmjDAGSJHWUIUCSpI4yBEhzUJLdQzjmf0/y1iN4vF+etP5/j+CxP5Dkh6bZ/vYkP3+kfp50rPI+AdIclGR3Vb121P2YzrD6mOQU4NNVtXqafRYBf9qepyB1ljMBUkckGUuyqi2f1p7lQJKfS/J/kvxeksfaX8nvbk8dvKf9UiXJTUkubcvvTfJQki8leX+rvS7Jx5N8ob0uaPXXJvntJA+0/f9dkvfSe8TuF5Nsa/vtbu9J8qtJvtza/FSrr2mf4ZYkX0myrd3adbJLgT/o+9z79bWqXgQeT+KjetVpXbptsKSpnU3v8doL6D1b/T9X1blJNtG7f/oHJnZsoeDfAt9bVZXku9um3wA2VdXnk7we+EPg+4D/Su8xut/f2p9cVR9P8vaqOmdAX34COAd4E3Aa8IUkn2vbzgXOovdQlz+ldzvwz09qfwG9ByVN11eA+4E34/351WGGAEkAf1xVu+g9POUF4Pda/QHgn0za95vAHuBDSX4fuK3V3wqc2ffH+YlJTmj1tRPFqnr+AH35F8BH273cn05yF/BP28+9r6rGAdozQJazfwhYAnztAH2F3hPlvvcAfZHmNE8HSN2xl1f/P79g0raX+pa/3bf+bSb9sVBVe4Hz6T2W+xJenXp/DfCDVXVOey1twSLM7Jnsg6b4B/Xzlcl9a/6O9vmm6Sttn7+bQb+kOccQIHXH48B5bfnSQz1IktcCJ1XVp4F30pu6B/gj4O19+01VP7ktvpzk+AE/4nPATyU5LsnrgB9iZlP2DwNvPEBfAf4R8OUZHFeacwwB0ty0KMl43+vdwPuBq9pX8U47jGOfANyW5EvAXcC7Wv0XgFXtAryHgP/Y6v8TOLld6PeXwFtafTPwpYkLA/t8EvgS8JfAncAvVdXfzqB/v0/vkbLT9RV61w58dgbHleYcvyIoac5J8nngx6rqG1NsPxd4d1X97Kx2TDrKGAIkzTlJ/hnwd1X1pSm2/0vg0ap6fFY7Jh1lDAGSJHWU1wRIktRRhgBJkjrKECBJUkcZAiRJ6ihDgCRJHfX/AVcr889LoWYSAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### for EE region ###\n",
    "#acceptance EE\n",
    "N_pass = 285929\n",
    "N_tot = 784119\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "print(Acc)\n",
    "print(AccEr)\n",
    "c_h = 0.9998\n",
    "\n",
    "def EffErrorhlt(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "def EffErrorid(N1_prime, N2_prime, eN1_prime, eN2_prime, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2_prime,N1_prime,2*eN2_prime,eN1_prime, False)\n",
    "    eNum = 2*eN2_prime\n",
    "    return  RatioError(2*N2_prime, 2*N2_prime+N1_prime, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1, eN1, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzee = float(N1)/float(2*effeeHLT*(1-effeeHLT)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeHLT*(1-effeeHLT)\n",
    "    eA = MultError(2*(1-effeeHLT),effeeHLT, effHLTeeEr, effHLTeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzee, RatioError(N1, A*B, eN1, eDen, ifRel)\n",
    "Nzee=[]\n",
    "NzeeEr=[]\n",
    "\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Npr = NZandError(N1[i], eN1[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1[i], eN1[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzee.append(Npr)\n",
    "    NzeeEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzee)\n",
    "print(\"NzEr\",NzeeEr)\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzee , yerr= NzeeEr ,fmt='o', color='red',  capsize=5,label=\"N_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effeeHLT , yerr= effHLTeeEr ,fmt='o', color='red',  capsize=5,label=\"$\\epsilon_{HLT}$ EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effeeID , yerr= effIDeeEr ,fmt='o', color='blue',  capsize=5,label=\"$\\epsilon_{ID}$ EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"$\\epsilon_{ID}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciesc = [effeeHLT[0]/c_h , effeeHLT[1]/c_h , effeeHLT[2]/c_h]\n",
    "efficiencyc_errors = [effHLTeeEr[0]/c_h , effHLTeeEr[1]/c_h ,effHLTeeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effeeHLT , yerr= effHLTeeEr, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciescid = [effeeID[0]/c_h , effeeID[1]/c_h , effeeID[2]/c_h]\n",
    "efficiencyc_errorsid = [effIDeeEr[0]/c_h , effIDeeEr[1]/c_h ,effIDeeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effeeID , yerr=effIDeeEr , fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciescid ,yerr=efficiencyc_errorsid, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "38d93a57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3837835838692851\n",
      "0.0008229743421554861\n",
      "effIDEr [0.014616046683239825, 0.015138516614656766, 0.015215721786440147]\n",
      "effHLTEr [0.016066311457174815, 0.015947194729004615, 0.01758041421469559]\n",
      "effID [0.887635627302968, 0.8909856944889246, 0.9012297269046933]\n",
      "effHLT [0.8572305382357737, 0.8515888369206341, 0.8549460767756712]\n",
      "Nz [18468.200419729004, 15714.007635282638, 13151.700345001207]\n",
      "NzEr [1326.5503820988856, 1115.0402289151468, 998.3425581669578]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### for BE region ###\n",
    "\n",
    "#acceptance BE\n",
    "N_pass = 300932\n",
    "N_tot = 784119\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "print(Acc)\n",
    "print(AccEr)\n",
    "\n",
    "def EffErrorhlt(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "def EffErrorid(N1_prime, N2_prime, eN1_prime, eN2_prime, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2_prime,N1_prime,2*eN2_prime,eN1_prime, False)\n",
    "    eNum = 2*eN2_prime\n",
    "    return  RatioError(2*N2_prime, 2*N2_prime+N1_prime, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "N2_files = [\"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "N1_prime_files = [\"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "N2_prime_files = [\"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "delta_N2_files = [\"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDbeEr = []\n",
    "effHLTbeEr = []\n",
    "effbeID = []\n",
    "effbeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTbeEr.append(Ereehlt)\n",
    "    effIDbeEr.append(Ereeid)\n",
    "    effbeHLT.append(effhlt)\n",
    "    effbeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDbeEr)\n",
    "print (\"effHLTEr\",effHLTbeEr)\n",
    "print (\"effID\",effbeID)\n",
    "print (\"effHLT\",effbeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1, eN1, effbeHLT, effbeID, effHLTbeEr, effIDbeEr, ifRel):\n",
    "    Nzbe = float(N1)/float(2*effbeHLT*(1-effbeHLT)*(effbeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effbeHLT*(1-effbeHLT)\n",
    "    eA = MultError(2*(1-effbeHLT),effbeHLT, effHLTbeEr, effHLTbeEr, False)\n",
    "    B = effbeID**2\n",
    "    eB = 2*effbeID*effIDbeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbe, RatioError(N1, A*B, eN1, eDen, ifRel)\n",
    "Nzbe=[]\n",
    "NzbeEr=[]\n",
    "\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Npr = NZandError(N1[i], eN1[i], effbeHLT[i], effbeID[i], effHLTbeEr[i], effIDbeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1[i], eN1[i], effbeHLT[i], effbeID[i], effHLTbeEr[i], effIDbeEr[i], False)[1]\n",
    "    Nzbe.append(Npr)\n",
    "    NzbeEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbe)\n",
    "print(\"NzEr\",NzbeEr)\n",
    "\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbe , yerr= NzbeEr ,fmt='o', color='red',  capsize=5,label=\"N_BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbeHLT , yerr= effHLTbeEr ,fmt='o', color='red',  capsize=5,label=\"$\\epsilon_{HLT}$ BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbeID , yerr= effIDbeEr ,fmt='o', color='blue',  capsize=5,label=\"$\\epsilon_{ID}$ EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciesc = [effbeHLT[0]/c_h , effbeHLT[1]/c_h , effbeHLT[2]/c_h]\n",
    "efficiencyc_errors = [effHLTbeEr[0]/c_h , effHLTbeEr[1]/c_h ,effHLTbeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbeHLT , yerr= effHLTbeEr, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciescid = [effbeID[0]/c_h , effbeID[1]/c_h , effbeID[2]/c_h]\n",
    "efficiencyc_errorsid = [effIDbeEr[0]/c_h , effIDbeEr[1]/c_h ,effIDbeEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbeID , yerr=effIDbeEr , fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciescid ,yerr=efficiencyc_errorsid, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "5908fa0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.25156640764985927\n",
      "0.0006336687418369341\n",
      "effIDEr [0.015536852781274332, 0.01573768372643915, 0.016269482748383492]\n",
      "effHLTEr [0.017325927978689693, 0.017669644143513574, 0.019520746615759074]\n",
      "effID [0.8924555068334831, 0.8983428672807079, 0.8971770525232768]\n",
      "effHLT [0.8680686505147411, 0.8602885019413106, 0.8585289540083414]\n",
      "Nz [14669.785237224676, 12394.891164741592, 10278.428143930278]\n",
      "NzEr [1190.1812515925792, 970.8673191986934, 876.4677493208926]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### for BB region ###\n",
    "#acceptance BB\n",
    "\n",
    "N_pass = 197258\n",
    "N_tot = 784119\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "print(Acc)\n",
    "print(AccEr)\n",
    "\n",
    "def EffErrorhlt(N1, N2, eN1, eN2, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2,N1,2*eN2,eN1, False)\n",
    "    eNum = 2*eN2\n",
    "    return RatioError(2*N2, 2*N2+N1, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "def EffErrorid(N1_prime, N2_prime, eN1_prime, eN2_prime, ifRel):\n",
    "    '''N1 and N2 are read from the fit, so as their errors. The formula to calculate efficiency is\n",
    "       2N2/(2N2+N1)\n",
    "    '''\n",
    "    # First evaluate the absolute error on den\n",
    "    eDen = SumError(2*N2_prime,N1_prime,2*eN2_prime,eN1_prime, False)\n",
    "    eNum = 2*eN2_prime\n",
    "    return  RatioError(2*N2_prime, 2*N2_prime+N1_prime, eNum, eDen, ifRel)\n",
    "\n",
    "\n",
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"]\n",
    "N2_files = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDbbEr = []\n",
    "effHLTbbEr = []\n",
    "effbbID = []\n",
    "effbbHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTbbEr.append(Ereehlt)\n",
    "    effIDbbEr.append(Ereeid)\n",
    "    effbbHLT.append(effhlt)\n",
    "    effbbID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDbbEr)\n",
    "print (\"effHLTEr\",effHLTbbEr)\n",
    "print (\"effID\",effbbID)\n",
    "print (\"effHLT\",effbbHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1, eN1, effbbHLT, effbbID, effHLTbbEr, effIDbbEr, ifRel):\n",
    "    Nzbb = float(N1)/float(2*effbbHLT*(1-effbbHLT)*(effbbID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effbbHLT*(1-effbbHLT)\n",
    "    eA = MultError(2*(1-effbbHLT),effbbHLT, effHLTbbEr, effHLTbbEr, False)\n",
    "    B = effbbID**2\n",
    "    eB = 2*effbbID*effIDbbEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbb, RatioError(N1, A*B, eN1, eDen, ifRel)\n",
    "Nzbb=[]\n",
    "NzbbEr=[]\n",
    "\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Npr = NZandError(N1[i], eN1[i], effbbHLT[i], effbbID[i], effHLTbbEr[i], effIDbbEr[i], False)[0]\n",
    "    NzErp = NZandError(N1[i], eN1[i], effbbHLT[i], effbbID[i], effHLTbbEr[i], effIDbbEr[i], False)[1]\n",
    "    Nzbb.append(Npr)\n",
    "    NzbbEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbb)\n",
    "print(\"NzEr\",NzbbEr)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbb , yerr= NzbbEr ,fmt='o', color='red',  capsize=5,label=\"N_BB\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbbHLT , yerr= effHLTbbEr ,fmt='o', color='red',  capsize=5,label=\"$\\epsilon_{HLT} BB$\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, effbbID , yerr= effIDbbEr ,fmt='o', color='blue',  capsize=5,label=\"$\\epsilon_{HLT} BB$\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"$\\epsilon_{HLT}$\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciesc = [effbbHLT[0]/c_h , effbbHLT[1]/c_h , effbbHLT[2]/c_h]\n",
    "efficiencyc_errors = [effHLTbbEr[0]/c_h , effHLTbbEr[1]/c_h ,effHLTbbEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbbHLT , yerr= effHLTbbEr, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "efficienciescid = [effbbID[0]/c_h , effbbID[1]/c_h , effbbID[2]/c_h]\n",
    "efficiencyc_errorsid = [effIDbbEr[0]/c_h , effIDbbEr[1]/c_h ,effIDbbEr[2]/c_h] \n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "plt.errorbar(lumisec_midpoints, effbbID , yerr=effIDbbEr , fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciescid ,yerr=efficiencyc_errorsid, fmt='o', color='green', label='Efficiency with C', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.ylim(0,1)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e327f21d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def SumError(a,b,c,eA,eB,eC, ifRel):\n",
    "    '''Assumin C = a+b. Takes a,b, together with their errors.\n",
    "    Asks whether to return the relative or absolute error on C'''\n",
    "    # Er_C^2 = Er_A^2 + Er_B^2\n",
    "    ErC = math.sqrt(eA**2+eB**2+eC**2)\n",
    "    if not ifRel:\n",
    "        return ErC\n",
    "    return float(ErC)/float(a+b+c)\n",
    "\n",
    "\n",
    "#acceptance tot\n",
    "N_pass = 784119\n",
    "N_tot = 2688599\n",
    "AccEr = AccError(N_pass, N_tot, False)[1]\n",
    "Acc = AccError(N_pass, N_tot, False)[0]\n",
    "\n",
    "\n",
    "def LumiAndError(Nzee, NzeeEr, Nzbe, NzbeEr, Nzbb, NzbbEr, Acc, AccEr, \n",
    "                 effeeHLT, effbeHLT, effbbHLT, effeeID, effbeID, effbbID, \n",
    "                 effHLTeeEr, effHLTbeEr, effHLTbbEr, effIDeeEr, effIDbeEr, effIDbbEr, \n",
    "                 ifRel):\n",
    "    lumi = []\n",
    "    Erlumi = []\n",
    "    sigmaBr = 2.073\n",
    "    sigmaBrE = 0.024\n",
    "    A_ee = 0.36\n",
    "    dA_ee = 0.0007966320344501433\n",
    "    A_eb = 0.38\n",
    "    dA_eb = 0.0008229743421554861\n",
    "    A_bb = 0.25\n",
    "    dA_bb = 0.0006336687418369341\n",
    "\n",
    "    # Loop over i values\n",
    "    for i in range(3):  # i = 0, 1, 2\n",
    "        # Calculate Lumi\n",
    "        Lumi = float(Nzee[i] + Nzbe[i] + Nzbb[i]) / float(\n",
    "            sigmaBr * Acc * (\n",
    "                (effeeHLT[i] * effeeID[i]) * A_ee + \n",
    "                (effbeHLT[i] * effbeID[i]) * A_eb + \n",
    "                (effbbHLT[i] * effbbID[i]) * A_bb\n",
    "            )\n",
    "        )\n",
    "        lumi.append(Lumi)\n",
    "\n",
    "        # Calculate errors\n",
    "        A = sigmaBr * Acc\n",
    "        eA = MultError(sigmaBr, Acc, sigmaBrE, AccEr, False)\n",
    "\n",
    "        B11 = effeeHLT[i] * effeeID[i]\n",
    "        eB11 = MultError(effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)\n",
    "        B12 = A_ee\n",
    "        eB12 = dA_ee\n",
    "        B1 = B11 * B12\n",
    "        eB1 = MultError(B11, B12, eB11, eB12, False)\n",
    "\n",
    "        C11 = effbeHLT[i] * effbeID[i]\n",
    "        eC11 = MultError(effbeHLT[i], effbeID[i], effHLTbeEr[i], effIDbeEr[i], False)\n",
    "        C12 = A_eb\n",
    "        eC12 = dA_eb\n",
    "        C1 = C11 * C12\n",
    "        eC1 = MultError(C11, C12, eC11, eC12, False)\n",
    "\n",
    "        D11 = effbbHLT[i] * effbbID[i]\n",
    "        eD11 = MultError(effbbHLT[i], effbbID[i], effHLTbbEr[i], effIDbbEr[i], False)\n",
    "        D12 = A_bb\n",
    "        eD12 = dA_bb\n",
    "        D1 = D11 * D12\n",
    "        eD1 = MultError(D11, D12, eD11, eD12, False)\n",
    "\n",
    "        S = B1 + C1 + D1\n",
    "        eS = SumError(B1, C1, D1, eB1, eC1, eD1, False)\n",
    "        den = S * A\n",
    "        eDen = MultError(S, A, eS, eA, False)\n",
    "        Er = RatioError(Nzee[i] + Nzbe[i] + Nzbb[i], den, NzeeEr[i] + NzbeEr[i] + NzbbEr[i], eDen, ifRel)\n",
    "        Erlumi.append(Er)\n",
    "    \n",
    "    return lumi, Erlumi\n",
    "\n",
    "\n",
    "lumi_final = LumiAndError(Nzee, NzeeEr, Nzbe, NzbeEr, Nzbb, NzbbEr, Acc, AccEr, \n",
    "                 effeeHLT, effbeHLT, effbbHLT, effeeID, effbeID, effbbID, \n",
    "                 effHLTeeEr, effHLTbeEr, effHLTbbEr, effIDeeEr, effIDbeEr, effIDbbEr, \n",
    "                 False)[0]\n",
    "err_lumi =  LumiAndError(Nzee, NzeeEr, Nzbe, NzbeEr, Nzbb, NzbbEr, Acc, AccEr, \n",
    "                 effeeHLT, effbeHLT, effbbHLT, effeeID, effbeID, effbbID, \n",
    "                 effHLTeeEr, effHLTbeEr, effHLTbbEr, effIDeeEr, effIDbeEr, effIDbbEr, \n",
    "                 False)[1]\n",
    "bril =  [114618.486, 97972.294, 81904.476]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "1355fb1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, lumi_final , yerr=err_lumi  ,fmt='o', color='red',  capsize=5,label=\"luminosity\")\n",
    "plt.errorbar(lumisec_midpoints,  bril ,fmt='o', color='black',  capsize=5,label=\"luminosty_bril\")\n",
    "\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"L $(nb^{-1})$\")\n",
    "plt.ylim(15000,150000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "81eaecfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "effIDEr [0.017929791367310134, 0.017450007661543015, 0.018889313331542333]\n",
      "effHLTEr [0.017717988285035336, 0.018105022791970283, 0.01896598932356834]\n",
      "effID [0.8741508914476283, 0.8810528806287043, 0.8859915955418469]\n",
      "effHLT [0.8604563192021063, 0.8598780114940181, 0.857738048910729]\n",
      "Nz [24133.452183174515, 20370.695090942525, 16503.940915167823]\n",
      "NzEr [2264.778494407588, 1917.7572105395823, 1849.5442913078264]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hee1.txt\", \"N_1hee2.txt\", \"N_1hee3.txt\"]\n",
    "N2_files = [\"N_2hee1.txt\", \"N_2hee2.txt\", \"N_2hee3.txt\"]\n",
    "N1_prime_files = [\"N_1Iee1.txt\", \"N_1Iee2.txt\", \"N_1Iee3.txt\"]\n",
    "N2_prime_files = [\"N_2Iee1.txt\", \"N_2Iee2.txt\", \"N_2Iee3.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hee1.txt\", \"eN_1hee2.txt\", \"eN_1hee3.txt\"]\n",
    "delta_N2_files = [\"eN_2hee1.txt\", \"eN_2hee2.txt\", \"eN_2hee3.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Iee1.txt\", \"eN_1Iee2.txt\", \"eN_1Iee3.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Iee1.txt\", \"eN_2Iee2.txt\", \"eN_2Iee3.txt\"]\n",
    "\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1_prime, eN1_prime, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzeeid = float(N1_prime)/float(2*effeeID*(1-effeeID)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeID*(1-effeeID)\n",
    "    eA = MultError(2*(1-effeeID),effeeID, effIDeeEr, effIDeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzeeid, RatioError(N1_prime, A*B, eN1_prime, eDen, ifRel)\n",
    "Nzeeid=[]\n",
    "NzeeidEr=[]\n",
    "\n",
    "for i in range(len(N1_prime)):\n",
    " \n",
    "    Npr = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzeeid.append(Npr)\n",
    "    NzeeidEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzeeid)\n",
    "print(\"NzEr\",NzeeidEr)\n",
    "\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzeeid , yerr= NzeeidEr ,fmt='o', color='blue',  capsize=5,label=\"N_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "bf6a11fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "effIDEr [0.014616046683239825, 0.015138516614656766, 0.015215721786440147]\n",
      "effHLTEr [0.016066311457174815, 0.015947194729004615, 0.01758041421469559]\n",
      "effID [0.887635627302968, 0.8909856944889246, 0.9012297269046933]\n",
      "effHLT [0.8572305382357737, 0.8515888369206341, 0.8549460767756712]\n",
      "Nz [23020.99499332506, 19309.3740154181, 15975.007158740067]\n",
      "NzEr [1850.8013881206664, 1639.251508879906, 1469.7326194200468]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbe4.txt\", \"N_1hbe5.txt\", \"N_1hbe6.txt\"]\n",
    "N2_files = [\"N_2hbe4.txt\", \"N_2hbe5.txt\", \"N_2hbe6.txt\"]\n",
    "N1_prime_files = [\"N_1Ibe4.txt\", \"N_1Ibe5.txt\", \"N_1Ibe6.txt\"]\n",
    "N2_prime_files = [\"N_2Ibe4.txt\", \"N_2Ibe5.txt\", \"N_2Ibe6.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbe4.txt\", \"eN_1hbe5.txt\", \"eN_1hbe6.txt\"]\n",
    "delta_N2_files = [\"eN_2hbe4.txt\", \"eN_2hbe5.txt\", \"eN_2hbe6.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibe4.txt\", \"eN_1Ibe5.txt\", \"eN_1Ibe6.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibe4.txt\", \"eN_2Ibe5.txt\", \"eN_2Ibe6.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1_prime, eN1_prime, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzbeid = float(N1_prime)/float(2*effeeID*(1-effeeID)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeID*(1-effeeID)\n",
    "    eA = MultError(2*(1-effeeID),effeeID, effIDeeEr, effIDeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbeid, RatioError(N1_prime, A*B, eN1_prime, eDen, ifRel)\n",
    "Nzbeid=[]\n",
    "NzbeidEr=[]\n",
    "\n",
    "for i in range(len(N1_prime)):\n",
    " \n",
    "    Npr = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzbeid.append(Npr)\n",
    "    NzbeidEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbeid)\n",
    "print(\"NzEr\",NzbeidEr)\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbeid , yerr= NzbeidEr ,fmt='o', color='blue',  capsize=5,label=\"N_BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "18bd2fa8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "effIDEr [0.015536852781274332, 0.01573768372643915, 0.016269482748383492]\n",
      "effHLTEr [0.017325927978689693, 0.017669644143513574, 0.019520746615759074]\n",
      "effID [0.8924555068334831, 0.8983428672807079, 0.8971770525232768]\n",
      "effHLT [0.8680686505147411, 0.8602885019413106, 0.8585289540083414]\n",
      "Nz [17726.384762308884, 14774.556528474553, 12373.266266613773]\n",
      "NzEr [1632.0701500434689, 1383.9829532372873, 1215.433109345941]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load data from text files\n",
    "def load_data(file_list):\n",
    "    return [np.loadtxt(file) for file in file_list]\n",
    "\n",
    "\n",
    "# File names for inputs EE\n",
    "N1_files = [\"N_1hbb7.txt\", \"N_1hbb8.txt\", \"N_1hbb9.txt\"]\n",
    "N2_files = [\"N_2hbb7.txt\", \"N_2hbb8.txt\", \"N_2hbb9.txt\"]\n",
    "N1_prime_files = [\"N_1Ibb9.txt\", \"N_1Ibb10.txt\", \"N_1Ibb11.txt\"]\n",
    "N2_prime_files = [\"N_2Ibb9.txt\", \"N_2Ibb10.txt\", \"N_2Ibb11.txt\"]\n",
    "\n",
    "delta_N1_files = [\"eN_1hbb7.txt\", \"eN_1hbb8.txt\", \"eN_1hbb9.txt\"]\n",
    "delta_N2_files = [\"eN_2hbb7.txt\", \"eN_2hbb8.txt\", \"eN_2hbb9.txt\"]\n",
    "delta_N1_prime_files = [\"eN_1Ibb9.txt\", \"eN_1Ibb10.txt\", \"eN_1Ibb11.txt\"]\n",
    "delta_N2_prime_files = [\"eN_2Ibb9.txt\", \"eN_2Ibb10.txt\", \"eN_2Ibb11.txt\"]\n",
    "\n",
    "# Load all input data for the first set\n",
    "N1 = load_data(N1_files)\n",
    "N2 = load_data(N2_files)\n",
    "N1_prime = load_data(N1_prime_files)\n",
    "N2_prime = load_data(N2_prime_files)\n",
    "\n",
    "\n",
    "eN1 = load_data(delta_N1_files)\n",
    "eN2 = load_data(delta_N2_files)\n",
    "eN1_prime = load_data(delta_N1_prime_files)\n",
    "eN2_prime = load_data(delta_N2_prime_files)\n",
    "\n",
    "effIDeeEr = []\n",
    "effHLTeeEr = []\n",
    "effeeID = []\n",
    "effeeHLT = []\n",
    "for i in range(len(N1)):\n",
    " \n",
    "    Ereehlt = EffErrorhlt(N1[i], N2[i], eN1[i], eN2[i], False)\n",
    "    Ereeid = EffErrorid(N1_prime[i], N2_prime[i], eN1_prime[i], eN2_prime[i], False)\n",
    "    effhlt = 2*N2[i]/(2*N2[i] + N1[i])\n",
    "    effid =  2*N2_prime[i]/(2*N2_prime[i] + N1_prime[i])\n",
    "    \n",
    "    effHLTeeEr.append(Ereehlt)\n",
    "    effIDeeEr.append(Ereeid)\n",
    "    effeeHLT.append(effhlt)\n",
    "    effeeID.append(effid)\n",
    "    \n",
    "    \n",
    "print (\"effIDEr\",effIDeeEr)\n",
    "print (\"effHLTEr\",effHLTeeEr)\n",
    "print (\"effID\",effeeID)\n",
    "print (\"effHLT\",effeeHLT)\n",
    "\n",
    "\n",
    "def NZandError(N1_prime, eN1_prime, effeeHLT, effeeID, effHLTeeEr, effIDeeEr, ifRel):\n",
    "    Nzbbid = float(N1_prime)/float(2*effeeID*(1-effeeID)*(effeeID**2))\n",
    "    \n",
    "    #1\n",
    "    A = 2*effeeID*(1-effeeID)\n",
    "    eA = MultError(2*(1-effeeID),effeeID, effIDeeEr, effIDeeEr, False)\n",
    "    B = effeeID**2\n",
    "    eB = 2*effeeID*effIDeeEr    \n",
    "    eDen = MultError(A, B, eA, eB, False)\n",
    "    \n",
    "    return Nzbbid, RatioError(N1_prime, A*B, eN1_prime, eDen, ifRel)\n",
    "Nzbbid=[]\n",
    "NzbbidEr=[]\n",
    "\n",
    "for i in range(len(N1_prime)):\n",
    " \n",
    "    Npr = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[0]\n",
    "    NzErp = NZandError(N1_prime[i], eN1_prime[i], effeeHLT[i], effeeID[i], effHLTeeEr[i], effIDeeEr[i], False)[1]\n",
    "    Nzbbid.append(Npr)\n",
    "    NzbbidEr.append(NzErp)\n",
    "    \n",
    "print(\"Nz\",Nzbbid)\n",
    "print(\"NzEr\",NzbbidEr)\n",
    "# Process the ROOT file\n",
    "demo_file = \"output_resultshlt.root\"\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins\n",
    "lumisec_midpoints = [\n",
    "    (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2,\n",
    "    (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2,\n",
    "    (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2,\n",
    "]\n",
    "\n",
    "plt.figure(figsize=(8, 10))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.errorbar(lumisec_midpoints, Nzbbid , yerr= NzbbidEr ,fmt='o', color='blue',  capsize=5,label=\"N_BB\")\n",
    "\n",
    "plt.xlabel(\"Lumisection (s)\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.ylim(0,50000)\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d9b74b5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
