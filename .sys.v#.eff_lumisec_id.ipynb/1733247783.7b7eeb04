{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1de5aaca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 14091.75 ± 163.75\n",
      "Background Yield: 14.34 ± 13.45\n",
      "Background Slope: -0.00 ± 0.01\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values,hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error2 = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal_2id = convoluted_signal(x_data, m, gamma, mu, sigma) * sig_yield  # Bin-wise signal\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal_2id + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "84d5e178",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 4057.50 ± 163.75\n",
      "Background Yield: 42.57 ± 37.08\n",
      "Background Slope: -0.02 ± 0.01\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 10.5, 94, 12.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error1 = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal_1id = convoluted_signal(x_data, m, gamma, mu, sigma) * sig_yield  # Bin-wise signal\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal_1id + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a7b5c714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate efficiency\n",
    "efficiency = signal_2id / (signal_2id +signal_1id )\n",
    "# Plot efficiency as a function of mass (bin centers)\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(lumisec_bin_centers , efficiency, '-o', label='Efficiency', color='purple')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiency of '2id' in Terms of Mass\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "10803d0d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lumisec Bins: [   5.91666667   16.75         27.58333333   38.41666667   49.25\n",
      "   60.08333333   70.91666667   81.75         92.58333333  103.41666667\n",
      "  114.25        125.08333333  135.91666667  146.75        157.58333333\n",
      "  168.41666667  179.25        190.08333333  200.91666667  211.75\n",
      "  222.58333333  233.41666667  244.25        255.08333333  265.91666667\n",
      "  276.75        287.58333333  298.41666667  309.25        320.08333333\n",
      "  330.91666667  341.75        352.58333333  363.41666667  374.25\n",
      "  385.08333333  395.91666667  406.75        417.58333333  428.41666667\n",
      "  439.25        450.08333333  460.91666667  471.75        482.58333333\n",
      "  493.41666667  504.25        515.08333333  525.91666667  536.75\n",
      "  547.58333333  558.41666667  569.25        580.08333333  590.91666667\n",
      "  601.75        612.58333333  623.41666667  634.25        645.08333333\n",
      "  655.91666667  666.75        677.58333333  688.41666667  699.25\n",
      "  710.08333333  720.91666667  731.75        742.58333333  753.41666667\n",
      "  764.25        775.08333333  785.91666667  796.75        807.58333333\n",
      "  818.41666667  829.25        840.08333333  850.91666667  861.75\n",
      "  872.58333333  883.41666667  894.25        905.08333333  915.91666667\n",
      "  926.75        937.58333333  948.41666667  959.25        970.08333333\n",
      "  980.91666667  991.75       1002.58333333 1013.41666667 1024.25\n",
      " 1035.08333333 1045.91666667 1056.75       1067.58333333 1078.41666667\n",
      " 1089.25       1100.08333333 1110.91666667 1121.75       1132.58333333\n",
      " 1143.41666667 1154.25       1165.08333333 1175.91666667 1186.75\n",
      " 1197.58333333 1208.41666667 1219.25       1230.08333333 1240.91666667\n",
      " 1251.75       1262.58333333 1273.41666667 1284.25       1295.08333333]\n",
      "Efficiency: [0.77681661 0.74859287 0.73904762 0.70686456 0.74810606 0.73848987\n",
      " 0.74499089 0.7549195  0.78629032 0.72440945 0.73429084 0.75367647\n",
      " 0.74906367 0.7312253  0.74626866 0.73960217 0.75291829 0.72888016\n",
      " 0.77245509 0.74678899 0.76824034 0.75249501 0.77205882 0.74242424\n",
      " 0.70948617 0.75918367 0.7673913  0.74020619 0.71396896 0.7510917\n",
      " 0.7665996  0.7198364  0.76580796 0.75488069 0.76282051 0.73376623\n",
      " 0.76718404 0.74267782 0.73940678 0.76363636 0.7673913  0.74120083\n",
      " 0.72570194 0.73893805 0.75175644 0.76781609 0.74505495 0.76805252\n",
      " 0.72790698 0.75877193 0.7719715  0.74038462 0.76637555 0.76774194\n",
      " 0.74698795 0.74226804 0.77625571 0.77892562 0.73170732 0.73483146\n",
      " 0.75458716 0.74318182 0.78606965 0.76553672 0.73696682 0.7815534\n",
      " 0.78037383 0.73634204 0.76130653 0.74514563 0.79582367 0.74166667\n",
      " 0.76155718 0.68973747 0.75184275 0.78173719 0.74452555 0.77433628\n",
      " 0.76546392 0.7654321  0.75668449 0.75609756 0.78024691 0.79466667\n",
      " 0.74272931 0.78571429 0.75880759 0.76580796 0.75189873 0.78534031\n",
      " 0.80053191 0.77261614 0.79695431 0.75       0.75067024 0.75621891\n",
      " 0.80246914 0.75930521 0.77900552 0.78711485 0.78195489 0.77662338\n",
      " 0.73589744 0.76941748 0.72649573 0.7617801  0.78514589 0.79328165\n",
      " 0.76127321 0.77777778 0.77675841 0.7847769  0.77971014 0.73958333\n",
      " 0.78535354 0.74278215 0.75548589 0.75988701 0.7781155  0.76315789]\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import uproot\n",
    "import hist\n",
    "import os\n",
    "\n",
    "# Define the list of histogram names you want to process\n",
    "hist_2id = \"h_mass_2idpass_EE\"\n",
    "hist_1id = \"h_mass_1idpass_EE\"\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Process both histograms\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    # Access histograms\n",
    "    hist_2id_data = root_file_2[hist_2id]\n",
    "    hist_1id_data = root_file_2[hist_1id]\n",
    "    \n",
    "    # Convert to numpy arrays\n",
    "    values_2id, edges_lumisec, edges_mass = hist_2id_data.to_numpy()\n",
    "    values_1id, _, _ = hist_1id_data.to_numpy()\n",
    "\n",
    "    # Sum over the mass axis to project along lumisec\n",
    "    total_2id = values_2id.sum(axis=1)  # Sum over the mass axis for 2idpass\n",
    "    total_1id = values_1id.sum(axis=1)  # Sum over the mass axis for 1idpass\n",
    "\n",
    "    # Calculate efficiency\n",
    "    efficiency = np.divide(\n",
    "        total_2id,\n",
    "        (total_1id+total_2id),\n",
    "        out=np.zeros_like(total_2id, dtype=float),  # Avoid division by zero\n",
    "        where=total_1id > 0\n",
    "    )\n",
    "\n",
    "    # Lumisec bin centers\n",
    "    lumisec_bin_centers = (edges_lumisec[:-1] + edges_lumisec[1:]) / 2\n",
    "\n",
    "# Save the efficiency and lumisec bins for plotting\n",
    "output_data = {\"lumisec_bins\": lumisec_bin_centers, \"efficiency\": efficiency}\n",
    "np.savez(\"efficiency_lumisec.npz\", **output_data)\n",
    "\n",
    "# Print the efficiency data\n",
    "print(\"Lumisec Bins:\", lumisec_bin_centers)\n",
    "print(\"Efficiency:\", efficiency)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "29cdd21d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the efficiency data\n",
    "data = np.load(\"efficiency_lumisec.npz\")\n",
    "lumisec_bins = data[\"lumisec_bins\"]\n",
    "efficiency = data[\"efficiency\"]\n",
    "\n",
    "# Plot the efficiency\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(lumisec_bins, efficiency, marker=\"o\", linestyle=\"-\", color=\"blue\", label=\"Efficiency\")\n",
    "plt.xlabel(\"Lumisec Bins\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiency vs. Lumisec\")\n",
    "plt.grid(True)\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fa4ec3a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 14091.75 ± 210.84\n",
      "Background Yield: 14.34 ± 13.45\n",
      "Background Slope: -0.00 ± 0.01\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load lumisec bin edges from the saved file\n",
    "lumisec_data = np.load(\"lumisec_bins.npz\")\n",
    "lumisec_edges = lumisec_data[\"lumisec_edges\"]\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2  # Mass bin centers\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential normalization\n",
    "    -0.01,    # b: Exponential slope\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background normalization\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal_2id = convoluted_signal(x_data, m, gamma, mu, sigma) * sig_yield\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal_2id + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors\n",
    "chi_squared = np.sum(residuals**2)\n",
    "dof = len(x_data) - len(popt)\n",
    "chi_squared_dof = chi_squared / dof\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "4512eb29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 4057.50 ± 210.84\n",
      "Background Yield: 42.57 ± 37.08\n",
      "Background Slope: -0.02 ± 0.01\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 10.5, 94, 12.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error1 = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal_1id = convoluted_signal(x_data, m, gamma, mu, sigma) * sig_yield  # Bin-wise signal\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal_1id + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "68b60906",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assuming signal_1id and signal_2id are already calculated\n",
    "# Aggregate signal over lumisec bins based on lumisec_edges\n",
    "\n",
    "# Load lumisec_edges\n",
    "lumisec_data = np.load(\"efficiency_lumisec.npz\")  # Ensure the correct file\n",
    "lumisec_edges = lumisec_data[\"lumisec_bins\"]\n",
    "\n",
    "# Bin signal_1id and signal_2id according to lumisec_edges\n",
    "lumisec_bin_centers = (lumisec_edges[:-1] + lumisec_edges[1:]) / 2\n",
    "\n",
    "# Assume signal_1id and signal_2id are computed across the x_data (mass bins)\n",
    "# Calculate efficiency for each lumisec bin\n",
    "efficiency = signal_2id / (signal_2id + signal_1id)\n",
    "\n",
    "efficiency_trimmed = efficiency[:len(lumisec_bin_centers)]\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(lumisec_bin_centers, efficiency_trimmed, marker=\"o\", label=\"Efficiency\")\n",
    "plt.xlabel(\"Lumisec Bin Centers\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiency vs Lumisec\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19da22b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcc84c01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
