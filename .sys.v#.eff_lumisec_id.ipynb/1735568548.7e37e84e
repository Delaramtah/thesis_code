{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dcc84c01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8741509258397693, 0.8829273375850349, 0.887218754378477]\n",
      "efferr [0.013812011220850386, 0.01330370713885666, 0.015172087095879003]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 14091.75  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 4057.50    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 12582.39  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3336.75  # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 9593.35  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2438.97  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 210.84 # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 163.75 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 181.22 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 126.18 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 150.83 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 145.46 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for EE_ID\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3265443c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8876356863954444, 0.8921138159793809, 0.9003876019847467]\n",
      "efferr [0.01110590077325191, 0.011473568983634296, 0.011676416537930213]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  14291.01  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3618.15   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  12161.30 # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =   2941.41  # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  9950.44  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2201.69   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 172.36 # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 107.20 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 151.05  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.99 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 124.72 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 73.54  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='blue', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BE_ID\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7158ac00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.9221176388096228, 0.9198121017168198, 0.897629180271136]\n",
      "efferr [0.00970416165075928, 0.011424856492482137, 0.012553128527146252]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  16044.1  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  2710.18   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  12305.72  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  2145.59   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7547.89   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 1721.61  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 160.58 # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 113.17 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 149.02  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 73.91  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 100.16 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 74.23  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='red', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BB_ID\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b87fc8c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8741509258397693, 0.8829273375850349, 0.887218754378477]\n",
      "efferr [0.013812011220850386, 0.01330370713885666, 0.015172087095879003]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "c_h = 0.9998\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 14091.75  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 4057.50    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 12582.39  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3336.75  # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 9593.35  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2438.97  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 210.84 # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 163.75 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 181.22 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 126.18 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 150.83 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 145.46 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "efficienciesc = [efficiencyc_bin1, efficiencyc_bin2, efficiencyc_bin3]\n",
    "efficiencyc_errors = [1/c_h*efficiency_error_bin1, 1/c_h*efficiency_error_bin2, 1/c_h*efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency (C)', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for EE_ID\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e7823a6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
