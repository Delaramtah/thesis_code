{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0e09fc54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8604563261821836, 0.8587288255399124, 0.8583646862590398]\n",
      "efferr [0.013623095749326419, 0.013678020814052623, 0.014918194847310435]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for EE_HLT\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b4cb5360",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8572304707542329, 0.8534769160270363, 0.8527177364485037]\n",
      "efferr [0.012342110332893083, 0.012570608199769621, 0.01393658259572362]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='blue', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BE_HLT\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "75b2f8f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8680688656996601, 0.8600392909382779, 0.8588025896005522]\n",
      "efferr [0.013225554038223656, 0.013442042742066895, 0.015240575872640964]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='red', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BB_HLT\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdfe7052",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "##\n",
    "bac_2idpass_bin1 =    # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "bac_1idpass_bin1 =    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "bac_2idpass_bin2 =   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "bac_1idpass_bin2 =   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "bac_2idpass_bin3 =   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "bac_1idpass_bin3 =  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "##\n",
    "bac_error_2idpass_bin1 =   # Replace with error for signal_2idpass_bin1\n",
    "bac_error_1idpass_bin1 =  # Replace with error for signal_1idpass_bin1\n",
    "bac_error_2idpass_bin2 = # Replace with error for signal_2idpass_bin2\n",
    "bac_error_1idpass_bin2 =  # Replace with error for signal_1idpass_bin2\n",
    "bac_error_2idpass_bin3 =  # Replace with error for signal_2idpass_bin3\n",
    "bac_error_1idpass_bin3 =   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for EE_HLT\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d601981a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8604563261821836, 0.8587288255399124, 0.8583646862590398]\n",
      "efferr [0.013623095749326419, 0.013678020814052623, 0.014918194847310435]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "c_h = 0.9998\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficienciesc = [efficiencyc_bin1, efficiencyc_bin2, efficiencyc_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=3)\n",
    "plt.scatter(\n",
    "    lumisec_midpoints, efficienciesc,\n",
    "    color='blue', label='Efficiency (C)', marker='s'\n",
    ")\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for EE_HLT\")\n",
    "plt.ylim([0.6,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7713b06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8572304707542329, 0.8534769160270363, 0.8527177364485037]\n",
      "efferr [0.012342110332893083, 0.012570608199769621, 0.01393658259572362]\n",
      "effc [0.8574019511444617, 0.8536476455561476, 0.8528883141113259]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "c_h = 0.9998\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficienciesc = [efficiencyc_bin1, efficiencyc_bin2, efficiencyc_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "print(\"effc\",efficienciesc)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=3)\n",
    "plt.scatter(\n",
    "    lumisec_midpoints, efficienciesc,\n",
    "    color='blue', label='Efficiency (C)', marker='s'\n",
    ")\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BE_HLT\")\n",
    "plt.ylim([0.6,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "16d1f748",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8680688656996601, 0.8600392909382779, 0.8588025896005522]\n",
      "efferr [0.013225554038223656, 0.013442042742066895, 0.015240575872640964]\n",
      "effc [0.8682425142025005, 0.8602113332049188, 0.8589743844774477]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "c_h = 0.9998\n",
    "# Replace these with fit results for each histogram\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficienciesc = [efficiencyc_bin1, efficiencyc_bin2, efficiencyc_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "efficiencyc_errors = [1/c_h*efficiency_error_bin1, 1/c_h*efficiency_error_bin2, 1/c_h*efficiency_error_bin3]\n",
    "\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "print(\"effc\",efficienciesc)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency (C)', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BB_HLT\")\n",
    "plt.ylim([0.58,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a795e5a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8604563261821836, 0.8587288255399124, 0.8583646862590398]\n",
      "efferr [0.013623095749326419, 0.013678020814052623, 0.014918194847310435]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "c_h=0.9998\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "efficienciesc = [efficiencyc_bin1, efficiencyc_bin2, efficiencyc_bin3]\n",
    "efficiencyc_errors = [1/c_h*efficiency_error_bin1, 1/c_h*efficiency_error_bin2, 1/c_h*efficiency_error_bin3]\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency (C)', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for EE_HLT\")\n",
    "plt.ylim([0.8,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "16a322e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff [0.8572304707542329, 0.8534769160270363, 0.8527177364485037]\n",
      "efferr [0.012342110332893083, 0.012570608199769621, 0.01393658259572362]\n",
      "effc [0.8574019511444617, 0.8536476455561476, 0.8528883141113259]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "c_h = 0.9998\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "efficiencyc_bin1 = 1/c_h*((2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1))\n",
    "efficiencyc_bin2 = 1/c_h*((2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2))\n",
    "efficiencyc_bin3 = 1/c_h*((2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3))\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficienciesc = [efficiencyc_bin1, efficiencyc_bin2, efficiencyc_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "efficiencyc_errors = [1/c_h*efficiency_error_bin1, 1/c_h*efficiency_error_bin2, 1/c_h*efficiency_error_bin3]\n",
    "\n",
    "print(\"eff\",efficiencies)\n",
    "print(\"efferr\",efficiency_errors)\n",
    "print(\"effc\",efficienciesc)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, efficiencies, yerr=efficiency_errors, fmt='o', color='black', label='Efficiency', capsize=10 ,capthick=10, ecolor='blue')\n",
    "plt.errorbar(lumisec_midpoints, efficienciesc,yerr=efficiencyc_errors, fmt='o', color='green', label='Efficiency (C)', capsize=5,capthick=1, ecolor='red')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"Efficiency\")\n",
    "plt.title(\"Efficiencies vs Lumisec for BE_HLT\")\n",
    "plt.ylim([0.6,1.0])\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b2089d6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
