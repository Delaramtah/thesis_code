{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aded88e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14036.20919795857, 12603.03564771506, 9767.858736758113]\n",
      "lumi [40452.554757358, 36151.21170168409, 27566.953653143104]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26   # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42   # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28  # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints, l_values, marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisection\")\n",
    "plt.ylabel(\"luminosity\")\n",
    "plt.title(\"luminosity  vs Lumisection\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9dc95429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14551.045985363908, 12733.332086577184, 10091.750918470183]\n",
      "lumi [31544.959148721486, 27604.368847586757, 21877.731043006734]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints, l_values, marker='o', color='red', label='l vs Lumisec')\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N produce & luminosity vs Lumisec_BE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "51c6e925",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_HLT vs Lumisec_BB\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99e935c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import json_normalize\n",
    "\n",
    "# Load JSON data (assuming nested structure)\n",
    "with open('input_file.json', 'r') as file:\n",
    "    json_data = pd.read_json(file)\n",
    "\n",
    "# Flatten the nested JSON (example if contacts are nested inside 'run_data')\n",
    "df = json_normalize(json_data, \n",
    "                    meta=['run:fill', 'time', 'nls', 'ncms' , 'delivered(/ub)' , ' recorded(/ub)'],\n",
    "                    errors='ignore')\n",
    "\n",
    "# Display the table\n",
    "print(df)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
