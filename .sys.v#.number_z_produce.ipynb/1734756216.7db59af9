{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aded88e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14036.20919795857, 12603.03564771506, 9767.858736758113]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26   # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42   # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28  # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"Number  & luminosity  vs Lumisec_EE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9dc95429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14551.045985363908, 12733.332086577184, 10091.750918470183]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"Number of (N) vs Lumisec_BE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51c6e925",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"Number of (N) vs Lumisec_BB\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99e935c7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
