{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aded88e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14036.20919795857, 12603.03564771506, 9767.858736758113]\n",
      "lumi [40452.554757358, 36151.21170168409, 27566.953653143104]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26   # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42   # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28  # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_HLT vs Lumisec_EE\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9dc95429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14551.045985363908, 12733.332086577184, 10091.750918470183]\n",
      "lumi [31544.959148721486, 27604.368847586757, 21877.731043006734]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_HLT vs Lumisec_BE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "51c6e925",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ vs Lumisec_BB\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "99e935c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [18441.330842994266, 16140.353268559671, 12187.337491223963]\n",
      "lumi [52315.55170786302, 45028.946744688306, 33276.63087550684]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = float(open(\"N_2Iee1.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = float(open(\"N_1Iee1.txt\").read())   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = float(open(\"N_2Iee2.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = float(open(\"N_1Iee2.txt\").read())    # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = float(open(\"N_2Iee3.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = float(open(\"N_1Iee3.txt\").read())  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 =  float(open(\"eN_2Iee1.txt\").read())  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 =  float(open(\"eN_1Iee1.txt\").read())  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 =  float(open(\"eN_2Iee2.txt\").read()) # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 =  float(open(\"eN_1Iee2.txt\").read())  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 =  float(open(\"eN_2Iee3.txt\").read()) # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 =  float(open(\"eN_1Iee3.txt\").read()) # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ID vs Lumisec_EE\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c3749b06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14118.654770683628, 11370.420889094221, 9367.676159912931]\n",
      "lumi [39231.209652052145, 30526.777599325418, 25281.110636684116]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = float(open(\"N_2Ibb9.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = float(open(\"N_1Ibb9.txt\").read())   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = float(open(\"N_2Ibb10.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = float(open(\"N_1Ibb10.txt\").read())    # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = float(open(\"N_2Ibb11.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = float(open(\"N_1Ibb11.txt\").read())  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 =  float(open(\"eN_2Ibb9.txt\").read())  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 =  float(open(\"eN_1Ibb9.txt\").read())  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 =  float(open(\"eN_2Ibb10.txt\").read()) # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 =  float(open(\"eN_1Ibb10.txt\").read())  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 =  float(open(\"eN_2Ibb11.txt\").read()) # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 =  float(open(\"eN_1Ibb11.txt\").read()) # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ID vs Lumisec_BB\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "983f8c52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [18138.173044660616, 15280.569652944374, 12273.9271003187]\n",
      "lumi [50673.8346114177, 42191.30539191176, 33022.90884598454]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = float(open(\"N_2Ibe4.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = float(open(\"N_1Ibe4.txt\").read())   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = float(open(\"N_2Ibe5.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = float(open(\"N_1Ibe5.txt\").read())    # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = float(open(\"N_2Ibe6.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = float(open(\"N_1Ibe6.txt\").read())  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 =  float(open(\"eN_2Ibe4.txt\").read())  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 =  float(open(\"eN_1Ibe4.txt\").read())  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 =  float(open(\"eN_2Ibe5.txt\").read()) # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 =  float(open(\"eN_1Ibe5.txt\").read())  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 =  float(open(\"eN_2Ibe6.txt\").read()) # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 =  float(open(\"eN_1Ibe6.txt\").read()) # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ID vs Lumisec_BE\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9f057fe1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_bril [114618.486, 97972.294, 81904.476]\n",
      "lumi_EE [84919.03121689166, 74214.58391348073, 62060.65001473216]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9135.45   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  2977.35  # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7624.64  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2529.20  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26   # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42   # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28  # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.106*2.073*efficiency_bin1*0.8742)\n",
    "l_bin2 = N_bin2/(0.106*2.073*efficiency_bin2*0.8811)\n",
    "l_bin3 = N_bin3/(0.106*2.073*efficiency_bin3*0.8860)\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "luminosity_errors = [(0.00264+(4.44*math.pow(10,-6))+0.0235+(4.2162*math.pow(10,-7))) , (0.00247+(4.44*math.pow(10,-6))+0.0235+(5.5358*math.pow(10,-7))) , (0.001366+(4.44*math.pow(10,-6))+0.0235+(9.6669*math.pow(10,-7)))]\n",
    "\n",
    "print(\"lumi_bril\",lbril_values)\n",
    "print(\"lumi_EE\", l_values)\n",
    "rat = [lbril_values[0]/l_values[0], lbril_values[1]/l_values[1] , lbril_values[2]/l_values[2]]\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.errorbar(lumisec_midpoints, l_values, xerr=luminosity_errors, fmt='o', color='black', capsize=5,label=\"lumi_EE\")\n",
    "# plt.errorbar(lumisec_midpoints,lbril_values , xerr=luminosity_errors, fmt='o', color='red', capsize=5,label=\"lumi_bril\")\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red', capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_EE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c72ae13d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_bril [114618.486, 97972.294, 81904.476]\n",
      "lumi_BE [82368.65889857369, 70811.38566012947, 65611.04603863167]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9046.66   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3153.22   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7807.83  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2649.42   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.112*2.073*efficiency_bin1*0.8876)\n",
    "l_bin2 = N_bin2/(0.112*2.073*efficiency_bin2*0.8910)\n",
    "l_bin3 = N_bin3/(0.112*2.073*efficiency_bin3*0.8202)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "luminosity_errors = [(0.00156+(4.6506*math.pow(10,-6))+0.0235+(4.3467*math.pow(10,-7))) , (0.00161+(4.6506*math.pow(10,-6))+0.0235+(5.9759*math.pow(10,-7))) , (0.0019+(4.6506*math.pow(10,-6))+0.0235+(9.9927*math.pow(10,-7)))]\n",
    "print(\"lumi_bril\", lbril_values)\n",
    "print(\"lumi_BE\", l_values)\n",
    "rat = [lbril_values[0]/l_values[0], lbril_values[1]/l_values[1] , lbril_values[2]/l_values[2]]\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.errorbar(lumisec_midpoints, l_values, xerr=luminosity_errors, fmt='o', color='black',  capsize=5,label=\"lumi_BE\")\n",
    "# plt.errorbar(lumisec_midpoints, lbril_values , xerr=luminosity_errors, fmt='o', color='red',  capsize=5,label=\"lumi_bril\")\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red',  capsize=5,label=\"lumi_bril/lumi_BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_BE\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4e88ccb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_BB [99658.0222043201, 94230.24555373803, 78279.57945273764]\n",
      "lumi_bril [114618.486, 97972.294, 81904.476]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7403.13  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  2404.55 # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  6098.08  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2009.72   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 41, 81\n",
    "x_bin_start3, x_bin_end3 = 81, 119\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.073*2.073*efficiency_bin1*0.8925)\n",
    "l_bin2 = N_bin2/(0.073*2.073*efficiency_bin2*0.8154)\n",
    "l_bin3 = N_bin3/(0.073*2.073*efficiency_bin3*0.8135)\n",
    "lbril_values = [114618.486  , 97972.294 , 81904.476]\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "rat = [lbril_values[0]/l_values[0], lbril_values[1]/l_values[1] , lbril_values[2]/l_values[2]]\n",
    "luminosity_errors = [(0.00255+(5.4*math.pow(10,-6))+0.0235+(7.5935*math.pow(10,-7))) , (0.00257+(5.4*math.pow(10,-6))+0.0235+(1.3403*math.pow(10,-6))) , (0.0028+(5.4*math.pow(10,-6))+0.0235+(1.7005*math.pow(10,-6)))]\n",
    "print(\"lumi_BB\" , l_values)\n",
    "print(\"lumi_bril\" , lbril_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red',  capsize=5,label=\"lumi_bril/lumi_BB\")\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_BB\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2fb5a68c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n",
      "lumi_bb [24708.215179851213, 21969.404332607905, 16828.162021434615]\n",
      "bril [116086.333, 100081.51, 93398.989]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.31*2.018*efficiency_bin1*0.8708)\n",
    "l_bin2 = N_bin2/(0.31*2.018*efficiency_bin2*0.8625)\n",
    "l_bin3 = N_bin3/(0.31*2.018*efficiency_bin3*0.8629)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [(33508.88574846459+42953.99898400971+40181.36958173203),(29794.554336871133+37890.61341001629+27566.953653143104),(22822.083846539463+30042.71043743979+27566.953653143104)]\n",
    "l_evalues = [(0.02605540995+0.02506508527+0.02614507222),(0.0260759909+0.02511524819+0.02597520418),(0.0263063511+0.025405649869999998+0.02487161729)]\n",
    "luminosity_errors = [(0.00255+(0.000001585)+0.000141+(7.5935*math.pow(10,-7))) , (0.00257+(0.000001585)+0.000141+(1.3403*math.pow(10,-6))) , (0.0028+(0.000001585)+0.000141+(1.7005*math.pow(10,-6)))]\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "lbb_values = [l_bin1,l_bin2,l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print (\"lumi_bb\",lbb_values)\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints,lbb_values , xerr=l_evalues, fmt='o', color='black',label=\"Measured luminosity\"  ,capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values, fmt='o', color='blue', label=\"Brilcalc\", capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"$L_{total}$\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13790cc8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4fb2322a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n",
      "lumi_hltBB [24708.215179851213, 21969.404332607905, 16828.162021434615]\n",
      "errorlumi_hltBB [0.026051969350000002, 0.0260725503, 0.0263029105]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.31*2.018*efficiency_bin1*0.8708)\n",
    "l_bin2 = N_bin2/(0.31*2.018*efficiency_bin2*0.8625)\n",
    "l_bin3 = N_bin3/(0.31*2.018*efficiency_bin3*0.8629)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "\n",
    "luminosity_errors = [(0.00255+(1.21*math.pow(10,-6))+0.0235+(7.5935*math.pow(10,-7))) , (0.00257+(1.21*math.pow(10,-6))+0.0235+(1.3403*math.pow(10,-6))) , (0.0028+(1.21*math.pow(10,-6))+0.0235+(1.7005*math.pow(10,-6)))]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi_hltBB\" , l_values)\n",
    "print(\"errorlumi_hltBB\" , luminosity_errors)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, l_values, xerr=luminosity_errors, fmt='o', color='black',  capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ead5cd83",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
