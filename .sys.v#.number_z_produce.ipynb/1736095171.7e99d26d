{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aded88e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14036.20919795857, 12603.03564771506, 9767.858736758113]\n",
      "lumi [40452.554757358, 36151.21170168409, 27566.953653143104]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26   # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42   # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28  # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_HLT vs Lumisec_EE\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9dc95429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14551.045985363908, 12733.332086577184, 10091.750918470183]\n",
      "lumi [31544.959148721486, 27604.368847586757, 21877.731043006734]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_HLT vs Lumisec_BE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "51c6e925",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ vs Lumisec_BB\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "99e935c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [18441.330842994266, 16140.353268559671, 12187.337491223963]\n",
      "lumi [52315.55170786302, 45028.946744688306, 33276.63087550684]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = float(open(\"N_2Iee1.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = float(open(\"N_1Iee1.txt\").read())   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = float(open(\"N_2Iee2.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = float(open(\"N_1Iee2.txt\").read())    # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = float(open(\"N_2Iee3.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = float(open(\"N_1Iee3.txt\").read())  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 =  float(open(\"eN_2Iee1.txt\").read())  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 =  float(open(\"eN_1Iee1.txt\").read())  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 =  float(open(\"eN_2Iee2.txt\").read()) # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 =  float(open(\"eN_1Iee2.txt\").read())  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 =  float(open(\"eN_2Iee3.txt\").read()) # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 =  float(open(\"eN_1Iee3.txt\").read()) # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ID vs Lumisec_EE\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c3749b06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [14118.654770683628, 11370.420889094221, 9367.676159912931]\n",
      "lumi [39231.209652052145, 30526.777599325418, 25281.110636684116]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = float(open(\"N_2Ibb9.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = float(open(\"N_1Ibb9.txt\").read())   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = float(open(\"N_2Ibb10.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = float(open(\"N_1Ibb10.txt\").read())    # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = float(open(\"N_2Ibb11.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = float(open(\"N_1Ibb11.txt\").read())  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 =  float(open(\"eN_2Ibb9.txt\").read())  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 =  float(open(\"eN_1Ibb9.txt\").read())  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 =  float(open(\"eN_2Ibb10.txt\").read()) # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 =  float(open(\"eN_1Ibb10.txt\").read())  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 =  float(open(\"eN_2Ibb11.txt\").read()) # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 =  float(open(\"eN_1Ibb11.txt\").read()) # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ID vs Lumisec_BB\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "983f8c52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [18138.173044660616, 15280.569652944374, 12273.9271003187]\n",
      "lumi [50673.8346114177, 42191.30539191176, 33022.90884598454]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = float(open(\"N_2Ibe4.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = float(open(\"N_1Ibe4.txt\").read())   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = float(open(\"N_2Ibe5.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = float(open(\"N_1Ibe5.txt\").read())    # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = float(open(\"N_2Ibe6.txt\").read())  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = float(open(\"N_1Ibe6.txt\").read())  # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 =  float(open(\"eN_2Ibe4.txt\").read())  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 =  float(open(\"eN_1Ibe4.txt\").read())  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 =  float(open(\"eN_2Ibe5.txt\").read()) # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 =  float(open(\"eN_1Ibe5.txt\").read())  # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 =  float(open(\"eN_2Ibe6.txt\").read()) # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 =  float(open(\"eN_1Ibe6.txt\").read()) # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_results.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.22858255458717672*2.018*0.8742*efficiency_bin1)\n",
    "l_bin2 = N_bin2/(0.22858255458717672*2.018*efficiency_bin2*0.8801)\n",
    "l_bin3 = N_bin3/(0.22858255458717672*2.018*efficiency_bin3*0.8949)\n",
    "\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi\", l_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.scatter(lumisec_midpoints, N_values, marker='o', color='blue', label='N vs Lumisec')\n",
    "plt.scatter(lumisec_midpoints,N_values , marker='o', color='blue')\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"N\")\n",
    "plt.title(\"N_ID vs Lumisec_BE\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9f057fe1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_bril [116086.333, 100081.51, 93398.989]\n",
      "lumi_EE [43812.13332817731, 39029.39405516948, 30115.508265133147]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionEE_hlt.root\"\n",
    "\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 10392.20   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 3370.69    # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 9293.67   # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 3057.84   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 7196.86   # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 = 2375.05   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "signal_error_2idpass_bin1 = 159.01  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 98.26   # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 142.85  # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 90.42   # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 121.28  # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 71.29   # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_EE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.106*4.018*efficiency_bin1*0.8742)\n",
    "l_bin2 = N_bin2/(0.106*4.018*efficiency_bin2*0.8829)\n",
    "l_bin3 = N_bin3/(0.106*4.018*efficiency_bin3*0.8872)\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "luminosity_errors = [(0.00264+(4.44*math.pow(10,-6))+0.0235+(4.2162*math.pow(10,-7))) , (0.00247+(4.44*math.pow(10,-6))+0.0235+(5.5358*math.pow(10,-7))) , (0.001366+(4.44*math.pow(10,-6))+0.0235+(9.6669*math.pow(10,-7)))]\n",
    "\n",
    "print(\"lumi_bril\",lbril_values)\n",
    "print(\"lumi_EE\", l_values)\n",
    "rat = [lbril_values[0]/l_values[0], lbril_values[1]/l_values[1] , lbril_values[2]/l_values[2]]\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.errorbar(lumisec_midpoints, l_values, xerr=luminosity_errors, fmt='o', color='black', capsize=5,label=\"lumi_EE\")\n",
    "# plt.errorbar(lumisec_midpoints,lbril_values , xerr=luminosity_errors, fmt='o', color='red', capsize=5,label=\"lumi_bril\")\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red', capsize=5,label=\"lumi_bril/lumi_EE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_EE\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c72ae13d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_bril [116086.333, 100081.51, 93398.989]\n",
      "lumi_BE [42496.32401611331, 37162.83113517615, 32118.513517910076]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 =  10692.75 # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 =  3561.70  # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 =  9275.25  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 =  3184.71   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 =  7337.99  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  2534.85   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 149.67# Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 84.11 # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 133.06 # Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 72.53 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 116.85 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 63.34 # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BE\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.112*4.018*efficiency_bin1*0.8876)\n",
    "l_bin2 = N_bin2/(0.112*4.018*efficiency_bin2*0.8921)\n",
    "l_bin3 = N_bin3/(0.112*4.018*efficiency_bin3*0.8188)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "luminosity_errors = [(0.00156+(4.6506*math.pow(10,-6))+0.0235+(4.3467*math.pow(10,-7))) , (0.00161+(4.6506*math.pow(10,-6))+0.0235+(5.9759*math.pow(10,-7))) , (0.0019+(4.6506*math.pow(10,-6))+0.0235+(9.9927*math.pow(10,-7)))]\n",
    "print(\"lumi_bril\", lbril_values)\n",
    "print(\"lumi_BE\", l_values)\n",
    "rat = [lbril_values[0]/l_values[0], lbril_values[1]/l_values[1] , lbril_values[2]/l_values[2]]\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "# plt.errorbar(lumisec_midpoints, l_values, xerr=luminosity_errors, fmt='o', color='black',  capsize=5,label=\"lumi_BE\")\n",
    "# plt.errorbar(lumisec_midpoints, lbril_values , xerr=luminosity_errors, fmt='o', color='red',  capsize=5,label=\"lumi_bril\")\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red',  capsize=5,label=\"lumi_bril/lumi_BE\")\n",
    "\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_BE\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4e88ccb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lumi_BB [51416.39622437919, 49471.895749182724, 38033.19255240647]\n",
      "lumi_bril [116086.333, 100081.51, 93398.989]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.073*4.018*efficiency_bin1*0.8925)\n",
    "l_bin2 = N_bin2/(0.073*4.018*efficiency_bin2*0.8169)\n",
    "l_bin3 = N_bin3/(0.073*4.018*efficiency_bin3* 0.8143)\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "rat = [lbril_values[0]/l_values[0], lbril_values[1]/l_values[1] , lbril_values[2]/l_values[2]]\n",
    "luminosity_errors = [(0.00255+(5.4*math.pow(10,-6))+0.0235+(7.5935*math.pow(10,-7))) , (0.00257+(5.4*math.pow(10,-6))+0.0235+(1.3403*math.pow(10,-6))) , (0.0028+(5.4*math.pow(10,-6))+0.0235+(1.7005*math.pow(10,-6)))]\n",
    "print(\"lumi_BB\" , l_values)\n",
    "print(\"lumi_bril\" , lbril_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, rat , fmt='o', color='red',  capsize=5,label=\"lumi_bril/lumi_BB\")\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"lumi_bril/lumi_BB\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2fb5a68c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n",
      "lumi_bb [24708.215179851213, 21969.404332607905, 16828.162021434615]\n",
      "bril [116086.333, 100081.51, 93398.989]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.31*2.018*efficiency_bin1*0.8708)\n",
    "l_bin2 = N_bin2/(0.31*2.018*efficiency_bin2*0.8625)\n",
    "l_bin3 = N_bin3/(0.31*2.018*efficiency_bin3*0.8629)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [(33508.88574846459+42953.99898400971+40181.36958173203),(29794.554336871133+37890.61341001629+27566.953653143104),(22822.083846539463+30042.71043743979+27566.953653143104)]\n",
    "l_evalues = [(0.02605540995+0.02506508527+0.02614507222),(0.0260759909+0.02511524819+0.02597520418),(0.0263063511+0.025405649869999998+0.02487161729)]\n",
    "luminosity_errors = [(0.00255+(0.000001585)+0.000141+(7.5935*math.pow(10,-7))) , (0.00257+(0.000001585)+0.000141+(1.3403*math.pow(10,-6))) , (0.0028+(0.000001585)+0.000141+(1.7005*math.pow(10,-6)))]\n",
    "lbril_values = [116086.333 , 100081.51 , 93398.989]\n",
    "lbb_values = [l_bin1,l_bin2,l_bin3]\n",
    "print(\"N pro\", N_values)\n",
    "print (\"lumi_bb\",lbb_values)\n",
    "print(\"bril\",lbril_values)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints,lbb_values , xerr=l_evalues, fmt='o', color='black',label=\"Measured luminosity\"  ,capsize=5)\n",
    "plt.errorbar(lumisec_midpoints, lbril_values, fmt='o', color='blue', label=\"Brilcalc\", capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"$L_{total}$\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13790cc8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4fb2322a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N pro [11684.14212370706, 10194.79585686655, 7801.4145289387825]\n",
      "lumi_hltBB [24708.215179851213, 21969.404332607905, 16828.162021434615]\n",
      "errorlumi_hltBB [0.026051969350000002, 0.0260725503, 0.0263029105]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ROOT file with projections\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "\n",
    "# Replace these with fit results for each histogram\n",
    "# Signal yields for 2idpass and 1idpass (bins 1, 2, 3)\n",
    "signal_2idpass_bin1 = 8804.51   # Replace with fit result for h_mass_2idpass_EE_hist1\n",
    "signal_1idpass_bin1 = 2676.26   # Replace with fit result for h_mass_1idpass_EE_hist1\n",
    "signal_2idpass_bin2 = 7540.76  # Replace with fit result for h_mass_2idpass_EE_hist2\n",
    "signal_1idpass_bin2 = 2454.33   # Replace with fit result for h_mass_1idpass_EE_hist2\n",
    "signal_2idpass_bin3 = 5753.87  # Replace with fit result for h_mass_2idpass_EE_hist3\n",
    "signal_1idpass_bin3 =  1892.01   # Replace with fit result for h_mass_1idpass_EE_hist3\n",
    "\n",
    "# Signal errors for 2idpass and 1idpass (standard errors from the fit)\n",
    "# Replace these with the actual error values obtained from your fits\n",
    "signal_error_2idpass_bin1 = 130.78  # Replace with error for signal_2idpass_bin1\n",
    "signal_error_1idpass_bin1 = 68.76  # Replace with error for signal_1idpass_bin1\n",
    "signal_error_2idpass_bin2 = 115.17# Replace with error for signal_2idpass_bin2\n",
    "signal_error_1idpass_bin2 = 58.21 # Replace with error for signal_1idpass_bin2\n",
    "signal_error_2idpass_bin3 = 99.63 # Replace with error for signal_2idpass_bin3\n",
    "signal_error_1idpass_bin3 = 52.09  # Replace with error for signal_1idpass_bin3\n",
    "\n",
    "# Calculate efficiencies for each bin\n",
    "efficiency_bin1 = (2 * signal_2idpass_bin1) / (2 * signal_2idpass_bin1 + signal_1idpass_bin1)\n",
    "efficiency_bin2 = (2 * signal_2idpass_bin2) / (2 * signal_2idpass_bin2 + signal_1idpass_bin2)\n",
    "efficiency_bin3 = (2 * signal_2idpass_bin3) / (2 * signal_2idpass_bin3 + signal_1idpass_bin3)\n",
    "\n",
    "# Calculate errors on the efficiencies using error propagation\n",
    "def efficiency_error(N2, N1, err_N2, err_N1):\n",
    "    dE_dN2 = 2 / (2 * N2 + N1)\n",
    "    dE_dN1 = -2 * N2 / (2 * N2 + N1) ** 2\n",
    "    return np.sqrt((dE_dN2 * err_N2) ** 2 + (dE_dN1 * err_N1) ** 2)\n",
    "\n",
    "efficiency_error_bin1 = efficiency_error(signal_2idpass_bin1, signal_1idpass_bin1, signal_error_2idpass_bin1, signal_error_1idpass_bin1)\n",
    "efficiency_error_bin2 = efficiency_error(signal_2idpass_bin2, signal_1idpass_bin2, signal_error_2idpass_bin2, signal_error_1idpass_bin2)\n",
    "efficiency_error_bin3 = efficiency_error(signal_2idpass_bin3, signal_1idpass_bin3, signal_error_2idpass_bin3, signal_error_1idpass_bin3)\n",
    "\n",
    "# Load edges_lumisec from the original histogram\n",
    "demo_file = \"output_resultshlt.root\"  # Your input ROOT file from part 1\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2hlt_BB\"]  # Example to load any histogram\n",
    "    values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "# Bin ranges for projections (from part 1)\n",
    "x_bin_start1, x_bin_end1 = 1, 41\n",
    "x_bin_start2, x_bin_end2 = 42, 83\n",
    "x_bin_start3, x_bin_end3 = 83, 120\n",
    "\n",
    "# Calculate midpoints of lumisec bins for each range\n",
    "lumisec_midpoint_bin1 = (edges_lumisec[x_bin_start1] + edges_lumisec[x_bin_end1]) / 2\n",
    "lumisec_midpoint_bin2 = (edges_lumisec[x_bin_start2] + edges_lumisec[x_bin_end2]) / 2\n",
    "lumisec_midpoint_bin3 = (edges_lumisec[x_bin_start3] + edges_lumisec[x_bin_end3]) / 2\n",
    "\n",
    "# Combine data for plotting\n",
    "lumisec_midpoints = [lumisec_midpoint_bin1, lumisec_midpoint_bin2, lumisec_midpoint_bin3]\n",
    "efficiencies = [efficiency_bin1, efficiency_bin2, efficiency_bin3]\n",
    "efficiency_errors = [efficiency_error_bin1, efficiency_error_bin2, efficiency_error_bin3]\n",
    "\n",
    "# Calculate N for each bin using the formula\n",
    "N_bin1 = signal_1idpass_bin1 / (2 * efficiency_bin1 * (1 - efficiency_bin1))\n",
    "N_bin2 = signal_1idpass_bin2 / (2 * efficiency_bin2 * (1 - efficiency_bin2))\n",
    "N_bin3 = signal_1idpass_bin3 / (2 * efficiency_bin3 * (1 - efficiency_bin3))\n",
    "l_bin1 = N_bin1/(0.31*2.018*efficiency_bin1*0.8708)\n",
    "l_bin2 = N_bin2/(0.31*2.018*efficiency_bin2*0.8625)\n",
    "l_bin3 = N_bin3/(0.31*2.018*efficiency_bin3*0.8629)\n",
    "# Combine N values for plotting\n",
    "N_values = [N_bin1, N_bin2, N_bin3]\n",
    "l_values = [l_bin1, l_bin2, l_bin3]\n",
    "\n",
    "luminosity_errors = [(0.00255+(1.21*math.pow(10,-6))+0.0235+(7.5935*math.pow(10,-7))) , (0.00257+(1.21*math.pow(10,-6))+0.0235+(1.3403*math.pow(10,-6))) , (0.0028+(1.21*math.pow(10,-6))+0.0235+(1.7005*math.pow(10,-6)))]\n",
    "print(\"N pro\", N_values)\n",
    "print(\"lumi_hltBB\" , l_values)\n",
    "print(\"errorlumi_hltBB\" , luminosity_errors)\n",
    "# Plot efficiencies with error bars\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(lumisec_midpoints, l_values, xerr=luminosity_errors, fmt='o', color='black',  capsize=5)\n",
    "plt.xlabel(\"Lumisec\")\n",
    "plt.ylabel(\"L\")\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ead5cd83",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
