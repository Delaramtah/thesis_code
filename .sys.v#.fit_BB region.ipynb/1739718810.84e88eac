{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7ff93b7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 11245.18 ± 141.12\n",
      "Background Yield: 24.82 ± 11.13\n",
      "Background Slope: -0.01 ± 0.00\n",
      "Chi-squared: 140.64\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.24\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2Ibb9.txt\n",
      "value saved to N_2Ibb9.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "with open(\"eN_2Ibb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2Ibb9.txt\")\n",
    "with open(\"N_2Ibb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2Ibb9.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9c48a240",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 9622.39 ± 122.74\n",
      "Background Yield: 21.79 ± 9.75\n",
      "Background Slope: -0.01 ± 0.00\n",
      "Chi-squared: 124.59\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.10\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2Ibb10.txt\n",
      "value saved to N_2Ibb10.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_BB_hist10;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2Ibb10.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2Ibb10.txt\")\n",
    "with open(\"N_2Ibb10.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2Ibb10.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "52edbf07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 8016.73 ± 105.13\n",
      "Background Yield: 19.36 ± 9.29\n",
      "Background Slope: -0.01 ± 0.01\n",
      "Chi-squared: 108.47\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 0.96\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2Ibb11.txt\n",
      "value saved to N_2Ibb11.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_BB_hist11;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2Ibb11.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2Ibb11.txt\")\n",
    "with open(\"N_2Ibb11.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2Ibb11.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7af4eeb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2710.18 ± 113.17\n",
      "Background Yield: 403.17 ± 390.59\n",
      "Background Slope: -0.04 ± 0.01\n",
      "Chi-squared: 76.83\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.45\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1Ibb9.txt\n",
      "value saved to N_1Ibb9.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 6.5, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1Ibb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1Ibb9.txt\")\n",
    "with open(\"N_1Ibb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1Ibb9.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0496f471",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2177.75 ± 76.95\n",
      "Background Yield: 11.38 ± 11.12\n",
      "Background Slope: -0.01 ± 0.01\n",
      "Chi-squared: 137.86\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.22\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1Ibb10.txt\n",
      "value saved to N_1Ibb10.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_BB_hist10;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1Ibb10.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1Ibb10.txt\")\n",
    "with open(\"N_1Ibb10.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1Ibb10.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1b2959ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 1837.55 ± 76.78\n",
      "Background Yield: 124.31 ± 107.87\n",
      "Background Slope: -0.03 ± 0.01\n",
      "Chi-squared: 67.97\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.28\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfkAAAF4CAYAAABXWoCZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAAsTAAALEwEAmpwYAABptElEQVR4nO3dd3iUVfbA8e9Nb9SEDklAEASEgBEBSyLF3juOKApE1/pzdV0ku666G3XXgr0Eu0QRKyosLi2IAmooIr0moUnvSSZl7u+POwkpMyF13pnJ+TzPPCH3fWfmZJjkzL3vvecqrTVCCCGE8D8BVgcghBBCiMYhSV4IIYTwU5LkhRBCCD8lSV4IIYTwU5LkhRBCCD8lSV4IIYTwU0FWB9DQYmJidHx8vNVhCCGEEB6zdOnSfVrrNpXb/S7Jx8fHk5WVZXUYQgghhMcopXJctctwvRBCCOGnJMkLIYQQfkqSvBBCCOGn/O6avBBCiMZVVFTE9u3bKSgosDqUJicsLIzOnTsTHBxco/MlyQshhKiV7du306xZM+Lj41FKWR1Ok6G1Zv/+/Wzfvp2uXbvW6D4yXC+EEKJWCgoKiI6OlgTvYUopoqOjazWCIkleCCFErUmCt0ZtX3dJ8kIIIXxOYGAgCQkJZbfs7GyGDh0KQHZ2Nh9//LHFEXoHuSYvhBDC54SHh7NixYoKbYsWLQJOJPmbb77Zgsi8i/TkhRBC+IWoqCgAJkyYwMKFC0lISGDSpEkWR2Ut6ckLIYSou//7P6jUo663hAR48cVqT8nPzychIQGArl278tVXX5Ude+aZZ3juuef47rvvGjYuHyRJXgghhM9xNVwvqpIkL4TwqOTkZAAyMzMtjUM0kJP0uIW15Jq8EEIIv9KsWTOOHj1qdRheQZK8EEIIv9KvXz+CgoLo37+/TLzz5JMppd4FLgP2aK37lmu/D7gXKAZmaK0fcbY/CowFSoD7tdbfezJeIYQQ3unYsWNu24KDg5k7d66nQ/JKnr4m/z7wKvBhaYNS6nzgSqCf1tqulGrrbO8N3AT0AToCc5RSp2qtSzwcsxBCCOGTPDpcr7X+AThQqflPwDNaa7vznD3O9iuBqVpru9Z6K7AJGOSxYIUQQggf5w3X5E8FzlVK/ayUWqCUOtPZ3gnYVu687c62KpRSKUqpLKVU1t69exs5XCGEEMI3eEOSDwJaAYOBvwDTlKnA76oKv3b1AFrrdK11otY6sU2bNo0XqRBCCOFDvCHJbwe+1MYvgAOIcbZ3KXdeZ2CnBfEJIYQQPskbkvzXwDAApdSpQAiwD/gGuEkpFaqU6gr0AH6xKkghhBDC13g0ySulPgEWAz2VUtuVUmOBd4FuSqlVwFTgNmevfjUwDVgDzALukZn1QgghSqWlpdGnTx/69etHQkICP//8M+PGjWPNmjUN/lylm9/4Go8uodNaj3Jz6BY356cBaY0XkRBCCF+0ePFivvvuO5YtW0ZoaCj79u2jsLCQt99+2+rQvIo3DNcLIbxUcnJyWa352hwTorHt2rWLmJgYQkNDAYiJiaFjx44kJyeTlZUFwDvvvMOpp55KcnIy48eP59577wVgzJgx3H///QwdOpRu3brx+eefA6aYzvDhwxk4cCCnn34606dPt+aHa0CyQY0QQoh6cfVZ74Yb4O67IS8PLrmk6vExY8xt3z647rqKx2qyd9EFF1zAk08+yamnnsqIESO48cYbSUpKKju+c+dO/vnPf7Js2TKaNWvGsGHD6N+/f9nxXbt28eOPP7Ju3TquuOIKrrvuOsLCwvjqq69o3rw5+/btY/DgwVxxxRWYBV++SXryQgghfE5UVBRLly4lPT2dNm3acOONN/L++++XHf/ll19ISkqidevWBAcHc/3111e4/1VXXUVAQAC9e/dm9+7dAGitmThxIv369WPEiBHs2LGj7Jivkp68EEKIeqmu5x0RUf3xmJia9dxdCQwMLLtsdPrpp/PBBx+UHdPaZVmVMqXD/OXPzcjIYO/evSxdupTg4GDi4+MpKCioW3BeQnryQgghfM769evZuHFj2fcrVqwgLi6u7PtBgwaxYMECDh48SHFxMV988cVJH/Pw4cO0bduW4OBg5s+fT05OTqPE7knSkxdCCOFzjh07xn333cehQ4cICgqie/fupKenc53zAn+nTp2YOHEiZ511Fh07dqR37960aNGi2se02WxcfvnlJCYmkpCQQK9evTzxozQqSfJCCCF8zhlnnMGiRYuqtGeWG/u/+eabSUlJobi4mKuvvpoLLrgAoMK1ezixRW1MTAyLFy92+Xyutrb1BTJcL4QQwi89/vjjJCQk0LdvX7p27cpVV11ldUgeJz15IYTHZGRksGTJEux2O/Hx8aSlpWGz2awOS/ip5557zuoQLCc9eSGER2RkZJCSkoLdbgcgJyeHlJQUMjIyLI5MCP8lSV4I4RGpqank5eVVaMvLyyM1NdWiiITwf5LkhRAekZubW6t2IUT9SZIXQnhEbGxsrdqFEPUnSV4I4RFpaWlERERUaIuIiCAtTTaaFLUXGBhIQkIC/fv3Z+DAgS6X09XEmDFjyjao8SaZmZlcdtll9X4cmV0vhPCI0ln0Y8eOxW63ExcXJ7PrRZ2Fh4ezYsUKAL7//nseffRRFixY4NEYiouLCQry7jQqPXkhhMfYbDYGDx5MUlIS2dnZkuBFgzhy5AitWrUCqt8u9sMPP6Rfv37079+f0aNHV3mcv//974wZMwaHw8HMmTPp1asX55xzDvfff39Zr/rxxx8nJSWFCy64gFtvvZWcnByGDx9Ov379GD58eNkck8ojBFFRUYDpoScnJ3PdddfRq1cvbDZbWe38WbNmlT3nl19+2SCvjXd/BBFCCOH1kt9PrtJ2Q58buPvMu8kryuOSjKp7zY5JGMOYhDHsy9vHddMq7jWbOSbzpM+Zn59PQkICBQUF7Nq1i3nz5gG43S52zZo1pKWl8dNPPxETE8OBAwcqPN4jjzzC4cOHee+997Db7dx555388MMPdO3alVGjRlU4d+nSpfz444+Eh4dz+eWXc+utt3Lbbbfx7rvvcv/99/P1119XG/vy5ctZvXo1HTt25Oyzz+ann34iMTGR8ePHM2/ePLp3786NN9540tegJqQnL4QQwueUDtevW7eOWbNmceutt6K1drtd7Lx587juuuuIiYkBoHXr1mWP9c9//pNDhw7x1ltvoZRi3bp1dOvWja5duwJUSfJXXHEF4eHhACxevJibb74ZgNGjR/Pjjz+eNPZBgwbRuXNnAgICSEhIIDs7m3Xr1tG1a1d69OiBUopbbrmlQV4n6ckLIYSol+p63hHBEdUej4mIqVHPvTpDhgxh37597N27l5kzZ7rcLlZrjVLK5f3PPPNMli5dyoEDB2jduvVJt6mNjIx0e6z0OYKCgnA4HIDZyrawsLDsnPLb3AYGBlJcXFzhvg1JevJCCJdKS9AuWLCA+Pj4CpXpqjsmhKetW7eOkpISoqOj3W4XO3z4cKZNm8b+/fsBKgzXX3TRRUyYMIFLL72Uo0eP0qtXL7Zs2UJ2djYAn376qdvnHjp0KFOnTgXM78U555wDQHx8PEuXLgVg+vTpFBUVVfsz9OrVi61bt7J582YAPvnkkzq8ElVJT14IUYW7ErSlqhwbOxZKSrDdeqsl8Yqmp/SaPJie8gcffEBgYKDb7WL79OlDamoqSUlJBAYGMmDAgAq70V1//fUcPXqUK664gpkzZ/L6669z0UUXERMTw6BBg9zG8fLLL3PHHXfw7LPP0qZNG9577z0Axo8fz5VXXsmgQYMYPnx4tb1/MHMJ0tPTufTSS4mJieGcc85h1apV9XuRAHWyYQlfk5iYqLOysqwOQwifFh8fX9YDKi8uLg7A9TGlyL7oIhg2DM4/HwYMgICqg4XJyclAxS1BhW9Zu3Ytp512mtVhNKpjx44RFRWF1pp77rmHHj168OCDD1odFuD69VdKLdVaJ1Y+V4brhRBVVFeC1u0xrWHrVvjLXyAxEcaObcwQhWhUkydPJiEhgT59+nD48GHuvPNOq0OqE0nyQogqqitBG9u+vetjcXGwdi3s2AGjR8OUKbBnT2OGKUSjefDBB1mxYgVr1qwhIyOjSrVGXyFJXghRRXUlaNM6daLyn7sK5Wk7doQJE6C42CR6IYRlJMkLIaqw2Wykp6eXLfWJi4sjPT0d2ymnYMvKIv3aa6seK1+9rndvGDQI3nsP/GzejxC+RGbXCyFcstlsTJ48GXBOktPaTKhr1w7b++8z2Vnm0+0Euttvhz/9CZYtgzPO8EzQQogKPNqTV0q9q5Tao5Sqsi5AKfWwUkorpWLKtT2qlNqklFqvlLrQk7EKISqZNQsWLIC//x2cdbirddNNEBpqevOiyUtOTi5bWSE8x9PD9e8DF1VuVEp1AUYCueXaegM3AX2c93ldKRXomTCFEBU4HOY6e7duMH58ze7TsiVcfTV8/DEUFDRqeKLpKd1qtk+fPvTv358XXnihrMKcO9nZ2Xz88cceitA7eDTJa61/AA64ODQJeAQof/HuSmCq1tqutd4KbALcVyQQQjSejz+GlSvhX/+CkJCa3+/22+HgQfjmm8aLTXi9xqiQWFq7fvXq1cyePZuZM2fyxBNPVHsfSfIWUEpdAezQWv9W6VAnYFu577c724QQHhTscJgh+gEDoLY7Yw0fDp07Q7nKYqJpcVc9sSFLIbdt25b09HReffVVtNZkZ2dz7rnnMnDgQAYOHMiiRYsAmDBhAgsXLiQhIYFJkya5Pc+fWDrxTikVAaQCF7g67KLN5TRdpVQKkALu1/cKIerm8p07ITsb3nqrQgU7hyMQh+MkvfrAQLjtNnj6abN+vpN8Tm9qUlNTycvLq9CWl5dHampqxRUZ9dStWzccDgd79uyhbdu2zJ49m7CwMDZu3MioUaPIysrimWee4bnnnuO7774ri8PVef7E6p78KUBX4DelVDbQGVimlGqP6bl3KXduZ2CnqwfRWqdrrRO11olt2rRp5JCFaDrCi4sZnZtrStWOHFnh2Nq1/+Cnn2Zw3nkn2g4eNJPwK0yyGjPGXNP/6COPxS28R3XVExtaaZn2oqIixo8fz+mnn87111/PmjVrXJ5f0/N8maU9ea3170Db0u+diT5Ra71PKfUN8LFS6gWgI9AD+MWSQIVooq7euZNWRUXwzDNQbhvMn36CffvOIzr6J5KTzy5rP/dc2L8fioufoHPnz0xj9+5wzjlmlv1f/yo165uY2NhYl3sdNPSo65YtWwgMDKRt27Y88cQTtGvXjt9++w2Hw0FYWJjL+0yaNKlG5/kyTy+h+wRYDPRUSm1XSrktbq21Xg1MA9YAs4B7tNYlnolUCAGQvHcvvzdvDmeeWdamNUycCCEh+znttH/y5JMn2u+7z1yGP3y4P2vX/o2yyc633w4bNsDixZ7/IYSlqque2FD27t3LXXfdxb333otSisOHD9OhQwcCAgL46KOPKCkxqaNZs2YcPXq07H7uzvMnnp5dP0pr3UFrHay17qy1fqfS8Xit9b5y36dprU/RWvfUWv/Xk7EK0eTl5HDqsWP8GBNToXnLFsjKgtjYDwkMPLE0Tim4805TybZ795ex29tT1mm//nqIiJAJeE2Q2+qJ9bweX7rVbJ8+fRgxYgQXXHAB//jHPwC4++67+eCDDxg8eDAbNmwo2+a1X79+BAUF0b9/fyZNmuT2PH8iFe+EEK5Nnw7Aj9HR/Klc8ymnwKZNcOONM9zeNSbmR5o1W8uxY87tMJs1M4l+6lR48UWT8EWTUaV6YgOortfdo0cPVq5cWfb9008/DUBwcDBz586tcK6r8/yJ1RPvhBDeavp0tkZEsKNcQt692wzLd+gAAQHFbu8aEFDIwIF/4ooryjXefjscPQpfftmIQQtvlZmZKfMxLCBJXogmzmW50QMHYMGCCkP1RUVmYl1KSs0f2243w/uAuXPXrtWWuZXSp0I0LEnyQoiqZsyAkhJ+jI4ua3r/fdi4ES6/vOYPc+GFpoQ9YNbYjxkD8+aZdfdCiEYnSV4IUdX06dCxIxuaNQMgPx+eeAKGDKldkr/qKvj1V1hVuiXVbbeZGXqyZt7nadlC2BK1fd0lyQshKsrPNzvOXXkl2rk2/vXXTcG6p56qsFz+pGw2CA4uN0IfFwcDB5revPBZYWFh7N+/XxK9h2mt2b9/f63W88vseiFERXPnwvHjphu+Zg1aw4cfmqH32l4ub9MGrrjCdNyfecYkfIYMgXffheJiCJI/Qb6oc+fObN++nb1791odSpMTFhZG586da3y+/IYJISr6+mto3txk9KeeQilYssTMxauLO+6AL76A2bPhkkswSf7VV+H3382mN8LnBAcH07VrV6vDEDUgSV4IcUJJCXz7rcnGISF8+20moaFmd9nKe8vUdDnUBReYMrhDhjgbSv+xeLEkeSEamVyTF0KcsGQJ7NljhuqBf/8b+vaFgoLq71adoCAYOrTctfz4eGjXTkrcCuEBkuSFECd8/bW5cH7xxYAZZo+Lg/ru21FcDHffbSbwoZTpzS9ZUu9whRDVkyQvhDC0Nkl+2DBo3pwNG2DdOrjyyvo/dFAQrFwJL79snoYhQ0xtXJm4JUSjkiQvhDDWrjWJ1zlU7yxdX7E0bT3ccQesX+8cpS+9Li+9eSEalSR5IYTx9dfmqzOrT59u5sU11Lbf118PkZFm9RyJiaZ7L9flhWhUkuSFEMb06TBoEHTsCJg94594ovYPk5GRwZIlS1iwYAHx8fFkZGQAZiO6G26ATz+F445wSEiQJC9EI5MldEIIYux2+OUXU9LO6ZJLav84GRkZpKSkYLfbAcjJySHFuaONzWYjJQVCQ02tncjBg6UojhCNTHryQgiG7t9v/uG8Hp+RYWrV1FZqaip5eXkV2vLy8khNTQVg8GB44w1o2xZzXT4vr25PJISoEUnyQgjO2bcPevSAXr3Iy4Px4yE9vfaPk5ube9L2oiJYvhz04HJFcYQQjUKSvBBNXGRxMQMOHTK9eKWYPdvsUVOXpXOxbmbplW+fPNnsUZMbEC9FcYRoZJLkhWjCMjIy+OnnnwnVmvgPPyQjI4Pp06FFC0hKqv3jpaWlERERUaEtIiKCtLS0su8HDzZfFy12FsVxJnl3E/aEEHUnSV6IJqp0ktzh4mI0kLN7NykpKXz2WQaXXOLcMa6WbDYb6enphIaGAhAXF0d6ejo2m63snH79ICKi3Hr5zZvJeOMNlxP2JNELUT/K3/YDTkxM1FlZWVaHIYTXi4+PJycnp0q7UnF88kk2N95Y98dOdu5J624Tm/PPh2PH4NcXFsJ55xHfpg05LqrfxcXFkZ2dXfdAhGgilFJLtdaJldulJy9EE+Vukhzklk6ybzRDhsCKFZDX2xTFyXVT3tZ9jEKImpAkL0QTkJycXNa7LlXdJDnnaHujue02+O9/IaiZKYoT6+YJ3cUohKgZSfJCNFFpaWlEBAZWaFMqgrFj09zco+H07AkjRph96hkyhDSH46QT9oQQtSdJXogmynbjjaSHhNAmwPwZaNkyDq3Tuf1220nu2TB++gk++QQYMgRbURHpEydWO2FPCFF7UktSiKZq6VJs+flsPO00Mtu2xW7PpKgIOnf2zNOnp8OsWXDT4sEowNaqFZOd6+vcTdgTQtSO9OSFaKrmzAFgeatWFBa25uefG2bv+JoaMgT27IGtOl6K4gjRSDya5JVS7yql9iilVpVre1YptU4ptVIp9ZVSqmW5Y48qpTYppdYrpS70ZKxC+L3Zs2HAAA4HB7N//xC09nySh6pFcYQQDcfTPfn3gYsqtc0G+mqt+wEbgEcBlFK9gZuAPs77vK6UCkQIUX/Hj8OiRWb2GxAaups77oDTT/dcCH37QlRUxaI4LQsLPReAEE2AR5O81voH4ECltv9prYud3y4BSq8IXglM1VrbtdZbgU3AII8FK4Q/W7jQ7BTjTPKtW2fxzjuglOdCCAyEs84ym9WUdut7HzniuQCEaAK8beLdHcCnzn93wiT9UtudbVUopVKAFJB1tULUyJw5ZmP3c88lP78DAQFFloTx8cfQujVQZIri9DlyhEUxMZbEIoQ/8pqJd0qpVKAYKC1W7apP4bIGr9Y6XWudqLVObNOmTWOFKIT/mDMHzj4bwsPZtm0Uv/76PiUlng+jbVsICgLCTVGcPtKTF6JBeUWSV0rdBlwG2PSJYvrbgS7lTusM7PR0bEL4nd274bffyobqDx48g5YtVxBowYwXhwPuvx8++AAYMoSeR48S6Gf7aQhhJcuTvFLqIuCvwBVa67xyh74BblJKhSqlugI9gF+siFEIvzJvnvk6YgRbt0JBQSdatlxmSSgBAWaS/+efA0OGEO5w0O3YMUtiEcIfeXoJ3SfAYqCnUmq7Umos8CrQDJitlFqhlHoTQGu9GpgGrAFmAfdorS0YUBTCz8yZA61awcCBzJ1rmlq1WmpZOKWr5/RgM/lOhuyFaDgenXintR7lovmdas5PA6R4tRANRWvTdR42DAIDmTMHQkL2ERFRdctZTxk6FN57DzYWxtEuKIge0pMXosF42+x6IURj2rQJtm2DiRMBeO45WLfuiQZfOlebsrSlRXEWL1H0iYqiuyR5IRqM5dfkhRAeNHu2+eqcdNe5M7Rs+buFAcFpp0GfPmC3w6aoKLoeP27W8Ash6k168kL4uYyMDJYsWYLdbif+l19Ii47GdsopfPut6dRrrVDKuhntAQGwylno+l+TogjRGtat82z5PSH8lCR5IfxYRkYGKSkp2O12AHLy80kpLISPPyYjw8aWLdC+vfcsWdsYGWX+sWKFJHkhGoAM1wvhx1JTU8nLy6vQlldSwsSJqSxYUDZqb7nff4e4OFhZeC72gACT5IUQ9SY9eSH8WG5ursv2bdty0dok+VdfzfRsUC7ExppLB+PGvUBo2I+S5IVoINKTF8KPudvLoXnzWAICIDnZs/G406KFmXy3eDGQkGCSvFS+E6LeJMkL4cfS0tKIiIio0BYREUH//mmcdRa0bGlNXK4MGQJLloCjXwIcOGC69kKIepEkL4Qfs9lspKen0zw4GAXEtW1Leno6CxbYqMVSdo8YMgQOHoQN0c6F8zJkL0S9SZIXws/ZbDbS27WjQCmyt27FZrMBEBJicWCVJCXBXXdBUO9Tzcb2kuSFqDdJ8kI0AWccPMiqFi0gIoLUVLjmGu+75N2tG7zxBnTvHwk9ekiSF6IBSJIXwt/t3k3348fJatUKgOnT4dgxGryUbUMoLoatWzkx+U4IUS+S5IXwd86tZZe2bMkff8Dq1d6zPr6yv/zF1MAp6TfAZPtDh6wOSQifJkleCH83ezZHgoLY2KxZ2day3prk+/WD48dhU9uhpuG336wNSAgfJ0leCB+TnJxMck0XuGsNc+awvGVLHEoxZw60bm1Gw73RgAHm6wpHP+c/VlgWixD+QCreCeHPNmyAbdvI6tEDgDPOMOVjA7z0433v3hAcDMu3tuTGdu0kyQtRT5LkhfBnc+YAsNQ56e7ee60M5uRCQkzluxUrkMl3QjQASfJC+LM5cyA+np1hYRQUtOHYMYiKsjqo6j3xBERGArMT4IUXoLDQ+xb1C+EjvHTQTghRb8XFZmb9yJGgFJs331t2zdubXXEFDB+O6ckXFcGaNVaHJITPkiQvhL/KyoIjR2DECLQO4NChgSQlWR3UydntZgBic/Qg0yBD9kLUmSR5IfzV7Nmm4s2wYRw71oPi4mamh+zlCgrM4MOnP8dDRIQkeSHqQZK8EP5qzhyzJi0mhoMHzwBg2DCLY6qBFi2ga1dYsTLALJyXJC9EnUmSF8IfHTtmNmcfORKAgwfPIDJyE+3aWRxXDQ0YAMuXI3vLC1FPkuSF8Ec//GAmrTlL251yyuuccsqrFgdVcwkJsGkTHO11Jhw+DNnZVockhE+SJXRC+KPZsyEsDM45B4CsrHcsDqh2SlcBrIwYzNlgevNdu1oYkRC+SXryQvijOXNMgg8L46uv4OuvrQ6ods47zywOSLwu3pTnk+vyQtSJ9OSF8De7dsGqVTB6NABpaaa4zFVXWRtWbTRvbkrwQgT07ClJXog68mhPXin1rlJqj1JqVbm21kqp2Uqpjc6vrcode1QptUkptV4pdaEnYxXCZ5Xbam7/fli2zHt3navO3Lnw/PNIeVsh6sHTw/XvAxdVapsAzNVa9wDmOr9HKdUbuAno47zP60qpQM+FKoSPmj0boqMhIYH5883EdF9M8t9/DxMnQlG/MyA3Fw4csDokIXyOR5O81voHoPJv6pXAB85/fwBcVa59qtbarrXeCmwCBnkiTiG8VUZGBkuWLGHBggXEx8eTkZFR4XhyUhJ7p041dWEDApgzB5o1gzPPtCjgekhIMGXr17U2e8s/eP75Nd9iVwgBeMfEu3Za610Azq9tne2dgG3lztvubKtCKZWilMpSSmXt3bu3UYMVwioZGRmkpKRgt9sByMnJISUlpUKij83Lo01hYVnXfc0aOP98CPLB2TelM+yXF/YBoPuxYxZGI4Rv8oYk745y0eayIobWOl1rnai1TmzTpk0jhyWENVJTU8nLy6vQlpeXR2pqatn3iQcPmn84i+AsWABTpngsxAZ16qkQHg4rtjSHjh3pfvy41SEJ4XO8IcnvVkp1AHB+3eNs3w50KXdeZ2Cnh2MTwmvk5uaetP2MQ4fYERYG8fGAKV3frJknomt4gYGmqu2WLUBCgvTkhagDb0jy3wC3Of99GzC9XPtNSqlQpVRXoAfwiwXxCeEVYmNjq28vKiLh0CGyWpkFKg88AA895KnoGsfs2fDVV8CAAcTl5RHicFgdkhA+xdNL6D4BFgM9lVLblVJjgWeAkUqpjcBI5/dorVcD04A1wCzgHq11iSfjFcKbpKWlERERUaEtIiKCtLQ0882SJUSWlLC0VSscDvjkE/D1KSrNmpnRCBISCNKaeBmyF6JWPDodR2s9ys0hlxtgaq3TgLTGi0gI32Gz2QAYO3YsdruduLg40tLSytqZMYNipVjaqhW//24SvC8unSvvjz/gz3+GcRcPYRjQQ4bshagVH5xzK0TTZbPZmDx5MgCZmZkVD86cycoWLTgeFMScOabJF/aPr07z5vDpp3Bqj46cFRgo1+WFqCVvuCYvhKiv3Fz4/Xd+bt0aMKXrTzsNOrlcdOo7IpxVbZevUGyMipKevBC1JEleCH8wcyYAi51J/vTT4dZbrQyo4ZRWtd0UFcUpx45BiUzNEaKmJMkL4Q9mzoT4eHKdE/P+8x+YMMHimBrIgAFmoGJFeCfCHQ7YsMHqkITwGZLkhfB1BQVmN5dLLwWlKCxs7Ved3TPOgP79YXWIs2zGsmXWBiSED5EkL4SvW7AA8vJMkgdWrfonF19scUwNaNgwM1x/JGYv9oAAWL7c6pCE8Bn1TvJKqVZKqQSlVGhDBCSEqKUZM0z91+RkiosjOXq0F4MHWx1UwytRis2RkdKTF6IWapXklVJPKKWeKff9MCAXWApsVkr1aeD4hBDV0dok+WHDIDycQ4cSgECfXx9f2cSJsHz5y2yKijI9ee1yGwshRCW17cnbgHXlvn8e+BE4G1gPPN1AcQkhamLDBlPc/ZJLyMjIYN26dCCA0aOrbkPry9asyeDIkcu5ctcu4g8dIuOll6wOSQifUNsk3xHYAqCU6gL0B/6htV4CvAD44SChEF7MuXQuo7CQlJQUSkr2AZrc3Krb0PqqjIwM/vvfFMygIeQAKX/9q1/8bEI0ttom+aNAC+e/hwEHtdalm8YUABEu7yWEaBwzZkDv3qS++OJJt6H1VampqRQWVvrZCgv94mcTorHVNskvACYopS4FHubEjnEApwLbGiowIcRJHD0KP/wAl15ao21ofZU//2xCNLbaJvkHATswFTgElP8ofSvwQ8OEJYQ4qTlzoKgILr305NvQ+jB//tmEaGy1SvJa6x1a62Fa62Za63O11rvKHb4QuLdhwxNCuDVjBrRoAUOH8sQTaVS+WlZhG1of5nKLXSDtL3+xJiAhfEhtl9DNU0r1cnO4PfB9/UMSQlQnMzOTzPnzzaS7Cy6A4GBiY21AOsHBzQGIi4sjPT39xDa0Psxms5Genk5oqCnF0aVtO9IBW9eu1gYmhA+o7XB9MtDczbHmwHn1ikYIUTMrVsCuXXDJJYDJ98HBNs46ayhJSUlkZ2f7RYIvZbPZ6N//WqCEfz25FRtIURwhaqAuFe+qVKFQSoVgZtv/Ue+IhBAkJyeTnJzs/gTn0rnS+rUzZ0JSEgQG5jd+cBYJC9tFQICdZWvDoUcPKW8rRA2cNMkrpf6hlCpRSpVgEvyS0u/LtedjCuFMaeR4hRBgrscnJkK7duzfD9u2lXXq/ZZSDqKiNpsO/IAB0pMXogaCanDOTGAfoICXMVXusiudUwis01ovbNDohBBV7dsHS5bAY48BEB1tmoqKYPr0k9zXx0VFbWTFir44Lh5IwLRpcPAgtGpldVhCeK2TJnmt9a/ArwBKqaPADK31vsYOTAjhxvffm9rt5bruISHm5u+iojawcydsbn82PcAM2Q8bZnVYQnit2i6h+0ASvBAWmzED2raFxEQKCuDMM/2/B1+qZcvlvPwytBzsXOQj1+WFqFZNhuvLKKWCgQeAa4DOQFjlc7TWbRsmNCFEFcXFpid/+eUQEMCCBZCV1TR68QDh4X9w330AMdC5s1yXF+IkapXkgUnAncB3wHzMtXghhKf88AMcOACXXQaYWfVhYVDdRHx/s20bbN0K5w0cKD15IU6itkn+emCC1vr5xghGCHESn30GEREV1sc7t5JvMp58Er76CvbeMwD17bdw/DhERlodlhBeqbbr5BWwsjECEUKcREkJfPklXHopRESwcSNs2uT/S+cqGzgQs2ww9mwzAXGl/EkSwp3aJvnJwKjGCEQIcRILF8KePXD99YBZMnf99U0zyQMsJ8H8Q67LC+FWbYfrdwM2pdR8YDZmJ7rytNb6jYYITAhRyWefmXF5Z1bv3RumTbM4JgucfjoEBMCynBiujIlhxr/+xbOffUZmZqbVoQnhdWqb5F90fo0Fklwc10CdkrxS6kFgnPMxfgdux2w29SkQjynAc4PW+mBdHl8In1Y6VH/JJRAZSUGBKV3fFPdoiYiA006DZcsVDBxIj0WLrA5JCK9VqySvta5LrfuTUkp1Au4Hemut85VS04CbgN7AXK31M0qpCcAE4K+NEYMQXu2nn+CPP8qG6ufMMavofvgBzj33xGn+3Jst/7O9+y60aQO8NYCus2cT5HBYFpcQ3qxRknYdBQHhSqkgTA9+J3Al8IHz+AfAVdaEJoTFPvvMrJW79FLAzKqPjIRBgyyOyyKDBjlHMQYOJFhr4o8ftzokIbxSrZO8UqqtUurfSqm5SqkNSqk+zvYHlFJD6hKE1noH8ByQC+wCDmut/we001rvcp6zC5BCO8LvZWRksGTJEhYsWEB8fDwZU6bAF1+YHeeiotDaJPkRI8C5xXqTc+QIvPYarAw/C4BTjx2zOCIhvFOtkrxSahCwEbgWc438FKD0z0wH4KG6BKGUaoXptXcFOgKRSqlbanH/FKVUllIqa+/evXUJQQivkJGRQUpKCna7HYCcnBxSxo0jY9eusqH6tWshJ6fpzaovT2u491749rcuHA8MpIckeSFcqm1PfhKm0t2pmMp3qtyxX4C6Dh6OALZqrfdqrYuAL4GhwG6lVAcA59c9ru6stU7XWidqrRPbtGlTxxCEsF5qaip5eXkV2vLsdlKhrMrdf/9r2p1byTdJLVpA9+6wfEUAm6KiJMkL4UZtk/xA4HWttQMzC768/dR9OD0XGKyUilBKKWA4sBb4BrjNec5tQBPZhkM0Vbm5ua7bAZo1A+C220zFty5dPBeXNxo40CyR3xgVxSnHjpkVCEKICmqb5A8D7rrK3TDr6GtNa/0z8DmwDLN8LgBIB54BRiqlNgIjnd8L4ReSk5NJrlR0PjY21uW5sdHRZf+OiYGrrmrEwHzEgAGmhv3K8I6EOxywfr3VIQnhdWqb5KcDTyilupVr00qpGOBhzDB7nWit/6G17qW17qu1Hq21tmut92uth2utezi/Hqjr4wvhC9LS0oiIiKjQFgGkPWM+386eDS+/DIWyNVRZ5btfA083//jlF+uCEcJL1TbJTwCOAGuAH5xtbwLrgXzgsYYLTYimx2azkZ6eTqhz2nxcYCDpAwZgGzcOMDPKn30WgmpbxsoPJSXB4cNQ0G4TR4OCYPFiq0MSwuvUKsk7q80NBu4BcoA5wFZM8j9ba320wSMUoomx2WwMHjyYPw0YQHZJCbYHHwTg6FGYNQuuucaUdW3qQkOheXPQSrGmWTOQyndCVFHr/oDWuhB4x3kTQjSSpL17ITjYlLYDZswAux2uu87iwLzIxx/Dhg1/ZnXz+zlr9WrTtW/RwuqwhPAatV0nv0Ap9SellKxTE6IxaW2S/AUXQMuWAHz+ObRvD0OHWhuaN/niiwx27bqPsTk5xGtNxtNPWx2SEF6ltoN+ezGV6XYqpWYrpe5wFrIRQjSgXkeP0t5uLyuAozUcP2568YGBFgfnJTIyMpgxIwXnAkNygJQXXiAjI8PSuITwJrW9Jn8dZi38rcAx4DXgD6XUd0qp0UqpZo0QoxBNTvLevRQpBVdcAYBSpgjOSy9ZHJgXSU1NxW6vVDioqIjU1FSLIhLC+9R6+o7W+rjW+hOt9dWYhD/eeWgy8EdDBidEk+RwkLx3L0tbtYJWZqCsoMAckgl3J7gtHOSmXYimqF5/Mpyz6TdjZtgfAcIbIighmrQFC2hvtzO3rSkgWVAAHTvCiy9aG5a3cVs4qH17D0cihPeqU5JXSg1SSj2vlMrFrJdPAl4CejRkcEI0Se++y7HAQBbExADwv//BwYPQu7fFcXkZt4WDnNvxCiFquYROKfUMcAMQD2wA3gOmaq3XNnxoQjRBhw7B558zp107Cp0z7D7/3Izan3++taF5G5vNBsDYsWOx2+3ExcaStn8/NofD4siE8B617cnfAEwDBjpL0P5DErwQtVdlz/jSGeFTp0JBAf91Djnb7fDNN6ZWfXCwdfF6K5vNRmLi+URFreevE3KwJSdL5TshyjlpkldK3ayUag2gte6mtZ4AHFBKBVU6r6NSamIjxSmE33C5Z3xKikn0774L/fqxPioKgLlzTX2Xa6+1MmLvFhSUT1FRSxYuBIYMgbVrzfUNIUSNevIfAd1Lv1FKBWIm2vWrdF4X4J8NF5oQ/snlnvF5eaT+5S/w669wxx1mzRzQrx/8+98wYoQVkfqO5s1Xm6q2Q4aYhp9/tjQeIbxFTZK8qmGbEKIG3C792rXLjMnbbGRmZpKZmUnnzvDII6ZOu3CvefPV5OTAzi5nmXWGUsdeCKCeS+iEELXndulXQIC5+O6cVb98OUybJtvK1kTz5qsBWLwy0gx/yHV5IQBJ8kJ4nMulXyEhpDkcZqje6Y03YOxYkMniJxcVtZEbb4Q2bTBD9j//DCUlJCcnk5ycbHV4QlimpkvodA3bhBAnUWXpV1wcaS1aYDtwAEaOBKC4GL76Ci67DMLCrIzWNwQEFDN1qvOb3KHmE9KaNZbGJIQ3qGmS/14pVVypbW6ltlpvWytEU2Wz2Zg8eTIAmVOmQFwcTJxYtvvMwoWwb59sK1tbO3ZAmzOGEAJyXV4IapaYn2j0KIRoyj74wIzJ3357WdPnn0NEBFx8sYVx+ZgZM8zIx08/dmNomzZyXV4IapDktdaS5IVoJEprszb+/POhW7ey9jVrTIKvdOleVOOMM8zXxUsUQ4cMMUm+QwdrgxLCYjLxTggL9T98GLZsqTDhDmDePJP7Rc21b28+Jy1aBAwdChs20KKoyOqwhLCUXEcXwkIX//EHtGhRoaRdcTEEBUHz5hYG5kMyMzPL/j1kiKkSqO8fggJ6HznC4uhoy2ITwmrSkxfCIpHFxSTt3QujRkG42aV53z4zwvzZZxYH56OGDoU//oCctmdCUBC9jxyxOiQhLCU9eSEsMmzPHsIqrY3PyDCJvlcvCwPzYZdeCs2aQauO4dC/P302b7Y6JCEsJT15IaygNZft2sXmyEhITCxrfu89M4Hs9NMtjM2HxcXB6NHmCghDh3LakSMEainpIZouSfJCWGHhQnoeO8b0jh3LNqNZvhx++63KHDxRS5s2mXLADBlCuMNB12PHrA5JCMtIkhfCCs8/z6HgYL5v166s6b33zEY0o0ZZGJcfeP99uPlmeHfbHuKBd5YtIz4+3mzlK0QTI9fkhfC09evhm2/4Oi4Ou7PCHZhaOAkJ0KqVdaH5g6FDoaQkg7sfm4jd2ZaTk0NKSgpwoqywEE2B0l5yvUop1RJ4G+iLqYt/B7Ae+BSIB7KBG7TWB6t7nMTERJ2VldWYoQpRP3fdZbqbubnQtq3V0fidAwcgOjoeyKlyLC4ujuzsbE+HJESjU0ot1VonVm73puH6l4BZWuteQH9gLTABmKu17gHMdX4vhO/au9eUsb311goJ/sUX4ddfrQvLn7RuDZDr8lhurut2IfyVVyR5pVRz4DzgHQCtdaHW+hBwJfCB87QPgKusiE+IBvP661BQAH/+c1nTjh3w0EMwfbqFcfmZyMhYl+2xsa7bhfBXXpHkgW7AXuA9pdRypdTbSqlIoJ3WeheA86vLsU2lVIpSKksplbV3717PRS1EbeTnw2uvmV1Uyi2E/+gjsz/NmDHWheZvnn46jfDwioX/IyIiSEtLsygiIazhLUk+CBgIvKG1HgAcpxZD81rrdK11otY6sU2bNo0VoxD189FHZrj+oYfKmkr3pzn3XOje3cLY/Mx999mYPDmd0NBQFBAXEED6W2/JpDvR5HhLkt8ObNda/+z8/nNM0t+tlOoA4Py6x6L4hKgfhwNeeAEGDoSkpLLmRYtg40ZZG98Y9u2z0aXLM/yzVy+yHQ5svXtbHZIQHucVSV5r/QewTSnV09k0HFgDfAPc5my7DZCrlsI3zZxpls49/HBZ8RswE+zj4uC66yyMzU/997+wa9cVZJWuSfz+e2sDEsICXpHkne4DMpRSK4EE4CngGWCkUmojMNL5vRC+57nnoEuXKtl81Ciz02xUlEVx+bGhQ+H48Xj2BrQyBQgkyYsmyGuK4WitVwBV1vhhevVC+K6sLFiwAJ5/HoKDy5r37YPoaAjwpo/afmToUIAAjhw5DS453bz+R4+aHWyEaCLkz4sQje35583m8OPGVWi+9lq46CKLYmoCBg0CcHDkSF+48EIoLob5860OSwiPkiQvRGPKyTGbw48fbxK90/Ll8MMPMHKkhbH5uebNoVmzdZSUhMPZZ0NkpAzZiybHa4brhfBLL75oJto98ECF5kmTzHX4Sp170cAGDLjbzHMMuRHOP1+SvGhypCcvRGPZvh3efBNsNjPpzmnHDvjkExg7Flq2tC68pqB0IYPWmCH7zZvNTYgmQpK8EI3liSfM+vjHH6/Q/P77pvn++y2JqklxOIJZtuw1nn0Wk+RBevOiSZEkL0RjWLfOlLL7058gPr7Cob/+1Uy279bNmtCakoCAIrQOYcYMTEnBrl3LknxycjLJycmWxidEY5MkL0Rj+PvfISICJk6scigoCM45x4KYmqDMzEzuvbcHixbBkaPK9ObnzYPCQqtDE8IjJMkL0dB+/RU+/9zUqC+3nazDAeedBx9+aGFsTdBFF5nVc/PmYZL8sWOweLHVYQnhEZLkhWhoEydCTEyF7WQBvvsOFi6E0FCL4mqihgwxKxm+/x4YNswMpch1edFEyBI6IRrSnDnmNmlShXXxYPaniY01RXCE54SEmHkQXbti/k+GDDFJXirfiSZAevJCNBSt4dFHTSa/664Kh5YtM5Pt7r/fdCSFZ/3tb2YlI2CG7Jcto6VclxdNgCR5IRrKl1+aOvVPPAFhYcCJGdxS/MZ6u3ebRQ+lS+kSDx60NiAhPED6FEI0hOJiSE2F3r1h9Ogqh8eOheRkaNHC86EJ47zz4JRTYOZ3AyEmhjMPHmROu3ZWhyVEo5KevBAN4YMPzH7xaWkQGFjlcHKySfTCOhdeCJmZUFAYACNHcuaBAyitrQ5LiEYlSV6I+srPN1XtzjoLrryywqGSkjA2b76TbdusCU2ccOGF5r/qxx/NN62Lijjl+HGrwxKiUUmSF6K+XnnF1Kl/5pkTxdKd/vjjIrZvHyVJ3gskJ5uZ9rNmQcaxY8QD7yxdSnx8PBkZGRZHJ0TjUNrPhqsSExN1VlaW1WGIpiInx1yHHz4cvvmmwiG7HVq0+IOQkP0cPtyncv4XFhgxAtaty+DgwRTy8vLK2iMiIkhPT8dWNgVfCN+ilFqqtU6s3C49eSGcal3LXGu45x7Te3/11SqH09PBbm9P167vSoL3Es8/D5BaIcED5OXlkZqaaklMQjQmmV0vRF198QXMmGEyR2xshUPHj8O//gUtWiynZculFgUoKuvfH3buzHV5LDfXdbsQvkx68kLUxeHDprLNgAEMnz69yghAfj5cfDF07fq29OK9THR0rMv22HIf1GSHOuEvJMkLURcTJ5rqKunplLjI4jExMHJkBmvXvsOCBQtkcpcX6d07DYio0BYRHk5aWpo1AQnRiCTJC1FbixfDG2/AffdBYpV5LmRkQFpaBikpKdjtdgBycnJISUmRRO8F7r7bBqQTHBwFQByQfvnlMulO+CW5Ji9EbRQVwZ13QqdO8M9/Vjm8e7c5rLX7yV2STKw1YgQEBNjo2LGI+Pj3ySwuhlWrzERKubYi/Iz05IWojRdegN9/N7PpXexi9vTTUFAA+fkyuctbRUfDmWfCgQNnmoZbboE1a+C336wNTIhGIEleiJrassVsPnPVVVUq2wHk5ppR/DFjKk7iKs9du/Csiy4CrUNwOILg+ushONhcZxHCz0iSF6IGkpOS+CUx0dSlf+UVl+eUjt4/9hikpaUREVFpcldEhEzu8hKPPQZnnDGegIBi07W/+GL4+GMoKbE6NCEalCR5IYCMjAyWLFnidib8yD17GHTwoNmApnNnl4/RpQs8/LBZMm+z2UhPTyc0NBSAuLg4qajmRQKcf/nKCn7ecgvs3Gl2sBHCn2itveYGBALLge+c37cGZgMbnV9bnewxzjjjDC1EbUyZMkVHRERooOwWERGhp0yZYk7YsEEfDwzUK5s317q4uMp9Q0NDNaDj4uJO3McpKSlJJyUleegnEbXRrdvrOjw8R5eUaK3z8rRu1kzr228/6f+pEN4IyNIucqK39eQfANaW+34CMFdr3QOY6/xeiAaVmlpNmVO7HW66iSKlePK00ypsI5uRIcvkfFlIyD7y82PNrnTh4XDddWR8/DEp48fL/6nwG16T5JVSnYFLgbfLNV8JfOD89wfAVR4OSzQB7ma85+bmwiOPwLJl/LtnT/aGhVU4Xu2HA+H1YmJ+IiAgnylTnA233EKq3U5efn6F8+T/VPgyr0nywIvAI4CjXFs7rfUuAOfXtq7uqJRKUUplKaWy9u7d2+iBCv/idiZ8TAy8/DI88ACLYmKqHK/2w4HwegsXzsJmC2faNLPskaQk3P3Pyf+p8FVekeSVUpcBe7TWddrJQ2udrrVO1FontmnTpoGjE43N03XCKz+fy5nw4eGkHT8OAwfCv//t8nE6dZJlcr5u9GizDcGMGUBgILHNm7s8T/5Pha/yiiQPnA1coZTKBqYCw5RSU4DdSqkOAM6ve6wLUfirKjPhY2NJ79wZW2AgfPopONsr69nTRQ10WSbnU4YNg8cfh4QE833ahAmV/kfl/1T4Nq9I8lrrR7XWnbXW8cBNwDyt9S3AN8BtztNuA6ZbFKLwczabjcGDB5OUlES2zYZt40azIXz37m6X191xh41rrpFlcr4sMBD+8Q845RTzvW3CBNI7daKDs7yt/J8KX+ftteufAaYppcYCucD1Fscj/NwZBw7AM8/AuHFw001uZ9CD+WBw8802kpMnA5Apa6x9ktbw/fem6N3w4Qrbvfdie/RRbho0iKk//2x1eELUi1f05MvTWmdqrS9z/nu/1nq41rqH8+sBq+MT/qu13U7qunXQuze89BLgfgb9ffel4nC4epSKMjMzJfn7gIcfNlXwALj5ZgBG7JGrg8L3eV2SF8ISx47x9KpVhJeUmOvwzol47mZVHzyYKxuW+QmlzAS8RYtg82YgNpYVLVpw0e7dUuZW+DxJ8kIUF8ONN9L92DEe790b+vQpO+RuVnXHjrGS5P3IzTebZF9a8+brjh3pnJ8PX39taVxC1JckeWGpk9WM98jz3XcfzJzJSz168HN0dIXzXS2vCw6O4D//kdnW/qRLF0hOho8+Mtfof2jThm3h4Wbv4LIC90L4HknywjKeLgvr8vluv52MN9+ERx7hm44dq9yn4vI6RVBQHJMny2xrf3TLLZCXZ/apcSjF1C5dYOlSmDPH6tCEqDOl/exTamJios7KyrI6DFED8fHx5OTkVGmPi4sjOzvbc88XEUH20aMntiZzITk5mcOHT+eVV17hnHOqHgOZXe/rCgvNkrrAQPN/GuxwMHvzZujZE+bNszo8IaqllFqqtU6s3C49eWGZ+paFrW2lPLfPl59fbYI/csR8bdHi9yoJXviPkBCT4EtKQOsAigIC4KGHYP58kKV0wkdJkheWcVszvpFKiNbl+fbuNSvqtm+/1u05skzOf6xdC507w8MPzzP/pykp0Lq1uTYvhA+SJC8s47JmfCOWEE1LSyMiPLzGz6c1jB1rEn3LlisaJSbhXbp3h6IiTuxMFxVlJmZOnw6rV1samxB1IUleWKZKzfhGLiFqO+880ps1o4vz+5M93+uvw7ffwn/+A1FRmxslJuFdgoPhppvgm2/MxjWASfIREW43KhLCm0mSF5aqUDM+O7vxZq1nZ0NSEraCAi5PSDjp8/3+u7kce/HFcP/9jROS8E6jR5utZ7/4wtkQHW2G7T/+GLKzPb5rohD1IUle+L/Nm+G88+DgQZgzh9UtWpz0LqtXQ/v28P77SNGbJmbQIOjRAz78sFzjQw+ZyZnPPWdZXELUhbdvUCN8iCeXkpUWtbHb7cTHx5OWlua6V75+vdlP1G43y6AGDKjR4990E1x99YldZmViXdOhlJlnFxNTrrFzZ9PFf+cdWg0YwMGQEMviE6I2pCcvfE6Ni+isWQNJSaZs7fz5NUrw330Hn3xi/u1mG3nRBFx7rXnrVPDII2C3c+327ZbEJERdSJIXPsfdznCpqaknGlauNHVKAwIgMxNOP/2kj7ttG9x2mxmRLS5u2JiF79m7F+69t9yk+p494dpruWrnTiLlDSJ8hCR54XNOWkQnM9Mk+NBQWLAATjvtpI957BhccYVZPvXJJxAkF7KavIAAMyejwqT6Rx8lqqSEK3futCosIWpFkrzwOdUWtXnrLRg50sya++EHM4PqJEpKwGYznf9p0+DUUxs6YuGLoqPhzjvNpPotW0xbxtq1dAgI4K6tW4nv3LnRN1QSor4kyQvL1bZinNsiOqeeCnfdBRdcAIsXQ9euNXq+WbPMuuiXXoKLLqrLTyD81UMPmVK3zz57Yi7IHw4HGsjZsaNRN1QSokForf3qdsYZZ2jheVOmTNGhoaEa0HFxcXrKlCmee77OnfWU3r21Bq0ffljr4uJaP96iRY0QpPALd96pdUiI1p06xWmgyi0uLq7s3KSkJJ2UlGRZrKLpArK0i5woVx5Fvbmb7Q40XvU6m43JkycTe/w4Hx46BJs2mQuot91W48fIzITISDjzTBgypFHCFH7gkUfMDnXvv1+/DZWEsIIM1/sBqytw1WS2e2PEOGj/fl5fvtxsEzd/foUEf7LnW7fOrIO/5x5To14Id7p1g3ffrWYuSFSUhyMSouYkyYt6q++WsbVWUAAPPcR/Vq1iV3g4/PorDB1a47vv2weXXWa2Fp02TSraiZoZNy6NkJBKc0GCgkg7ehSWLrUoKiGqJ0le1FtjbhlbpUf++++m7ugLL/B1x47cm5AAtXieggK45hrYvh2+/hri4+sdomgili61ERSUTmhoGODc4Oj117F16ADjx0txBeGVJMmLevPIlrEOBzz/PCQmwp49MGMGL/bogT0wsFYP89prsHAhvPeeXIcXtfPoo5CXZ6NTpxdObHA0fjy8/DIsX07GrbeyZMkSFixYQHx8vMy6F15BkrwXsfrael019paxbQoKYMQIePhhsy3c77/DJZfU6bEeeABmz4ZRoxokNNGEDBpk3obbtt1ISUm52vXXXktGQgIpn3xy8lLLQniaqyn3vnzz5SV0dVl+4+mla9VxF3+dY3Q49L969dJHgoK0jozU+u23tXY4Tnq3ys/3/vtT9H33ab1zZy1/ICEqmT/frNTs3n1Shfa4Tp1OurxOiMaELKHzP1YsXautOsf4++9w332krlvH6mbN6LNsGXTvXqfnGzs2hZISGDTIxi231P9nEk1XUhK0bJmFUo4K7bluytzK8jphNRmu92E12qjFYrWO8dAhM6Y+YAAZWVm0Cgqi79GjxI8YUaOhT1fPV1KSR6tWqZLgRb0pBf36/YWOHb+p0N6Yk0+FqA+vSPJKqS5KqflKqbVKqdVKqQec7a2VUrOVUhudX1tZHas3acylaw01P6DGMTocZjHyqafCK6+QkZxMisPBIeeM5Zpe43T3fIcOSY9KNIwFC+Yzf34mn39utkcAN5NPw8MbdvJpJb46h0d4llckeaAYeEhrfRowGLhHKdUbmADM1Vr3AOY6v/dLGRkZtZ6Z6wu9hxrFuGSJmeo+dqzZUCYri9RNm8jLz69wn5qMUvjCayJ8X2GhmW1/xx2Qn+9i8qlSpLdvj+2aayyOVDR5ri7UW30DpgMjgfVAB2dbB2D9ye7rixPvpkyZoiMiIipM2ImIiDjpBLWa3K+utbQbqgZ3tTEuWaL1xRebmUzt2mn94YdlE+uUUi4nMimlqn2+t96aosPDa/9aClFb8+aZt+6ECSfayn5vvvpKa6W0vv56rUtKGuX5pU6+KA83E++8pSdfRikVDwwAfgbaaa13ATi/trUwtEZT12vrjb10rSG4jPGRR7BlZMDgwfDLL/D007BxI4weXVZ+ri498k2b4PnnbQwc6N2vifAP559vBp+efRZWrKh08KqrzEb0n30Gjz/u+eCEKOUq81t1A6KApcA1zu8PVTp+0M39UoAsICs2NrZhPx55QF17raWq+0TvLcvykpKS9F0DBpzouUdHa/3001ofOeI2htqMbvz0k9YxMeZhFy6UXo7wjAMHzCDUwIFaFxVVet85HFrfcYd5vzfwSJI3LZ0V3gE3PXnLE3tZIBAMfA/8uVxbkxiuj4uLq9ca24ZM8nW9dOBWUZHWX36ps1q2rFFyrxxLTf6QTZ2qdWio1j16aL1hg2mTJC88Zfp0rT/5xOT0Ku87u13rpCSzV+1PPzXI8zX476jwC16d5AEFfAi8WKn9WWCC898TgP+c7LF8McnX95e2rkVoXN2vvh84yuzerXVamtZdumgNeldoqH6ja9caJfea/GylDh0ynxvOOUfrfftqfj8hGsN557l43+3bp3X37lq3aaP15s31fo4G+x0VfsVdkveWa/JnA6OBYUqpFc7bJcAzwEil1EbMRLxnrAyysTTGtXV3RWjqugStRsvytDYz5UePhi5dIDUVevaEr7/m5rPOYmpsLDRrVuufxZX8fCgpgRYtzL7ws2dDdHSDPLQQdfLGG9CqVSbz52dWPBAdDd99ZzawOeccFxfwa8fjuz4Kn+YVSV5r/aPWWmmt+2mtE5y3mVrr/Vrr4VrrHs6vB6yOtbHYbDYGDx58YuOLek4Uq+tkvjotQdu8Gf71L+jb1yyFmz4d7rwT1q412ffKK3E04H6ua9aYOuL//rf5vm9fCAtrsIcXok60Nm/9995zcbBnT8accgq7DxyAc881vxd1JMtERW14RZIX9ZOZmUlmZmaFtrp+2q/xjnK7dsFLL5kZ8t27w9//bnosb74JO3aYnbl69ao2xtrS2tTLSUyE3bth4ED35zbE8wlRG3fdBcnJcPfdsGhR1ePZkZHcM2AAdOtmNlj68MM6PY9Hdn0U/sPVGL4v33zxmnyphryOfLLrdtVdr3d7bPNmrV95Revhw7UOCDBTOhIStP7Pf7TOyWmQuN05fFjrUaPMUw4bpvWOHY36dELUyd695vJ7TIzWmzZVPFb2+33okPkdAjNvxeGo9eRZmV0vKkM2qGla0tLSSElJqTBkX/pp/2SbxthsNiZPnkyQw8Gcxx+HGTPMcPy6deaBevQw19tHjYLTTvPIz7NmDXz5pQljwgSo5TbyQnhETAzMnAlDh8L8+XDKKS5OatHCnHTHHeb3aNs2ArWmpBaXtEp/RwEZsRLVc5X5ffnmyz356jTkene3vfzYWK2XLdP6pZf0gpgYfTww0PQ2QkK0vuACrV98Ud985pkem7VeVKT13LknvpetYoWvOHCg4vcufxdLSky5PNA/Rkfri845x+VjufvdlxUkojy8eQldQ94kyZ/8fm6L75jL3rp0ydv0Dh3MIuCjR+sdR21lZZkCI6D1L780+tMJ0SjmztV65Mjql8hOue02Hev8/Ytr27Zml860JHlRkbskL8P1TcXx47ByJSxbRmxEBDnHj1c5JTYqCt56C849l5tGjwbgiiuu8GiYx46ZOXwvvwxt28Knn5qJdkL4osWLYfbsVMD9SpeUzz4rO5qzZw8pY8aYNaLh4dVeVvO00h3v5PKAj3GV+X355o89+VpNssnL0/q337T+9FOtn3xSz27bVm+NiDgxUQ70lMhIHREQUKcNcRpzsk9xsdZ9+pgw77pL64MHG/ThhfA4h0NrcF+22u2ls8BAHde2rVcVvZGRA++G9OR9k8tJcuPHw9at2E47DXJyzG3jRjMxLjvbpHKnvqGhbImMJP7hh82aswEDsHXpAh9/zNixY7Hb7cTFxZGWllZt7+Bkk/XqY88eaNPGTKb7298gNtZMXBLC1yll1q/n5uZUOWba3Sx1LSkxvxiujtWg6I2v9Lp9JU6f5irz+/LNZ3vyhYWmFOzq1eZCXkaG1s8/r+OaN3f9ab7c9XMdFaX1gAFa33ST1o8/boq5L1+u9fHj1T5lbT6ZN0YpzUOHtJ44UevwcK0/+KDODyOEV5syxf32x25/r7p0cf+7X4PfuYbudTfWKJ6MDjQcpCdfN8nJySitmT9njilLWXorKjI3ux0KCirc/vrAA4Q6HDz5yCPmIvPRoxW/HjkCBw7AwYPm64ED5pgL7j6z5yoFS5dCfDy0bFm2RWtjachSmgUF8Npr8NRT5kcfNcpU+xTCH5WOdI0dOw67vYC4uDgeeSSNm2827S6Xuj79tDk2bhx5BQUnjoWEkPbEE/WKp7a955qM4lX3mNJbt5Yk+eps3szcBQsIBAgJqfHd/l36jzFjTjQGBJi67VFR0Lw5tG4NnTrB6aebf7dqZb5GR0OHDtC+PbRvT2z//uS4SKSxsbEwYEA9frjaiY2NJSfH9ZBjbV12GcydCxdeaLaS9+CPIYQlyq9rnz49k4QE+OknePfd0g8A7i+dlR0LCSGtsBDbP/5hOhdjxrj8u5SRkcGSJUuw2+3Ex8ef9FLcyVRXIru++2s0ZJzCNUny1Wndmn/3a8+qTnaGDUkiMjCMyMBwIgPDyXpnFkElgaQ8+mfyQwKIDG9BeERzAsIj+NODD1IYEMA706aZpN6smSmurlStP9WmPfWU26I29VWbT9bVFdc5meJi+PpruPhiiIw0xWxSU+H88+sQtBA+rnlzSEmBiRMhNxe+/trG4MGuC9tUKHozfz7MmgVPPGH2hkhLM79Mt9xStvFTfefOuPr71Bgb4tQnThkZqCVXY/i+fGvIa/JTpkzRQRFB5lpYCzTXoHnc3BIvTtRJSUl60uJJZW08jg6+PljT/MS1s/H/Gq/Pf/98fWnGpfqGz27Q7e9srzuO66iPF5rr5T9k/6Bf/+V1/cGKD/Rnqz/TMzfM1AuyF2iHw6G11vpA3gH9xjtveEUJy9pelzt2zFTB7drVTB14+WUPBSqED5g6VevQUK179NB60KCba17W1uHQetYsrQcPNr9YERFajx6t9dy5Oi42ts7lrF0+l26cEtn1meMj1/FdQ4rh1I6rPd7DwsP0k688qVMnpZa9cTt07qBvfeJW/czCZ/RVE6/SQaFBFe4TEhaiTx1/qh7w5gDd/tb2ZR8AusR20VOmTNH3z7y/wocEHkcHPBFQluTHTh9b4Vj4v8J1/IvxZXE+OudRfe675+oLP7pQXz31am37wqb/8r+/lB2ftmqafmHRC/rNX9/UH674UH+++nOduTWz7PjWg1v1lgNb9K6ju/ThgsO6qKSo2telJr9gJSVa//3vWrdubd5hgwdr/cUXZomcEOKEH3/UOjpa6+joH2pVu15rbZL9okVa33mn1i1aaO0sqOMqeSqlXP5Nq1CUx01Cru5+dT3mtiCXUtW+XjIB0D13SV6ZY/4jMTFRZ2Vl1ftx4uPjXV6Djo6OJj8/v8qwdXp6OqmpqS7vU3qdzdVw96tvvMrF11zM8cLj5BXlcbzoOAXFBSTHJwOQmZ3Jqj2reOHVF3AEOLj+5usJUAH8e6S58v/kgieZt3Ue+cX55BXlkVeUR5uINiwZtwSAER+OYO7WuRXiOb3t6az800oABr89mJ93/Fzh+Dmx57Dw9oUAXJJxCduObCM8KJyI4AhWLltJ8yPNyX4/u+z584vyCQ8Op/B4BB1iwukV04unU4YTGQkjxmWS0C+IyJAIwoPCCQ8Op1VYK1qEtajNf4cQfmvzZjN3Njoatm2D0FBTCKpW8vPhm2+IHzOGnHIT9UrFxcaCUrX++5Seno7NZiMjI8PlvAF3fyfj4uIA6nQsOzvb5Y9YOsTvLsb68IdLAEqppVrrKqXDJMm7ERAQQG1em7i4OHJzc13eRynlduJadW/qhlBYUkh+0YkPAMeLjhOgAujbti8A/9v8P3Yd3VV2PK8ojw7NOjBu4DgAHvr+IbIPZ5NXlFf2OGd1OotXLnkFgFNe6kHOoRxKKCp7zlF9R/H+5R8TEgJRT0VxvKhidb3xA8eTfnk6WmvC0sIIDQwlPDi87EPAuAHjeGjoQ+QX5XPD5zeUtYcHmdslPS5h5CkjOV54nPdWvFfxeHA4vdv0JrZFLIUlheQcyiEsKIzw4HDzNSicwADZ3UZ4p0svhSVL4Pnn4bbbar9oJiMjg5Tx48nLzy9riwDSmzVj9NGjuPqLVtO/T64Sobu/k8oZuLtjH330Ua0TdnUfKOrzN9TdBxhf4y7Jy8Q7N9y96d3Jzc2tdgZ6Y0xeqYmQwBBCAkPc9pwvOOWCau///IXPu2zPzjbzf/6YtpGSPOjdt5hbbs/nupvyaN0yqGzS7/9G/4/jhcfLRhryi/LpEd0DgBJdwkNDTDLPL3beivJpE9kGMB9Qth/ZTkFxwYlzivJpH9WekaeMZG/eXu77731VYnvxwhd5YPADbNy/kb5v9K1y/O3L32bswLEs27WMqz+9mvAg8wGg9MPA40mPkxSfxKo9q5i0eFLZsdKbrZ+Nbq26kXMoh4W5C8s+PJQe79euH81Cm3Gs8BiHCw5XuK98wBDVef55GD8ebr8dpkwxVaZd7mTnxonles6k1bkzaZddhu3oUVI/+YQch6PKfWI7dKjz36eTrbpxd6xKnJWSqy9MAKwrT48aSE/eDXdDQ+Hh4ezfv7/K+Scb8qpuKL8xe/INac0aKCyEhAQzrHj66XDDDTB2LAwa1OhL9asocZRwIP9AWfIvKC4gvzif2BaxdGzWkYP5B5m5cWZZe+k5l/e8nIT2CWzcv5Gnfnyqwn3zi/L55/n/JCk+iczsTG796lbyi/PLPmiU6BLmjJ7D8G7DmbZ6Gjd+fmOVuBaPXczgzoN5d/m7jP1mbIVjQQFBrLhzBX3a9uG95e/x1I9PVfgQEBoYSsY1GbSLasf0ddP5Zv03pj0otOycvwz9C+HB4fyy4xfW7F1Tdr/S85LjkwlQAfxx7A+OFR4rO176GCGBNV8OKjzP4YD0dHjkEbMy5ZtvYMSI2j2Gq0SSUdp7Lr/uHkgHUpUix0UuONnfp+qG0MF1DYDyvXWXcdbh0kBd/4Y21uiAO405aiA9+Vpy90kT3BSvKPef5e4/sbGWwjUWreH33+Hzz81t7Vqzxv3bb6FLF9i921w/tEpgQGBZr9+VVuGtsPVz/wvUI7oH7135ntvjyfHJ5D5YsZdQ7ChGYT7NXNrjUjbcu6HsA4K92E5BcQGnxZwGwNAuQ3nrsrcoKC4oO1ZQXEDbSHPBtX1UewZ1GlTWXnpOaW9/66GtfL/5e+wlJ+5b7Cjmz0P+DMCnqz7lhSUvVInb8ZjprT02/zEmL5tc4VhkcCTHJh4DIOXbFL5Z/w2hQaFlHwI6NuvI97d8D5j5Fsv/WF52LDQwlM7NO/NY0mMAfPTbR+w6tqvC8fZR7bm4x8UA/LLjFwqKC8qOhwSG0CK0BZ2adwLgWOExggKCCA0MLRveFaakxl13weWXw+OPmw/QYD5kx8aaVbl1YRs9GgICTvx9io0l7e67sbVpA1OmkJKZSV65RB8BpDkcplpV797m1qMHdO1atmTvZH/zTnassup61jVZxlvbXnJNRgcaqudtxagBSE/+pGrzSbO6+9Tkft7A4TB/ZACuugqmTzffJyXBddfBNdeYOj3CGiWOEgJUAEopDhUc4mD+wQofAuzFdpLikwCTZNfvW2/anecoFA8NfQiAd5e/yy87fik7Zi+20zy0Oe9f9T4A9//3fjKzM7GX2LEX27GX2IlvGc/isYsBOPvds1m0bVGF+AZ1GsTP48xEzv5v9mfl7pUVjg/rOoy5t5qJoKe8fApbDm4BIDggmNCgUK7seSVTrplS9vhH7UfLPiCEBoZyUfeLeOTsRwAYO92MkpQ/fnbs2VzR8woc2sErP79SdrkqJDCE0KBQerfpTd+2fSl2FLN42+IKx0ICQ4iJiKFlWEsc2kF+UT4hgSEEBQRZ/iFEa+jbF3btgvvvh/vuMxP16qK6v0/jxo6lwG4nLjqatMGDsYH5dLF1a8UHiY421Ta7doX4eCZ9/TX7QkNJe+89U8yrXTsIDq72+Vw5Wc+6ur+hdfn7Wp/nq63GHjWQiXcNrK6f7rxxFueWLfD99+a2eLG53h4eDp98YqrtXnVVHWb7Cr9X7CguS/6lXwNUALEtzPXYZbuWcajgUIVzYiJiGN5tOACTl05mX94+7CV2CksKsRfb6d2mN2MHmuQ9dvpYDhYcrPD4F55yIX87728A9Hy1J3lFeWXHCksKufOMO3nxohcpKC4gPC28SsyPnvMoTw1/in15+2jzbNVRoLRhaUw8dyLZh7Lp+lLXsvbSDxHPXfAcKWeksGH/Bi77+LIKHyJCAkOYeO5ELup+Eev3refv8/9e5fjYAWPp374/mw9sZuqqqVWOX9T9Ijo178SOIztYtmtZhWPr1wbz5Vu9mfFVFBEtj3Lz2AP86c4QYjsFn/iwUs9REbd/n44fNxtgbd5s/kBs3Vrxq7N3WkYpiIkxCb9DB/MHJCbG3KKjK/67VSuzvCAigoDAQLeT9RzO+QTuOl51mXlf38sN1akcZ3WTFB0u5krUlgzXizJam9/BWbNMj2DTJtMeF2cS+tGjJsmPGmVpmMLLBQUEERQSRCSRLo8P7DCw2vuPP2N8tcffufKdao+vv3e922OhgaEceOSA+fDg/ABQWFJI6/DWADQPbc6c0XMqHLMX20lonwBAi9AW/HvEvykqKapwTu82vcseP7FjYll76S1AmWGwY4XHWLVnVYVj9hI7F5xyAf3b92f9/vX8bf7fqsQ999a5dGreiR9zf+SmL26qcvznV37mmScHMf71abzdbBxvf1zx+Oq7V9O7TW9e++U1JsydQEhgCMEBwQQHmg8CC29fSMdmHXln2Tu8vfxtggNMe3BgMMEBwZQElhBYEsi01dP43+b/VbhvcEAwadenEaACmL15Nr/v+d0cDwgk5FgBYUfzuVn1g127WL5rGX8cyCV4/yGC92YTsu43wvcdJmGrmfW/KwrsQRBcAsEO8zWUQGLdzA2IjYyEv/4VmjXj2u3byQsMhE8/hYgIiIwk9eGHXZfenTix2oRc3eWG+Pj4OpfzdVWytyFLg9eG9OT9nMMBq1fDjz+a208/waRJcPXVsGwZPPaYqSF/4YXmcptcGhWi8WmtKXYUV/gAUFRSRJvINoQFhXEw/yCbD24uO15UUkRhSSFnx55Ny7CWbNi/ga+X/URUi0IcFPHf/xUye24RV3Qex+03RRPWcwHfbfqaIkcRRSVFFDnM/V+5+BVahbciY2UGH678sOyxS4//ePuPRIZE8q8f/sWbWW+a4+UeoyC1AKUUKd+mVJnvERUSxdFHzUZbo74YxdRVUyscbx/Vnl33ZsP+/Vz+7Si+++OHCse7O1rx+E8DzdyAkpITB4Kg2UUwtJVi1kcmX91wPayPNh8Qghzw89vuX+tbrwskSAUx4HA4925tA6GhpPU9QF5oAMGBwQQFBLMtdztdDgbzt77XQGgoH0RtZsxzs10+ngLmvfUoQcGhvPPeB2gdwIN/foh2ke1oH9mOKXPnkPLU0+SXG90IDw/jthtu4MNpn1Vc3thA6/xBhuubhOJiWL8egoKgZ0/YuRNOO81segdm1Oycc0zv/dxzrY1VCNFwsrLg7bfhs8/Mzo7R0WCzwUsvNc7zlU4SLf0AUFhSSIkuoVurbgBsObiFPcf3lH04KCopIjAgkBHdzDKBeVvnkXMop+xYsaOYZqHNuGPAHWRkZDAmZQzFecU0a9uMwbcOpltSNzo378zfBpudPf8y71E2HtxEcXEhRUV2Fjy+AvvBoipxBrUIoNMDURTrEobnt+eD7WeC3U5cr/+yI8ROiTqR/2xbopgyryXY7USk7CX/VeBw1Z89Fsh9HFgJzHWe0wIu6QIzVpnj21y8Zi1C4TU7/FXBDg1xHTqQ9uyzjT673vIytA1989n95OvotddMVcuzztI6LMyUkb3jDnPM4dD6//5P6w8/1HrLFvO9EMJ/2e1af/ut1qNGaX3NNSfaR4/W+qGHtJ45U+ujR62Lr6ZqW2b2ZCV73XE4HLqwuFAfLzyu8wrzytq3Hd6mJ6VP0mHhYRUfMzxcf/TSizr1sT/p0NCQimXPQ0P0lL/+1X3JXtB60iT9XM84PeHM9lrv3l3Xl8clpKytb1q1yixd27zZ9NLXrjXL1z77zBw/9VTYtw/69YOBA81t8GDo3t3auIUQ3qGkBC66CH74wdS5CAqCM86AP/3JVNXTGoqKarWbtldqjNVLDV3OtzFroshwvZdat86sUNm+3dxycswv5eefm+PDh8O8eebf7dubparnnmvWz4IZim/WTK6lCyGql5cHixbB3Lnm66hRZj3+tm2mql7fvqaT0LevmZ8zaBC0cV+GwqdkZGSQmppaVpm0vh8AqpspX5eSvQ1BkrwHFBfDwYOwf7/pYQcEQGYmzJ8Pf/xhisfs3m3OWbvWJObbb4f33zf3Dw01vfTevc36dIAVK8zjlKs/IYQQDWbnTnj5ZVi+HJYuNX+/AKZOhRtvNNf7//Y3k/jj46FTJ+jc2VS+rGthHk9qjI1tarK+viE/VNSETyd5pdRFwEtAIPC21voZd+c2dJLfssVsGHH4MBw6ZL4ePgxPPmk+5b7zDjz1lPnFOFxuksaePeb43/8OaWnm3+3amVv79jB5MoSFmZ58fr75pYmJkR65EMI6WpvLf5s2maQeE2M6Kg89BBs3muW1pRYtgiFDzKhjWpr521a6/D0mxowSxMSYAj67d0OLFubWvLm5ZOApjVGEpjF3xKsrn03ySqlAYAMwEtgO/AqM0lqvcXV+Qyf5d96BceNOfB8SYt6oCxeaGezffWeKxkRHQ+vW5mt0NFx5JURGmgQeHOzZN7UQQjQ0rU1HZscOc2lx6FAzujhrFrz2munY7NtnbkeOQG6uGZl86ilITa34WBER5nh0NLz+ulnyHhlpbs6l77z8svm7+f33Zm5SWNiJW0SEWQYM5nLngQPmb3NwsPkaGnpiXlJjFaGxordeHV9O8kOAx7XWFzq/fxRAa/20q/MbOskfOAB795rE3rKleYMJIYRwr3SCX0CAGQFYterEKOiRI+brU0+ZhPzWW6ajdPz4iVt+vun9K2V25Xu70jr4qKgTowqjRplLC+V16GAuQwBERMSTn+++J3/++abTFhho4g0IMBMTf3Au4x8+HFauPHFMKTj77BOTn88/3xT9U8rcAgLMfd580xw/91zzwaf0OMCECTB6dP1f5/J8ueJdJyouO9wOnFX+BKVUCpACDV89qHVrcxNCCFEz5Wfq9+hhbu7ceae5ufP66/DCC1BQcOJWWHji+N/+ZnbCLCw8cSv//Pfck8ZLL6VQVHRiaD0k5MTGNrfcYkYlHA5zKykx8w5KjRxpRm21PnFOz54njp95phmxMAuYza386qbTTjOXekv701p7Nqf4Qk/+euBCrfU45/ejgUFa66obieN7s+uFEEI0Lm8bWm8MvtyT3w50Kfd9Z2CnRbEIIYTwMTabze+Sek0FWB1ADfwK9FBKdVVKhQA3Ad9YHJMQQgjh9by+J6+1LlZK3Qt8j1lC967WerXFYQkhhBBez+uTPIDWeiYw0+o4hBBCCF/iC8P1QgghhKgDSfJCCCGEn5IkL4QQQvgpSfJCCCGEn5IkL4QQQvgpSfJCCCGEn5IkL4QQQvgpSfJCCCGEn5IkL4QQQvgpr9+FrraUUnuBHCAG2GdxON5GXpOq5DVxTV6XquQ1qUpeE9eseF3itNZtKjf6XZIvpZTKcrXtXlMmr0lV8pq4Jq9LVfKaVCWviWve9LrIcL0QQgjhpyTJCyGEEH7Kn5N8utUBeCF5TaqS18Q1eV2qktekKnlNXPOa18Vvr8kLIYQQTZ0/9+SFEEKIJs3nk7xSqqdSakW52xGl1P8ppR5XSu0o136J1bF6klLqQaXUaqXUKqXUJ0qpMKVUa6XUbKXURufXVlbH6WluXpem/l55wPl6rFZK/Z+zrUm/V9y8Jk3ufaKUelcptUcptapcm9v3hlLqUaXUJqXUeqXUhdZE3bhq85oopeKVUvnl3jNvejxefxquV0oFAjuAs4DbgWNa6+esjcrzlFKdgB+B3lrrfKXUNGAm0Bs4oLV+Rik1AWiltf6rlbF6UjWvSzxN973SF5gKDAIKgVnAn4DxNNH3SjWviY0m9j5RSp0HHAM+1Fr3dbb9BxfvDaVUb+ATzOvWEZgDnKq1LrEo/EZRy9ckHviu9Dwr+HxPvpLhwGatdY7VgXiBICBcKRUERAA7gSuBD5zHPwCusiY0S7l6XZqy04AlWus8rXUxsAC4mqb9XnH3mjQ5WusfgAOVmt29N64Epmqt7VrrrcAmTML3K7V8TSznb0n+JswnyVL3KqVWOodXmsxwo9Z6B/AckAvsAg5rrf8HtNNa73Keswtoa12UnlfN6wJN9L0CrALOU0pFK6UigEuALjTt94q71wSa7vukPHfvjU7AtnLnbXe2NQXV/b50VUotV0otUEqd6+nA/CbJK6VCgCuAz5xNbwCnAAmYP+jPWxOZ5zn/+FwJdMUMm0UqpW6xNirrVfO6NNn3itZ6LfBvYDZmWPo3oNjSoCxWzWvSZN8nNaRctPnP9eC62QXEaq0HAH8GPlZKNfdkAH6T5IGLgWVa690AWuvdWusSrbUDmIwfDhtVYwSwVWu9V2tdBHwJDAV2K6U6ADi/7rEwRiu4fF2a+HsFrfU7WuuBWuvzMMOQG2ni7xVXr0lTf5+U4+69sZ0TIx4AnWk6l8NcvibOSxf7nf9eCmwGTvVkYP6U5EdRbqi+9AV3uhozBNdU5AKDlVIRSimFmauwFvgGuM15zm3AdIvis4rL16WJv1dQSrV1fo0FrsH8HjXp94qr16Spv0/Kcffe+Aa4SSkVqpTqCvQAfrEgPiu4fE2UUm2cE8JRSnXDvCZbPBmYX8yud1432wZ001ofdrZ9hBlW00A2cGfpNZOmQCn1BHAjZphxOTAOiAKmAbGYhHe91rryBBK/5uZ1eZum/V5ZCEQDRcCftdZzlVLRNOH3ipvXpMn9TVFKfQIkY3ZV2w38A/gaN+8NpVQqcAfm9+v/tNb/9XzUjas2r4lS6lrgSczrUQL8Q2v9rUfj9YckL4QQQoiq/Gm4XgghhBDlSJIXQggh/JQkeSGEEMJPSZIXQggh/JQkeSGEEMJPSZIXQggh/JQkeSF8gHObU62U2ujm+Cbn8cc9HJpLSqlOSqljzgIg5dvbKaVeUEptUEoVOM9ZqpR6SCnVohaPf53z5z3DzfFE5/EblFLhzq1BPV43XAirSZIXwncUYDa7SCzfqJQ6E4hzHvcWfwO+1VqXVfdSSvXCFCC6AngVU4r6WuA74K/Otpr6DjiK2ZTKlZsw24F+p7XOB14B/lnLn0EInydJXgjfcRyYR9XEdpOz/bjHI3LBuQHHbcC7lQ59DOwDBmqtX9Zaz9daf6+1/gfQHZhZ0+fQWhdgqozd4CxRXP75FXADMF1rnedsfh+zs9zpdfiRhPBZkuSF8C1TKZfYyiW0qZVPVEoNUUp9o5TaqZQ6rpRaoZSyVTqnpVLqbec5BUqpXKXU5HLHOyulpjmHu/OVUpuVUifrEd8A5GM+eJQ+ThIwAJigtT5S+Q5a6yNa6/LbRKOU6quUmqGUOuq8faaUal/ulE8wZUSHVnq4szEbpZQ9ntZ6G/ArcOtJYhfCr0iSF8K3fAm0A85xfn8u0Ab4ysW5ccBPmPr8lwNfAO8ppUaVO+cF52M9CFwITKTi9qAfYhJmCmZ4PQ0IPUmMw4FftNYl5drOw9Tvnuf6LhUppbo7Yw8DRgNjgD7At+V67rMxIwOuRjYOAP+r1L4IsxOhEE1GkNUBCCFqTmt9SCk1C5PIFjq/znK2Vz63rHfvTIw/YLb/HM+JXu4g4DWt9afl7jql3L8HAaPKbaqRWYMwz6DqrnUdgX3OYfYyzh26SgPX5T4Y/AP4A7hYa13oPHclsA64BJihtS5WSn0OXK+U+j+tdYnz8a4DPnduJ1zeb8B9SqmwynEI4a+kJy+E75kKXKeUCsUktCpD9QBKqVZKqZeVUjmY3dSKMD3y8vtZrwD+opS6Wynlap/rFcDTSqkxzm1Xa6I9poddIRwqjhCUOlwutt3l2kdgRiccSqkgpVQQsBWz+1v5iYefYEY2kpzfJzu/rzD077QPCMSMfAjRJEiSF8L3fIPZNjgNiATcbV35PmZb3WeBC4AzMZPhwsqdcy9mAttjwHql1EalVPnh7xuBLGASkOO8rj/8JPGFAfZKbTuANs4PJuWd64xrcqX2GMyM+6JKt26YywelFgLbOTFkfxOwEzNqUVlpTGEujgnhlyTJC+FjtNbHMUvIHsQsU6syq14pFQZcitm/+lWt9TytdRaVfue11oe01vdrrdsD/YGfgQylVG/n8R1a6zGYvdWHYIbQv3HuN+/OAaBlpbYfMJcHz6/0/Mudce108RhvYT4AVL79q9z9NfApcK1SKgK4BvhUa+1wEVdpTAeqiV0IvyJJXgjf9AamB/+mm+OhmKHpsh61UqoZZo26S1rrlcBfMH8XelU65tBaLwGeACIwk/rcWQ90rXT/BZg18k874ziZuUBfYKnWOqvSLbvSuZ8ArTEjFq1xPVQPEA/s11rvr8HzC+EXZOKdED5Ia51JNZPgtNaHlVK/Ao8ppY4ADmAC5hp489LzlFI/Yq59r8JcMx+PWW//i7MC3feYGfYbMB8cHsL05tdWE95PuP4wcTNmdv0ypdTLzucMBHpgLgscK3fu48AvwAyl1LuY6+mdgJHA+86fv/RnXaqU2gD8Cdistf7VTVyJmBn2QjQZ0pMXwn/djJms9iHwEmYJ3YeVzlmMWZ72OTANcy38Yq31dkwFvd+BBzDzAD4A8oALnFXk3PkS6F15op7Weh0wEDMCcT/wX8x8gPHO504sd+4GYLDz+dKd5z6BGZnY5OI5p2Im97mbhBiEWdr3RTVxC+F3lLmkJYQQDUcptQLI0Fo/a3UsAEqpCzEfJDq6msMghL+SnrwQojGkAfc4e9De4EFgkiR40dR4yy+gEMK/fI5Z7tYJyLEyEKVUOOayxCQr4xDCCjJcL4QQQvgpGa4XQggh/JQkeSGEEMJPSZIXQggh/JQkeSGEEMJPSZIXQggh/NT/A8RIAlu12F+cAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1Ibb11.txt\n",
      "value saved to N_1Ibb11.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_BB_hist11;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.5, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1Ibb11.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1Ibb11.txt\")\n",
    "with open(\"N_1Ibb11.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1Ibb11.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "08e87e2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hist2: 0.8925 ± 0.0117\n"
     ]
    }
   ],
   "source": [
    "# eff cal for EE_hist2 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2710.18\n",
    "Nsig1_error = 84.33\n",
    "Nsig2 = 11245.18\n",
    "Nsig2_error = 149.02\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hist2: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f8a079ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hist2: 0.8154 ± 0.0137\n"
     ]
    }
   ],
   "source": [
    "# eff cal for EE_hist1 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2177.75\n",
    "Nsig1_error = 25\n",
    "Nsig2 = 9622.39\n",
    "Nsig2_error = 160.58\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = Nsig2 / (Nsig2 + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hist2: {efficiency:.4f} ± {efficiency_error:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad482b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hist3: 0.8135 ± 0.0164\n"
     ]
    }
   ],
   "source": [
    "# eff cal for EE_hist1 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 1837.55\n",
    "Nsig1_error = 25\n",
    "Nsig2 = 8016.73 \n",
    "Nsig2_error = 160.58\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = Nsig2 / (Nsig2 + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hist3: {efficiency:.4f} ± {efficiency_error:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "910083c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Plotting histograms for each fit parameter\n",
    "# Number of bootstrap iterations\n",
    "n_bootstrap = 500\n",
    "\n",
    "# Arrays to store fitted parameters\n",
    "signal_params = []  # For signal-related parameters (m, gamma, mu, sigma, sig_yield)\n",
    "background_params = []  # For background-related parameters (a, b)\n",
    "\n",
    "# Perform bootstrapping\n",
    "for _ in range(n_bootstrap):\n",
    "    # Generate a resampled histogram with replacement\n",
    "    resampled_y_data = np.random.poisson(y_data)  # Resample assuming Poisson statistics\n",
    "\n",
    "    try:\n",
    "        # Fit the resampled data\n",
    "        popt_resampled, _ = curve_fit(\n",
    "            fit_function, x_data, resampled_y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    "        )\n",
    "        \n",
    "        # Store signal parameters\n",
    "        signal_params.append(popt_resampled[:5])  # m, gamma, mu, sigma, sig_yield\n",
    "        \n",
    "        # Store background parameters\n",
    "        background_params.append(popt_resampled[4:6])  # a, b\n",
    "    \n",
    "    except RuntimeError:\n",
    "        # Skip fits that fail to converge\n",
    "        continue\n",
    "        \n",
    "        \n",
    "signal_params = np.array(signal_params)\n",
    "background_params = np.array(background_params)\n",
    "\n",
    "\n",
    "# Plotting signal parameter distributions\n",
    "plt.figure(figsize=(12, 8))\n",
    "signal_labels = [\"Mean (m)\", \"Gamma (gamma)\", \"Mu (mu)\", \"Sigma (sigma)\", \"Signal Yield\"]\n",
    "for i, param in enumerate(signal_labels):\n",
    "    plt.subplot(3, 2, i + 1)\n",
    "    plt.hist(signal_params[:, i], bins=30, color='blue', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plotting background parameter distributions\n",
    "plt.figure(figsize=(12, 4))\n",
    "background_labels = [\"Background Yield (a)\", \"Background Slope (b)\"]\n",
    "for i, param in enumerate(background_labels):\n",
    "    plt.subplot(1, 2, i + 1)\n",
    "    plt.hist(background_params[:, i], bins=30, color='green', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ae601590",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_BB_hist10;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Plotting histograms for each fit parameter\n",
    "# Number of bootstrap iterations\n",
    "n_bootstrap = 500\n",
    "\n",
    "# Arrays to store fitted parameters\n",
    "signal_params = []  # For signal-related parameters (m, gamma, mu, sigma, sig_yield)\n",
    "background_params = []  # For background-related parameters (a, b)\n",
    "\n",
    "# Perform bootstrapping\n",
    "for _ in range(n_bootstrap):\n",
    "    # Generate a resampled histogram with replacement\n",
    "    resampled_y_data = np.random.poisson(y_data)  # Resample assuming Poisson statistics\n",
    "\n",
    "    try:\n",
    "        # Fit the resampled data\n",
    "        popt_resampled, _ = curve_fit(\n",
    "            fit_function, x_data, resampled_y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    "        )\n",
    "        \n",
    "        # Store signal parameters\n",
    "        signal_params.append(popt_resampled[:5])  # m, gamma, mu, sigma, sig_yield\n",
    "        \n",
    "        # Store background parameters\n",
    "        background_params.append(popt_resampled[4:6])  # a, b\n",
    "    \n",
    "    except RuntimeError:\n",
    "        # Skip fits that fail to converge\n",
    "        continue\n",
    "        \n",
    "        \n",
    "signal_params = np.array(signal_params)\n",
    "background_params = np.array(background_params)\n",
    "\n",
    "\n",
    "# Plotting signal parameter distributions\n",
    "plt.figure(figsize=(12, 8))\n",
    "signal_labels = [\"Mean (m)\", \"Gamma (gamma)\", \"Mu (mu)\", \"Sigma (sigma)\", \"Signal Yield\"]\n",
    "for i, param in enumerate(signal_labels):\n",
    "    plt.subplot(3, 2, i + 1)\n",
    "    plt.hist(signal_params[:, i], bins=30, color='blue', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plotting background parameter distributions\n",
    "plt.figure(figsize=(12, 4))\n",
    "background_labels = [\"Background Yield (a)\", \"Background Slope (b)\"]\n",
    "for i, param in enumerate(background_labels):\n",
    "    plt.subplot(1, 2, i + 1)\n",
    "    plt.hist(background_params[:, i], bins=30, color='green', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e7e18d50",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/scipy/optimize/_minpack_py.py:931: RuntimeWarning: divide by zero encountered in divide\n",
      "  transform = 1.0 / sigma\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Residuals are not finite in the initial point.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_456/1752570815.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     83\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m         \u001b[0;31m# Fit the resampled data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m         popt_resampled, _ = curve_fit(\n\u001b[0m\u001b[1;32m     86\u001b[0m             \u001b[0mfit_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresampled_y_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp0\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_errors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbounds\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m         )\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/scipy/optimize/_minpack_py.py\u001b[0m in \u001b[0;36mcurve_fit\u001b[0;34m(f, xdata, ydata, p0, sigma, absolute_sigma, check_finite, bounds, method, jac, full_output, nan_policy, **kwargs)\u001b[0m\n\u001b[1;32m    972\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'max_nfev'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'maxfev'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    973\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 974\u001b[0;31m         res = least_squares(func, p0, jac=jac, bounds=bounds, method=method,\n\u001b[0m\u001b[1;32m    975\u001b[0m                             **kwargs)\n\u001b[1;32m    976\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/scipy/optimize/_lsq/least_squares.py\u001b[0m in \u001b[0;36mleast_squares\u001b[0;34m(fun, x0, jac, bounds, method, ftol, xtol, gtol, x_scale, loss, f_scale, diff_step, tr_solver, tr_options, jac_sparsity, max_nfev, verbose, args, kwargs)\u001b[0m\n\u001b[1;32m    835\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    836\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 837\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Residuals are not finite in the initial point.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    838\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    839\u001b[0m     \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx0\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Residuals are not finite in the initial point."
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Plotting histograms for each fit parameter\n",
    "# Number of bootstrap iterations\n",
    "n_bootstrap = 500\n",
    "\n",
    "# Arrays to store fitted parameters\n",
    "signal_params = []  # For signal-related parameters (m, gamma, mu, sigma, sig_yield)\n",
    "background_params = []  # For background-related parameters (a, b)\n",
    "\n",
    "# Perform bootstrapping\n",
    "for _ in range(n_bootstrap):\n",
    "    # Generate a resampled histogram with replacement\n",
    "    resampled_y_data = np.random.poisson(y_data)  # Resample assuming Poisson statistics\n",
    "\n",
    "    try:\n",
    "        # Fit the resampled data\n",
    "        popt_resampled, _ = curve_fit(\n",
    "            fit_function, x_data, resampled_y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    "        )\n",
    "        \n",
    "        # Store signal parameters\n",
    "        signal_params.append(popt_resampled[:5])  # m, gamma, mu, sigma, sig_yield\n",
    "        \n",
    "        # Store background parameters\n",
    "        background_params.append(popt_resampled[4:6])  # a, b\n",
    "    \n",
    "    except RuntimeError:\n",
    "        # Skip fits that fail to converge\n",
    "        continue\n",
    "        \n",
    "        \n",
    "signal_params = np.array(signal_params)\n",
    "background_params = np.array(background_params)\n",
    "\n",
    "\n",
    "# Plotting signal parameter distributions\n",
    "plt.figure(figsize=(12, 8))\n",
    "signal_labels = [\"Mean (m)\", \"Gamma (gamma)\", \"Mu (mu)\", \"Sigma (sigma)\", \"Signal Yield\"]\n",
    "for i, param in enumerate(signal_labels):\n",
    "    plt.subplot(3, 2, i + 1)\n",
    "    plt.hist(signal_params[:, i], bins=30, color='blue', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plotting background parameter distributions\n",
    "plt.figure(figsize=(12, 4))\n",
    "background_labels = [\"Background Yield (a)\", \"Background Slope (b)\"]\n",
    "for i, param in enumerate(background_labels):\n",
    "    plt.subplot(1, 2, i + 1)\n",
    "    plt.hist(background_params[:, i], bins=30, color='green', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f53e7b95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_BB_hist10;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Plotting histograms for each fit parameter\n",
    "# Number of bootstrap iterations\n",
    "n_bootstrap = 500\n",
    "\n",
    "# Arrays to store fitted parameters\n",
    "signal_params = []  # For signal-related parameters (m, gamma, mu, sigma, sig_yield)\n",
    "background_params = []  # For background-related parameters (a, b)\n",
    "\n",
    "# Perform bootstrapping\n",
    "for _ in range(n_bootstrap):\n",
    "    # Generate a resampled histogram with replacement\n",
    "    resampled_y_data = np.random.poisson(y_data)  # Resample assuming Poisson statistics\n",
    "\n",
    "    try:\n",
    "        # Fit the resampled data\n",
    "        popt_resampled, _ = curve_fit(\n",
    "            fit_function, x_data, resampled_y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    "        )\n",
    "        \n",
    "        # Store signal parameters\n",
    "        signal_params.append(popt_resampled[:5])  # m, gamma, mu, sigma, sig_yield\n",
    "        \n",
    "        # Store background parameters\n",
    "        background_params.append(popt_resampled[4:6])  # a, b\n",
    "    \n",
    "    except RuntimeError:\n",
    "        # Skip fits that fail to converge\n",
    "        continue\n",
    "        \n",
    "        \n",
    "signal_params = np.array(signal_params)\n",
    "background_params = np.array(background_params)\n",
    "\n",
    "\n",
    "# Plotting signal parameter distributions\n",
    "plt.figure(figsize=(12, 8))\n",
    "signal_labels = [\"Mean (m)\", \"Gamma (gamma)\", \"Mu (mu)\", \"Sigma (sigma)\", \"Signal Yield\"]\n",
    "for i, param in enumerate(signal_labels):\n",
    "    plt.subplot(3, 2, i + 1)\n",
    "    plt.hist(signal_params[:, i], bins=30, color='blue', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plotting background parameter distributions\n",
    "plt.figure(figsize=(12, 4))\n",
    "background_labels = [\"Background Yield (a)\", \"Background Slope (b)\"]\n",
    "for i, param in enumerate(background_labels):\n",
    "    plt.subplot(1, 2, i + 1)\n",
    "    plt.hist(background_params[:, i], bins=30, color='green', alpha=0.7)\n",
    "    plt.xlabel(param)\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(f\"Distribution of {param}\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc05d2dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"ID efficiency : 0.7774 ± 0.0112\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
