{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2361895c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2194.31 ± 85.49\n",
      "Background Yield: 20.85 ± 16.12\n",
      "ID efficiency : 0.7774 ± 0.0112\n",
      "Background Slope: -0.01 ± 0.01\n",
      "Chi-squared: 90.50\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.71\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1idpass_BE_hist6;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"ID efficiency : 0.7774 ± 0.0112\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffe3e10f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
