{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4bda4fc4",
   "metadata": {},
   "source": [
    "# Accessing files from CERN EOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b09a06c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can use the Run 361971 from LHC Fill 8387 see (requires certificate) https://cmsoms.cern.ch/cms/fills/report?cms_fill=8387\n",
    "# we need these files: https://cmsweb.cern.ch/das/request?view=list&limit=50&instance=prod%2Fglobal&input=file+dataset%3D%2FEGamma%2FRun2022F-22Sep2023-v1%2FNANOAOD+run%3D361971\n",
    "# I got the filelist by running within a CMSSW envirnonment on lxplus\n",
    "#   voms-proxy-init --voms cms\n",
    "#   dasgoclient --query=\"file dataset=/EGamma/Run2022F-22Sep2023-v1/NANOAOD run=361971\"\n",
    "\n",
    "## Run2022C, run=357442 Fill=8124 Recorded Lumi = 309.53 pb-1\n",
    "\n",
    "filelist = [\n",
    "    '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/3c15f464-10bd-4ab8-9064-a509a3470c8a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/ac8e9d83-82a8-4d80-af0e-c8ada661a3b2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/f80a5b95-fe62-4f0d-a944-5241fb60aed8.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/94b4307d-743e-43ba-aacb-e24d62976a0c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/fe30838d-340e-4b6d-8a9d-dbf48b0769f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/2c381ce9-cebb-4ac2-bd86-fec266ae32ab.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/ac146ab1-4c62-4e59-9e47-97a0f27296c0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/91770f25-c595-417d-af06-0294ce83a54a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/b63f1a53-2f1c-49c1-9030-9cf128774737.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/617c9322-aa7b-4ab4-a76b-754aa976d193.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8a38772c-3521-4d31-b890-182129ec27a4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/77aae102-b491-4b59-b805-81756e10f9c9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/6120064a-8510-4c71-9e6d-f561acda3104.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/89bebe36-6b23-4425-936a-4736e2c5a7a2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/c1638809-d776-48ad-a636-086b3ad888e5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/fdfef697-4d08-47d9-adf4-96a5b57d53ba.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0709d59f-9ebb-4322-b6a4-5ac5b0920c46.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8774f467-3552-46ea-8cdb-bdc8e0325d72.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/254a37c2-b758-4ef6-9304-1483cb86bc00.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b3ed630c-4607-4c01-b43a-70a821a82e29.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f13df640-b2bb-455a-b12e-591bdcf478c9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2c7d3206-8253-4c71-aec1-a9c2ba306bd0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/64624550-d985-4dce-9a65-84d5c9f177b7.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/42521add-a1f8-45bb-9428-1bfaa9fb9552.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/48736d9f-ff08-4011-bae4-158a7a410dc3.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/91e83c4b-8163-434a-a834-49ca0447769a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/9c0e14d2-1dbd-46e0-b526-aadea8772b37.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/774adccc-2030-4081-b2dd-d419d596e5c2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/5f345cbf-ac95-4b40-9d65-0ed2e731a671.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c7888cb2-a9bf-46a2-8d70-030087226d2e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a6f13e9e-3018-46a3-a1bc-9c44ef3745bd.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/76d420f7-3069-4862-bd48-9b0fcb2957a4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/90c94494-d854-41dc-8ef3-829950fca9c5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bf7612bb-d5a8-427b-9c3b-6227e956e07c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4e7f4cab-c543-40cf-9962-d0467f51017c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/edc968c5-c8ae-4646-abde-94797f8f37bc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/060a2b92-8317-4633-b167-bf4a8f9bfe72.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8c41e42e-7e98-4eb5-8f80-9a674b86bfdc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4d17c297-6026-4dd7-b95c-82bab3e5b82c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9327925d-b457-4af2-908c-0c2633b4c2ff.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/52684bad-d9f1-4ddb-a949-fa5d692d4773.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/6dc6095c-7e75-44f5-adf8-24672304c683.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/ebde7b7f-8855-41fb-ac15-d223c8451d56.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/44b6df71-9516-42db-bb32-463e45d58b06.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/cbf47164-81b5-47a2-ae31-d68c7f5e722a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5fff0893-868e-41f7-8156-37e04c22bf9b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/995e6556-488b-4c78-aa5c-ebe61964d265.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0a668c2a-b08e-4b29-b26d-b3e8fcb5b57b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/55d5cc8e-6ff6-41ef-82fb-ff03220d1949.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/53d8b7cc-9394-4e14-b9a7-5fa9dc475ebd.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5ed16adc-ac33-4632-b758-44dfc29ed491.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/510000/61ef47ab-8a9e-464b-8702-1cffa353639b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/6acb7c3c-fd21-41e0-9d2b-c2aa7163395c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c29ec79c-3311-4c04-80ca-288c90fc7295.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/081192ec-f6f8-4f68-a9e2-2f2496ad8f85.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/7ced153b-2121-4754-9bce-e34d89b25c4c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8ee8ed5b-d529-4673-bd87-3b8e458b2731.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/98ca33fd-9157-430d-a13b-4974b5dea4df.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c1e52356-dcba-40f7-92c1-e4c1f0a64335.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/149e3cf1-87bc-4ce9-b8d2-3c2fa97dfe3d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/bc4b2934-339d-4765-8b6f-3e06467309da.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/236d332c-2c11-4906-9b67-54dc3db89f56.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b062eb78-b422-4e07-bb61-0b4616fbc161.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0f21827a-b6fa-4511-a5c2-9bc8916096fe.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/38c2ddcf-5d7c-41e6-a0a9-6bfa25ad103d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/fe1fee55-8d10-41ad-9e8e-50063e1640c0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bc20e209-8af5-4310-8891-274f56fd900c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b016544c-5379-434a-b76b-2ca9dcfb8c9e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f5c6ef9a-a623-44be-ad5b-bd537972572d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2579b84e-e72a-40e6-8171-e49c69ff6e77.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1499bb13-3cb7-4d2a-9501-f1b058b03d9f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/24354e75-d99b-4956-9ce7-f8787351bfd9.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/344a5e80-338c-472d-bdf4-933e66f9b658.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/f48fecb3-769e-49c0-9379-4c07fa52223d.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/1f3d4880-1d32-4683-9394-1433fe5952c0.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/15f76c07-c6fb-4ef9-bef8-28532c8b8077.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/d4c8236d-c92b-4f3c-976d-af4b8266b4b1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/dc5bd126-de1b-43ce-afc7-fb720a79d16b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/7ba028e4-8c25-40bb-ad00-6e9afb25b71d.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/f8499e1c-dff2-464f-a0f9-f7b4f32cef97.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/5a7724d2-c759-4946-9c16-fdcdd5fedb56.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/2a026df0-ba28-4e5e-8baf-2a01559d87f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/6f7be9a4-58c6-405b-85f7-473ea868ae58.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/1864bc31-46c6-4db7-8821-a3e365ea3eec.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f1321844-176c-49cc-83c8-215c7507c636.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/da1b734f-e837-42ea-9b56-13a1a196b285.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5332c4f1-783c-4f1e-86ca-7588aaff7bdc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/da0097c7-c9be-4ec4-bd60-145dfece59ed.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/6cb37c6e-9994-4af2-a4f9-025511ae90d2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5c2eda6b-ede4-4c06-bb65-57dbe4e53427.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/c3e17de8-65be-4d2b-a9d8-b1e5c913d733.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/61aa820e-c1a5-4d13-9782-dc9545eb24f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/89e12e24-1410-470c-9944-5a877c5b31b7.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2ba08682-4b77-4c44-99b6-1b69d82e7dbb.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/68cb8e58-64f8-48bc-a22e-1e9ce62b527f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/76309f98-5cf4-41dd-9889-c10b04438a0c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9a8535b5-0ec1-44b9-a5cd-8f210404e3af.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4d7911c8-1024-422b-a3df-657fb95e3be4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/af4d17e5-b002-4148-8bf8-45689424d140.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/26541a02-8ad4-4ae9-959b-ba0ed5f70eda.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a89888f2-4aaf-457e-8ac1-72613bd7bd93.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/1d0edbfd-15cd-42b3-9396-76486bcc6b29.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/3d927b61-0e71-4778-a3c1-d438b44c4bd5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/eddec031-eaea-4f00-a40e-fd875ed76e7f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/6782e123-eaba-4aa8-924f-0db889a4f706.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/49cecabe-851d-4b13-ae4e-2f0891abf851.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/6a642882-ad9d-48bb-bca1-c0fdd2bd5cbd.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/020979ca-5879-4ace-bfc3-7893bdea4d37.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f3c4420c-dc5a-4d56-8f05-29174ff1b924.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9b4a8982-fae2-4824-ab20-b954aa89400c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f23c8368-51bd-4cb6-83b1-71ac89d4b878.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bf49ad32-4f36-4364-aa27-6de1f75fd63a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b21feb7b-87c0-4e97-be99-d97cc07a76bf.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1c0532fc-4697-4e1c-9555-6334bd5e2659.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b2a83b11-af6e-4bd2-b872-f5306093144e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/a930bd63-be2f-41cf-b4e5-0df1720c9ebc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/506e75cb-b256-412d-a32d-cebb0982830f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/a97687a8-83f6-4ad5-824a-d84e25bd53ec.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/ac53464f-c3f3-4377-8665-5af26b7b7fe7.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/881ae5f4-e500-4f62-a509-ae253f0799c8.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/440504bf-8a2f-48a0-9d5f-1f31d63ba63d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/e9dcd001-1a52-4a1b-b251-1cead74883a5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/7769ec43-5822-4efe-8b4e-c04ca3348bd4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/046aaab1-dbcc-4c1d-a23a-b69030e8429e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/f21c1492-5db8-40e0-a509-dca139bc95d9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a1c4135c-be53-49c0-a403-55c3c94f7e1a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/4f8a6067-c61b-4743-9c81-db3274f237e8.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/4e05992f-fc60-4348-a53d-ba93672d2eaf.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/7b4542f7-2652-4ab4-9f28-25f030c30715.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/10e47a7b-79cb-4b83-82c1-d8d18620a644.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/03419313-fa3a-4906-9da4-1f8803279411.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/89b78ecf-799c-428c-b50c-3f676657f940.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/44a30e06-3ab9-4cf6-8523-95fc5aa22f6b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/59350a73-7bdf-4294-8369-37f79ca41f72.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/140d0bcf-3b08-45ec-af9a-e86c01c3749d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/811279b2-bcbf-4300-bd32-1a3690558ef3.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/46965eaa-bbeb-48dd-85b0-dd6f3b9f5346.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b45a8ff9-def1-41e6-975a-98875d0ee52f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bc8aa637-b568-4f34-a180-d5aa05c29670.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/242a1386-13b4-47f4-8d62-2a1262c73fea.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5d371a1f-192a-4a85-9738-1c7142873add.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4481615d-30ad-4f45-a5b4-005380357a90.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/d8f2d4f7-eec5-4d3a-a89b-961a25ad5128.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1048d798-d931-44fb-b7cd-88ea399ab489.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/3ddb0ae7-8b09-4abf-ab40-251be6a64fdb.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/04782e6d-aadb-4235-ab82-e2fbbb96f2f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b67759be-629f-4d05-bf02-a565dc3ffbb6.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0dd102e1-ff7f-4b80-8727-e4a41a224451.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/e7d9bb3b-a424-4319-a62b-207f23b188b9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/ce823b4f-ab9b-43ed-9668-5e6a7c3bccfe.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/7c150ab1-2683-4163-8aac-94e5f8b7463e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/38df5d5b-053a-48ae-aa7a-432e45a9fb8b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/94d30e15-a3e7-492e-ac94-a0db126928a4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c2353203-6985-4da5-933f-427f144d1fc1.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8f276d6b-ac83-49ef-9bcd-e5ea05324421.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/66b33d30-22a5-40dc-9b7c-ed75bed20cd1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/12471af8-4bf7-451c-ad25-961ce12d7cb4.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/cbbf11e2-fd0c-4ef2-b90f-f6446a110cb4.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/22ba6863-13b7-46b0-9a3c-c6e9dcd9ea08.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/62e33648-d9a2-43f2-8998-f7c1cad4d1b5.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/31d38704-5fc7-4d06-b3ed-0eb69bc3462f.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/77a0cec8-44c9-407c-94d6-90361ca37e39.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8cf222eb-e51b-4837-bad3-b832409d0b1a.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/d18625b5-bd53-466c-a2f4-0fd279f5dea4.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c06a4f3e-5cac-49ee-adbd-e886639943aa.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/523fe910-31a6-4bfb-9919-c3b7d1307224.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0cb8a0d7-9784-4174-bbbb-a0fd3ad71a0d.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/de27da55-5362-4dd0-a97d-ddbe6eb38d8a.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/a60a4c07-6cdb-4f01-bf80-56c496880d8f.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/af4dc5db-0f77-41d9-a445-c575485211a2.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/be8f49be-6bee-47b7-bb3f-55f30276192b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/90f667e4-6eb4-4a4d-ac1f-026deb15d109.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/27b4e094-3e65-4b67-a159-38aff32115c1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/067923a5-b66d-4249-bbd3-890e127ab3f7.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/379f4e11-b6ce-4a11-901c-7f1dcdb472dd.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/33021012-3916-463b-bb69-785135216b98.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5861a96d-29e8-4927-b698-890e5cf1bc02.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/ae364dcf-bfff-4aba-ad12-a1c311d9d44f.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/edb5e9ed-cda9-4d8a-aef0-641e3080e4f8.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8a1f94bc-d623-4107-a54f-bc8f7532a757.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/207abcfc-1f92-4bb4-a556-916ab5dc2346.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f2c2d092-dab9-4fcb-b50d-30611bc2e9b0.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/64d1dbdc-dff6-4fd2-8f7e-b0e33989459b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/009c166b-3848-4ad8-8278-ced132ce7dbc.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/316461ea-3ed0-424d-b4a0-7cbd15dcde34.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a4352f79-71da-4005-9998-8bd157904e82.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c5ffe1c2-50d9-4bb7-a5a2-9792ad0fe7c8.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/3642f1a8-d56f-4b4f-9f6b-d2a0e851b409.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/eaf2ff77-6c3f-4941-a0fb-fab97da165c8.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c259c9a6-5635-4fd0-8054-adea7d395e11.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c57ccf4a-199c-4848-9350-a6ec6f4794da.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/21045470-94a3-417d-8e4e-483eca3ab939.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c910f58b-3454-49bb-b90d-77fc75460e52.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/aa7f2a8c-5cc7-495a-ad11-249ec3e9e470.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/33330782-17e1-45ae-a6bf-d0b60a4761ce.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/307f6a83-aaf3-4973-89b6-ff3fa88e1c3b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f9e9872e-435c-480f-b0f7-06b3427d865e.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/274bc486-3504-479c-aa74-0204bbc6e2f7.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/15d0e8df-d78d-4d35-b3b7-3c66f87e3584.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8058917a-537a-49dd-b487-e6bf588202a2.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/aef56106-5f52-447b-bc19-85f6ef55caec.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/32a1df92-559d-4420-832f-c6d9cb6c65ac.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9de92d13-754f-4a88-968a-8a740e2eeca3.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/976c5678-a9e8-4645-a86f-b48631eb7612.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1576cd91-b003-4e7c-b77a-a96c6e62051b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bee350b6-d811-453c-a7ee-97d426dd7540.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/76c8ca25-1e61-4bcd-bd83-1c654cad69f1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/c5857e5f-f9ec-4963-b863-368732f93438.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b393d21c-4373-4883-8689-4b6a1cc9b3ad.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/7ef19857-1f58-42be-bd8f-281d831fc24c.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/fd0c6ff9-0e84-4b0c-8834-2886941b3740.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2b352fcc-854f-416e-9fe3-40651da3af81.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5f621841-1ed2-47b2-8e5a-8d6beb98e5c7.root'\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e81b5920",
   "metadata": {},
   "outputs": [],
   "source": [
    "# use xrootd to browse/open files on cern eos\n",
    "import XRootD.client\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2bcc73fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "path = \"root://eoscms.cern.ch/\"\n",
    "xrdurl =  XRootD.client.URL(path)\n",
    "xrdfs = XRootD.client.FileSystem(xrdurl.hostid)\n",
    "xrdpath = xrdurl.path\n",
    "print(xrdpath)\n",
    "\n",
    "num_clients = 16 # number of xroord clients to load files\n",
    "xrd_filelist = [f\"{xrdfs.url.protocol}://user_{random.randrange(num_clients)}@{xrdfs.url.hostname}:{xrdfs.url.port}/{file}\" for file in filelist]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20386af5",
   "metadata": {},
   "source": [
    "# Process events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "05af545b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot # see https://uproot.readthedocs.io/en/latest/index.html \n",
    "import awkward as ak\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pdb\n",
    "import vector\n",
    "import hist\n",
    "from hist import Hist\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9743491f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### example\n",
    "treename=\"zcounting/tree\"\n",
    "filename_ntuple=\"/eos/cms/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/3c15f464-10bd-4ab8-9064-a509a3470c8a.root\"\n",
    "f1=uproot.open(filename_ntuple)\n",
    "f1.keys()\n",
    "eventss = uproot.open(\"/eos/cms/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/3c15f464-10bd-4ab8-9064-a509a3470c8a.root:Events\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d55f868c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['run',\n",
       " 'luminosityBlock',\n",
       " 'event',\n",
       " 'bunchCrossing',\n",
       " 'BeamSpot_type',\n",
       " 'BeamSpot_sigmaZ',\n",
       " 'BeamSpot_sigmaZError',\n",
       " 'BeamSpot_z',\n",
       " 'BeamSpot_zError',\n",
       " 'nboostedTau',\n",
       " 'boostedTau_idAntiEle2018',\n",
       " 'boostedTau_idAntiMu',\n",
       " 'boostedTau_idMVAnewDM2017v2',\n",
       " 'boostedTau_idMVAoldDM2017v2',\n",
       " 'boostedTau_jetIdx',\n",
       " 'boostedTau_rawAntiEleCat2018',\n",
       " 'boostedTau_charge',\n",
       " 'boostedTau_decayMode',\n",
       " 'boostedTau_chargedIso',\n",
       " 'boostedTau_eta',\n",
       " 'boostedTau_leadTkDeltaEta',\n",
       " 'boostedTau_leadTkDeltaPhi',\n",
       " 'boostedTau_leadTkPtOverTauPt',\n",
       " 'boostedTau_mass',\n",
       " 'boostedTau_neutralIso',\n",
       " 'boostedTau_phi',\n",
       " 'boostedTau_photonsOutsideSignalCone',\n",
       " 'boostedTau_pt',\n",
       " 'boostedTau_puCorr',\n",
       " 'boostedTau_rawAntiEle2018',\n",
       " 'boostedTau_rawIso',\n",
       " 'boostedTau_rawIsodR03',\n",
       " 'boostedTau_rawMVAnewDM2017v2',\n",
       " 'boostedTau_rawMVAoldDM2017v2',\n",
       " 'CaloMET_phi',\n",
       " 'CaloMET_pt',\n",
       " 'CaloMET_sumEt',\n",
       " 'ChsMET_phi',\n",
       " 'ChsMET_pt',\n",
       " 'ChsMET_sumEt',\n",
       " 'nCorrT1METJet',\n",
       " 'CorrT1METJet_area',\n",
       " 'CorrT1METJet_eta',\n",
       " 'CorrT1METJet_muonSubtrFactor',\n",
       " 'CorrT1METJet_phi',\n",
       " 'CorrT1METJet_rawPt',\n",
       " 'DeepMETResolutionTune_phi',\n",
       " 'DeepMETResolutionTune_pt',\n",
       " 'DeepMETResponseTune_phi',\n",
       " 'DeepMETResponseTune_pt',\n",
       " 'nElectron',\n",
       " 'Electron_seediEtaOriX',\n",
       " 'Electron_convVeto',\n",
       " 'Electron_cutBased',\n",
       " 'Electron_cutBased_HEEP',\n",
       " 'Electron_isPFcand',\n",
       " 'Electron_jetNDauCharged',\n",
       " 'Electron_lostHits',\n",
       " 'Electron_mvaIso_WP80',\n",
       " 'Electron_mvaIso_WP90',\n",
       " 'Electron_mvaNoIso_WP80',\n",
       " 'Electron_mvaNoIso_WP90',\n",
       " 'Electron_seedGain',\n",
       " 'Electron_tightCharge',\n",
       " 'Electron_jetIdx',\n",
       " 'Electron_photonIdx',\n",
       " 'Electron_svIdx',\n",
       " 'Electron_fsrPhotonIdx',\n",
       " 'Electron_charge',\n",
       " 'Electron_pdgId',\n",
       " 'Electron_seediPhiOriY',\n",
       " 'Electron_vidNestedWPBitmap',\n",
       " 'Electron_vidNestedWPBitmapHEEP',\n",
       " 'Electron_deltaEtaSC',\n",
       " 'Electron_dr03EcalRecHitSumEt',\n",
       " 'Electron_dr03HcalDepth1TowerSumEt',\n",
       " 'Electron_dr03TkSumPt',\n",
       " 'Electron_dr03TkSumPtHEEP',\n",
       " 'Electron_dxy',\n",
       " 'Electron_dxyErr',\n",
       " 'Electron_dz',\n",
       " 'Electron_dzErr',\n",
       " 'Electron_eInvMinusPInv',\n",
       " 'Electron_energyErr',\n",
       " 'Electron_eta',\n",
       " 'Electron_hoe',\n",
       " 'Electron_ip3d',\n",
       " 'Electron_jetPtRelv2',\n",
       " 'Electron_jetRelIso',\n",
       " 'Electron_mass',\n",
       " 'Electron_miniPFRelIso_all',\n",
       " 'Electron_miniPFRelIso_chg',\n",
       " 'Electron_mvaHZZIso',\n",
       " 'Electron_mvaIso',\n",
       " 'Electron_mvaNoIso',\n",
       " 'Electron_pfRelIso03_all',\n",
       " 'Electron_pfRelIso03_chg',\n",
       " 'Electron_phi',\n",
       " 'Electron_pt',\n",
       " 'Electron_r9',\n",
       " 'Electron_scEtOverPt',\n",
       " 'Electron_sieie',\n",
       " 'Electron_sip3d',\n",
       " 'Electron_mvaTTH',\n",
       " 'nFatJet',\n",
       " 'FatJet_jetId',\n",
       " 'FatJet_nConstituents',\n",
       " 'FatJet_subJetIdx1',\n",
       " 'FatJet_subJetIdx2',\n",
       " 'FatJet_electronIdx3SJ',\n",
       " 'FatJet_muonIdx3SJ',\n",
       " 'FatJet_area',\n",
       " 'FatJet_btagDDBvLV2',\n",
       " 'FatJet_btagDDCvBV2',\n",
       " 'FatJet_btagDDCvLV2',\n",
       " 'FatJet_btagDeepB',\n",
       " 'FatJet_btagHbb',\n",
       " 'FatJet_eta',\n",
       " 'FatJet_mass',\n",
       " 'FatJet_msoftdrop',\n",
       " 'FatJet_n2b1',\n",
       " 'FatJet_n3b1',\n",
       " 'FatJet_particleNetWithMass_H4qvsQCD',\n",
       " 'FatJet_particleNetWithMass_HbbvsQCD',\n",
       " 'FatJet_particleNetWithMass_HccvsQCD',\n",
       " 'FatJet_particleNetWithMass_QCD',\n",
       " 'FatJet_particleNetWithMass_TvsQCD',\n",
       " 'FatJet_particleNetWithMass_WvsQCD',\n",
       " 'FatJet_particleNetWithMass_ZvsQCD',\n",
       " 'FatJet_particleNet_QCD',\n",
       " 'FatJet_particleNet_QCD0HF',\n",
       " 'FatJet_particleNet_QCD1HF',\n",
       " 'FatJet_particleNet_QCD2HF',\n",
       " 'FatJet_particleNet_XbbVsQCD',\n",
       " 'FatJet_particleNet_XccVsQCD',\n",
       " 'FatJet_particleNet_XggVsQCD',\n",
       " 'FatJet_particleNet_XqqVsQCD',\n",
       " 'FatJet_particleNet_XteVsQCD',\n",
       " 'FatJet_particleNet_XtmVsQCD',\n",
       " 'FatJet_particleNet_XttVsQCD',\n",
       " 'FatJet_particleNet_massCorr',\n",
       " 'FatJet_phi',\n",
       " 'FatJet_pt',\n",
       " 'FatJet_rawFactor',\n",
       " 'FatJet_tau1',\n",
       " 'FatJet_tau2',\n",
       " 'FatJet_tau3',\n",
       " 'FatJet_tau4',\n",
       " 'FatJet_lsf3',\n",
       " 'nFsrPhoton',\n",
       " 'FsrPhoton_electronIdx',\n",
       " 'FsrPhoton_muonIdx',\n",
       " 'FsrPhoton_dROverEt2',\n",
       " 'FsrPhoton_eta',\n",
       " 'FsrPhoton_phi',\n",
       " 'FsrPhoton_pt',\n",
       " 'FsrPhoton_relIso03',\n",
       " 'nIsoTrack',\n",
       " 'IsoTrack_isHighPurityTrack',\n",
       " 'IsoTrack_isPFcand',\n",
       " 'IsoTrack_isFromLostTrack',\n",
       " 'IsoTrack_charge',\n",
       " 'IsoTrack_fromPV',\n",
       " 'IsoTrack_pdgId',\n",
       " 'IsoTrack_dxy',\n",
       " 'IsoTrack_dz',\n",
       " 'IsoTrack_eta',\n",
       " 'IsoTrack_pfRelIso03_all',\n",
       " 'IsoTrack_pfRelIso03_chg',\n",
       " 'IsoTrack_phi',\n",
       " 'IsoTrack_pt',\n",
       " 'IsoTrack_miniPFRelIso_all',\n",
       " 'IsoTrack_miniPFRelIso_chg',\n",
       " 'nJet',\n",
       " 'Jet_jetId',\n",
       " 'Jet_nConstituents',\n",
       " 'Jet_nElectrons',\n",
       " 'Jet_nMuons',\n",
       " 'Jet_nSVs',\n",
       " 'Jet_electronIdx1',\n",
       " 'Jet_electronIdx2',\n",
       " 'Jet_muonIdx1',\n",
       " 'Jet_muonIdx2',\n",
       " 'Jet_svIdx1',\n",
       " 'Jet_svIdx2',\n",
       " 'Jet_hfadjacentEtaStripsSize',\n",
       " 'Jet_hfcentralEtaStripSize',\n",
       " 'Jet_PNetRegPtRawCorr',\n",
       " 'Jet_PNetRegPtRawCorrNeutrino',\n",
       " 'Jet_PNetRegPtRawRes',\n",
       " 'Jet_area',\n",
       " 'Jet_btagDeepFlavB',\n",
       " 'Jet_btagDeepFlavCvB',\n",
       " 'Jet_btagDeepFlavCvL',\n",
       " 'Jet_btagDeepFlavQG',\n",
       " 'Jet_btagPNetB',\n",
       " 'Jet_btagPNetCvB',\n",
       " 'Jet_btagPNetCvL',\n",
       " 'Jet_btagPNetQvG',\n",
       " 'Jet_btagPNetTauVJet',\n",
       " 'Jet_btagRobustParTAK4B',\n",
       " 'Jet_btagRobustParTAK4CvB',\n",
       " 'Jet_btagRobustParTAK4CvL',\n",
       " 'Jet_btagRobustParTAK4QG',\n",
       " 'Jet_chEmEF',\n",
       " 'Jet_chHEF',\n",
       " 'Jet_eta',\n",
       " 'Jet_hfsigmaEtaEta',\n",
       " 'Jet_hfsigmaPhiPhi',\n",
       " 'Jet_mass',\n",
       " 'Jet_muEF',\n",
       " 'Jet_muonSubtrFactor',\n",
       " 'Jet_neEmEF',\n",
       " 'Jet_neHEF',\n",
       " 'Jet_phi',\n",
       " 'Jet_pt',\n",
       " 'Jet_rawFactor',\n",
       " 'nLowPtElectron',\n",
       " 'LowPtElectron_convVeto',\n",
       " 'LowPtElectron_convWP',\n",
       " 'LowPtElectron_lostHits',\n",
       " 'LowPtElectron_electronIdx',\n",
       " 'LowPtElectron_photonIdx',\n",
       " 'LowPtElectron_charge',\n",
       " 'LowPtElectron_pdgId',\n",
       " 'LowPtElectron_ID',\n",
       " 'LowPtElectron_convVtxRadius',\n",
       " 'LowPtElectron_deltaEtaSC',\n",
       " 'LowPtElectron_dxy',\n",
       " 'LowPtElectron_dxyErr',\n",
       " 'LowPtElectron_dz',\n",
       " 'LowPtElectron_dzErr',\n",
       " 'LowPtElectron_eInvMinusPInv',\n",
       " 'LowPtElectron_energyErr',\n",
       " 'LowPtElectron_eta',\n",
       " 'LowPtElectron_hoe',\n",
       " 'LowPtElectron_mass',\n",
       " 'LowPtElectron_miniPFRelIso_all',\n",
       " 'LowPtElectron_miniPFRelIso_chg',\n",
       " 'LowPtElectron_phi',\n",
       " 'LowPtElectron_pt',\n",
       " 'LowPtElectron_ptbiased',\n",
       " 'LowPtElectron_r9',\n",
       " 'LowPtElectron_scEtOverPt',\n",
       " 'LowPtElectron_sieie',\n",
       " 'LowPtElectron_unbiased',\n",
       " 'MET_MetUnclustEnUpDeltaX',\n",
       " 'MET_MetUnclustEnUpDeltaY',\n",
       " 'MET_covXX',\n",
       " 'MET_covXY',\n",
       " 'MET_covYY',\n",
       " 'MET_phi',\n",
       " 'MET_pt',\n",
       " 'MET_significance',\n",
       " 'MET_sumEt',\n",
       " 'MET_sumPtUnclustered',\n",
       " 'nProton_multiRP',\n",
       " 'Proton_multiRP_arm',\n",
       " 'Proton_multiRP_t',\n",
       " 'Proton_multiRP_thetaX',\n",
       " 'Proton_multiRP_thetaY',\n",
       " 'Proton_multiRP_time',\n",
       " 'Proton_multiRP_timeUnc',\n",
       " 'Proton_multiRP_xi',\n",
       " 'nMuon',\n",
       " 'Muon_highPtId',\n",
       " 'Muon_highPurity',\n",
       " 'Muon_inTimeMuon',\n",
       " 'Muon_isGlobal',\n",
       " 'Muon_isPFcand',\n",
       " 'Muon_isStandalone',\n",
       " 'Muon_isTracker',\n",
       " 'Muon_jetNDauCharged',\n",
       " 'Muon_looseId',\n",
       " 'Muon_mediumId',\n",
       " 'Muon_mediumPromptId',\n",
       " 'Muon_miniIsoId',\n",
       " 'Muon_multiIsoId',\n",
       " 'Muon_mvaMuID_WP',\n",
       " 'Muon_nStations',\n",
       " 'Muon_nTrackerLayers',\n",
       " 'Muon_pfIsoId',\n",
       " 'Muon_puppiIsoId',\n",
       " 'Muon_softId',\n",
       " 'Muon_softMvaId',\n",
       " 'Muon_tightCharge',\n",
       " 'Muon_tightId',\n",
       " 'Muon_tkIsoId',\n",
       " 'Muon_triggerIdLoose',\n",
       " 'Muon_jetIdx',\n",
       " 'Muon_svIdx',\n",
       " 'Muon_fsrPhotonIdx',\n",
       " 'Muon_charge',\n",
       " 'Muon_pdgId',\n",
       " 'Muon_dxy',\n",
       " 'Muon_dxyErr',\n",
       " 'Muon_dxybs',\n",
       " 'Muon_dz',\n",
       " 'Muon_dzErr',\n",
       " 'Muon_eta',\n",
       " 'Muon_ip3d',\n",
       " 'Muon_jetPtRelv2',\n",
       " 'Muon_jetRelIso',\n",
       " 'Muon_mass',\n",
       " 'Muon_miniPFRelIso_all',\n",
       " 'Muon_miniPFRelIso_chg',\n",
       " 'Muon_mvaMuID',\n",
       " 'Muon_pfRelIso03_all',\n",
       " 'Muon_pfRelIso03_chg',\n",
       " 'Muon_pfRelIso04_all',\n",
       " 'Muon_phi',\n",
       " 'Muon_pt',\n",
       " 'Muon_ptErr',\n",
       " 'Muon_segmentComp',\n",
       " 'Muon_sip3d',\n",
       " 'Muon_softMva',\n",
       " 'Muon_tkRelIso',\n",
       " 'Muon_tunepRelPt',\n",
       " 'Muon_bsConstrainedChi2',\n",
       " 'Muon_bsConstrainedPt',\n",
       " 'Muon_bsConstrainedPtErr',\n",
       " 'Muon_mvaLowPt',\n",
       " 'Muon_mvaTTH',\n",
       " 'nPhoton',\n",
       " 'Photon_seediEtaOriX',\n",
       " 'Photon_cutBased',\n",
       " 'Photon_electronVeto',\n",
       " 'Photon_hasConversionTracks',\n",
       " 'Photon_isScEtaEB',\n",
       " 'Photon_isScEtaEE',\n",
       " 'Photon_mvaID_WP80',\n",
       " 'Photon_mvaID_WP90',\n",
       " 'Photon_pixelSeed',\n",
       " 'Photon_seedGain',\n",
       " 'Photon_electronIdx',\n",
       " 'Photon_jetIdx',\n",
       " 'Photon_seediPhiOriY',\n",
       " 'Photon_vidNestedWPBitmap',\n",
       " 'Photon_ecalPFClusterIso',\n",
       " 'Photon_energyErr',\n",
       " 'Photon_energyRaw',\n",
       " 'Photon_esEffSigmaRR',\n",
       " 'Photon_esEnergyOverRawE',\n",
       " 'Photon_eta',\n",
       " 'Photon_etaWidth',\n",
       " 'Photon_haloTaggerMVAVal',\n",
       " 'Photon_hcalPFClusterIso',\n",
       " 'Photon_hoe',\n",
       " 'Photon_hoe_PUcorr',\n",
       " 'Photon_mvaID',\n",
       " 'Photon_pfChargedIso',\n",
       " 'Photon_pfChargedIsoPFPV',\n",
       " 'Photon_pfChargedIsoWorstVtx',\n",
       " 'Photon_pfPhoIso03',\n",
       " 'Photon_pfRelIso03_all_quadratic',\n",
       " 'Photon_pfRelIso03_chg_quadratic',\n",
       " 'Photon_phi',\n",
       " 'Photon_phiWidth',\n",
       " 'Photon_pt',\n",
       " 'Photon_r9',\n",
       " 'Photon_s4',\n",
       " 'Photon_sieie',\n",
       " 'Photon_sieip',\n",
       " 'Photon_sipip',\n",
       " 'Photon_trkSumPtHollowConeDR03',\n",
       " 'Photon_trkSumPtSolidConeDR04',\n",
       " 'Photon_x_calo',\n",
       " 'Photon_y_calo',\n",
       " 'Photon_z_calo',\n",
       " 'nPPSLocalTrack',\n",
       " 'PPSLocalTrack_multiRPProtonIdx',\n",
       " 'PPSLocalTrack_singleRPProtonIdx',\n",
       " 'PPSLocalTrack_decRPId',\n",
       " 'PPSLocalTrack_rpType',\n",
       " 'PPSLocalTrack_x',\n",
       " 'PPSLocalTrack_y',\n",
       " 'PPSLocalTrack_time',\n",
       " 'PPSLocalTrack_timeUnc',\n",
       " 'PuppiMET_phi',\n",
       " 'PuppiMET_phiJERDown',\n",
       " 'PuppiMET_phiJERUp',\n",
       " 'PuppiMET_phiJESDown',\n",
       " 'PuppiMET_phiJESUp',\n",
       " 'PuppiMET_phiUnclusteredDown',\n",
       " 'PuppiMET_phiUnclusteredUp',\n",
       " 'PuppiMET_pt',\n",
       " 'PuppiMET_ptJERDown',\n",
       " 'PuppiMET_ptJERUp',\n",
       " 'PuppiMET_ptJESDown',\n",
       " 'PuppiMET_ptJESUp',\n",
       " 'PuppiMET_ptUnclusteredDown',\n",
       " 'PuppiMET_ptUnclusteredUp',\n",
       " 'PuppiMET_sumEt',\n",
       " 'RawMET_phi',\n",
       " 'RawMET_pt',\n",
       " 'RawMET_sumEt',\n",
       " 'RawPuppiMET_phi',\n",
       " 'RawPuppiMET_pt',\n",
       " 'RawPuppiMET_sumEt',\n",
       " 'Rho_fixedGridRhoAll',\n",
       " 'Rho_fixedGridRhoFastjetAll',\n",
       " 'Rho_fixedGridRhoFastjetCentral',\n",
       " 'Rho_fixedGridRhoFastjetCentralCalo',\n",
       " 'Rho_fixedGridRhoFastjetCentralChargedPileUp',\n",
       " 'Rho_fixedGridRhoFastjetCentralNeutral',\n",
       " 'nSoftActivityJet',\n",
       " 'SoftActivityJet_eta',\n",
       " 'SoftActivityJet_phi',\n",
       " 'SoftActivityJet_pt',\n",
       " 'SoftActivityJetNjets10',\n",
       " 'SoftActivityJetNjets2',\n",
       " 'SoftActivityJetNjets5',\n",
       " 'SoftActivityJetHT',\n",
       " 'SoftActivityJetHT10',\n",
       " 'SoftActivityJetHT2',\n",
       " 'SoftActivityJetHT5',\n",
       " 'nProton_singleRP',\n",
       " 'Proton_singleRP_decRPId',\n",
       " 'Proton_singleRP_thetaY',\n",
       " 'Proton_singleRP_xi',\n",
       " 'nSubJet',\n",
       " 'SubJet_btagDeepB',\n",
       " 'SubJet_eta',\n",
       " 'SubJet_mass',\n",
       " 'SubJet_n2b1',\n",
       " 'SubJet_n3b1',\n",
       " 'SubJet_phi',\n",
       " 'SubJet_pt',\n",
       " 'SubJet_rawFactor',\n",
       " 'SubJet_tau1',\n",
       " 'SubJet_tau2',\n",
       " 'SubJet_tau3',\n",
       " 'SubJet_tau4',\n",
       " 'nTau',\n",
       " 'Tau_decayMode',\n",
       " 'Tau_idAntiEleDeadECal',\n",
       " 'Tau_idAntiMu',\n",
       " 'Tau_idDecayModeNewDMs',\n",
       " 'Tau_idDecayModeOldDMs',\n",
       " 'Tau_idDeepTau2017v2p1VSe',\n",
       " 'Tau_idDeepTau2017v2p1VSjet',\n",
       " 'Tau_idDeepTau2017v2p1VSmu',\n",
       " 'Tau_idDeepTau2018v2p5VSe',\n",
       " 'Tau_idDeepTau2018v2p5VSjet',\n",
       " 'Tau_idDeepTau2018v2p5VSmu',\n",
       " 'Tau_nSVs',\n",
       " 'Tau_charge',\n",
       " 'Tau_decayModePNet',\n",
       " 'Tau_eleIdx',\n",
       " 'Tau_jetIdx',\n",
       " 'Tau_muIdx',\n",
       " 'Tau_svIdx1',\n",
       " 'Tau_svIdx2',\n",
       " 'Tau_chargedIso',\n",
       " 'Tau_dxy',\n",
       " 'Tau_dz',\n",
       " 'Tau_eta',\n",
       " 'Tau_leadTkDeltaEta',\n",
       " 'Tau_leadTkDeltaPhi',\n",
       " 'Tau_leadTkPtOverTauPt',\n",
       " 'Tau_mass',\n",
       " 'Tau_neutralIso',\n",
       " 'Tau_phi',\n",
       " 'Tau_photonsOutsideSignalCone',\n",
       " 'Tau_probDM0PNet',\n",
       " 'Tau_probDM10PNet',\n",
       " 'Tau_probDM11PNet',\n",
       " 'Tau_probDM1PNet',\n",
       " 'Tau_probDM2PNet',\n",
       " 'Tau_pt',\n",
       " 'Tau_ptCorrPNet',\n",
       " 'Tau_puCorr',\n",
       " 'Tau_qConfPNet',\n",
       " 'Tau_rawDeepTau2017v2p1VSe',\n",
       " 'Tau_rawDeepTau2017v2p1VSjet',\n",
       " 'Tau_rawDeepTau2017v2p1VSmu',\n",
       " 'Tau_rawDeepTau2018v2p5VSe',\n",
       " 'Tau_rawDeepTau2018v2p5VSjet',\n",
       " 'Tau_rawDeepTau2018v2p5VSmu',\n",
       " 'Tau_rawIso',\n",
       " 'Tau_rawIsodR03',\n",
       " 'Tau_rawPNetVSe',\n",
       " 'Tau_rawPNetVSjet',\n",
       " 'Tau_rawPNetVSmu',\n",
       " 'TkMET_phi',\n",
       " 'TkMET_pt',\n",
       " 'TkMET_sumEt',\n",
       " 'nTrigObj',\n",
       " 'TrigObj_l1charge',\n",
       " 'TrigObj_id',\n",
       " 'TrigObj_l1iso',\n",
       " 'TrigObj_filterBits',\n",
       " 'TrigObj_pt',\n",
       " 'TrigObj_eta',\n",
       " 'TrigObj_phi',\n",
       " 'TrigObj_l1pt',\n",
       " 'TrigObj_l1pt_2',\n",
       " 'TrigObj_l2pt',\n",
       " 'nOtherPV',\n",
       " 'OtherPV_z',\n",
       " 'OtherPV_score',\n",
       " 'PV_npvs',\n",
       " 'PV_npvsGood',\n",
       " 'PV_ndof',\n",
       " 'PV_x',\n",
       " 'PV_y',\n",
       " 'PV_z',\n",
       " 'PV_chi2',\n",
       " 'PV_score',\n",
       " 'nSV',\n",
       " 'SV_charge',\n",
       " 'SV_dlen',\n",
       " 'SV_dlenSig',\n",
       " 'SV_dxy',\n",
       " 'SV_dxySig',\n",
       " 'SV_pAngle',\n",
       " 'SV_ntracks',\n",
       " 'SV_chi2',\n",
       " 'SV_eta',\n",
       " 'SV_mass',\n",
       " 'SV_ndof',\n",
       " 'SV_phi',\n",
       " 'SV_pt',\n",
       " 'SV_x',\n",
       " 'SV_y',\n",
       " 'SV_z',\n",
       " 'Flag_HBHENoiseFilter',\n",
       " 'Flag_HBHENoiseIsoFilter',\n",
       " 'Flag_CSCTightHaloFilter',\n",
       " 'Flag_CSCTightHaloTrkMuUnvetoFilter',\n",
       " 'Flag_CSCTightHalo2015Filter',\n",
       " 'Flag_globalTightHalo2016Filter',\n",
       " 'Flag_globalSuperTightHalo2016Filter',\n",
       " 'Flag_HcalStripHaloFilter',\n",
       " 'Flag_hcalLaserEventFilter',\n",
       " 'Flag_EcalDeadCellTriggerPrimitiveFilter',\n",
       " 'Flag_EcalDeadCellBoundaryEnergyFilter',\n",
       " 'Flag_ecalBadCalibFilter',\n",
       " 'Flag_goodVertices',\n",
       " 'Flag_eeBadScFilter',\n",
       " 'Flag_ecalLaserCorrFilter',\n",
       " 'Flag_trkPOGFilters',\n",
       " 'Flag_chargedHadronTrackResolutionFilter',\n",
       " 'Flag_muonBadTrackFilter',\n",
       " 'Flag_BadChargedCandidateFilter',\n",
       " 'Flag_BadPFMuonFilter',\n",
       " 'Flag_BadPFMuonDzFilter',\n",
       " 'Flag_hfNoisyHitsFilter',\n",
       " 'Flag_BadChargedCandidateSummer16Filter',\n",
       " 'Flag_BadPFMuonSummer16Filter',\n",
       " 'Flag_trkPOG_manystripclus53X',\n",
       " 'Flag_trkPOG_toomanystripclus53X',\n",
       " 'Flag_trkPOG_logErrorTooManyClusters',\n",
       " 'Flag_METFilters',\n",
       " 'L1_AlwaysTrue',\n",
       " 'L1_BPTX_AND_Ref1_VME',\n",
       " 'L1_BPTX_AND_Ref3_VME',\n",
       " 'L1_BPTX_AND_Ref4_VME',\n",
       " 'L1_BPTX_BeamGas_B1_VME',\n",
       " 'L1_BPTX_BeamGas_B2_VME',\n",
       " 'L1_BPTX_BeamGas_Ref1_VME',\n",
       " 'L1_BPTX_BeamGas_Ref2_VME',\n",
       " 'L1_BPTX_NotOR_VME',\n",
       " 'L1_BPTX_OR_Ref3_VME',\n",
       " 'L1_BPTX_OR_Ref4_VME',\n",
       " 'L1_BPTX_RefAND_VME',\n",
       " 'L1_BptxMinus',\n",
       " 'L1_BptxOR',\n",
       " 'L1_BptxPlus',\n",
       " 'L1_BptxXOR',\n",
       " 'L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142',\n",
       " 'L1_DoubleEG10_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG10p5_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG11_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG4_er1p2_dR_Max0p9',\n",
       " 'L1_DoubleEG4p5_er1p2_dR_Max0p9',\n",
       " 'L1_DoubleEG5_er1p2_dR_Max0p9',\n",
       " 'L1_DoubleEG5p5_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG6_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG6p5_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG7_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG7p5_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG8_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG8er2p5_HTT260er',\n",
       " 'L1_DoubleEG8er2p5_HTT280er',\n",
       " 'L1_DoubleEG8er2p5_HTT300er',\n",
       " 'L1_DoubleEG8er2p5_HTT320er',\n",
       " 'L1_DoubleEG8er2p5_HTT340er',\n",
       " 'L1_DoubleEG8p5_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG9_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG9p5_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG_15_10_er2p5',\n",
       " 'L1_DoubleEG_20_10_er2p5',\n",
       " 'L1_DoubleEG_22_10_er2p5',\n",
       " 'L1_DoubleEG_25_12_er2p5',\n",
       " 'L1_DoubleEG_25_14_er2p5',\n",
       " 'L1_DoubleEG_27_14_er2p5',\n",
       " 'L1_DoubleEG_LooseIso16_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso18_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso20_10_er2p5',\n",
       " 'L1_DoubleEG_LooseIso20_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso22_10_er2p5',\n",
       " 'L1_DoubleEG_LooseIso22_12_er2p5',\n",
       " 'L1_DoubleEG_LooseIso22_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso25_12_er2p5',\n",
       " 'L1_DoubleEG_LooseIso25_LooseIso12_er1p5',\n",
       " 'L1_DoubleIsoTau26er2p1_Jet55_RmOvlp_dR0p5',\n",
       " 'L1_DoubleIsoTau26er2p1_Jet70_RmOvlp_dR0p5',\n",
       " 'L1_DoubleIsoTau28er2p1',\n",
       " 'L1_DoubleIsoTau28er2p1_Mass_Max80',\n",
       " 'L1_DoubleIsoTau28er2p1_Mass_Max90',\n",
       " 'L1_DoubleIsoTau30er2p1',\n",
       " 'L1_DoubleIsoTau30er2p1_Mass_Max80',\n",
       " 'L1_DoubleIsoTau30er2p1_Mass_Max90',\n",
       " 'L1_DoubleIsoTau32er2p1',\n",
       " 'L1_DoubleIsoTau34er2p1',\n",
       " 'L1_DoubleIsoTau35er2p1',\n",
       " 'L1_DoubleIsoTau36er2p1',\n",
       " 'L1_DoubleJet100er2p3_dEta_Max1p6',\n",
       " 'L1_DoubleJet100er2p5',\n",
       " 'L1_DoubleJet112er2p3_dEta_Max1p6',\n",
       " 'L1_DoubleJet120er2p5',\n",
       " 'L1_DoubleJet150er2p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min150_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min200_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min250_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min300_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min330_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min360_dEta_Max1p5',\n",
       " 'L1_DoubleJet35_Mass_Min450_IsoTau45_RmOvlp',\n",
       " 'L1_DoubleJet35_Mass_Min450_IsoTau45er2p1_RmOvlp_dR0p5',\n",
       " 'L1_DoubleJet40er2p5',\n",
       " 'L1_DoubleJet_100_30_DoubleJet30_Mass_Min620',\n",
       " 'L1_DoubleJet_110_35_DoubleJet35_Mass_Min620',\n",
       " 'L1_DoubleJet_115_40_DoubleJet40_Mass_Min620',\n",
       " 'L1_DoubleJet_115_40_DoubleJet40_Mass_Min620_Jet60TT28',\n",
       " 'L1_DoubleJet_120_45_DoubleJet45_Mass_Min620',\n",
       " 'L1_DoubleJet_120_45_DoubleJet45_Mass_Min620_Jet60TT28',\n",
       " 'L1_DoubleJet_80_30_Mass_Min420_DoubleMu0_SQ',\n",
       " 'L1_DoubleJet_80_30_Mass_Min420_IsoTau40_RmOvlp',\n",
       " 'L1_DoubleJet_80_30_Mass_Min420_Mu8',\n",
       " 'L1_DoubleJet_90_30_DoubleJet30_Mass_Min620',\n",
       " 'L1_DoubleLLPJet40',\n",
       " 'L1_DoubleLooseIsoEG22er2p1',\n",
       " 'L1_DoubleLooseIsoEG24er2p1',\n",
       " 'L1_DoubleMu0',\n",
       " 'L1_DoubleMu0_Mass_Min1',\n",
       " 'L1_DoubleMu0_OQ',\n",
       " 'L1_DoubleMu0_SQ',\n",
       " 'L1_DoubleMu0_SQ_OS',\n",
       " 'L1_DoubleMu0_Upt15_Upt7',\n",
       " 'L1_DoubleMu0_Upt5_Upt5',\n",
       " 'L1_DoubleMu0_Upt6_IP_Min1_Upt4',\n",
       " 'L1_DoubleMu0_dR_Max1p6_Jet90er2p5_dR_Max0p8',\n",
       " 'L1_DoubleMu0er1p4_OQ_OS_dEta_Max1p6',\n",
       " 'L1_DoubleMu0er1p4_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu0er1p5_SQ',\n",
       " 'L1_DoubleMu0er1p5_SQ_OS',\n",
       " 'L1_DoubleMu0er1p5_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu0er1p5_SQ_dR_Max1p4',\n",
       " 'L1_DoubleMu0er2p0_SQ_OS_dEta_Max1p5',\n",
       " 'L1_DoubleMu0er2p0_SQ_OS_dEta_Max1p6',\n",
       " 'L1_DoubleMu0er2p0_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu0er2p0_SQ_dEta_Max1p5',\n",
       " 'L1_DoubleMu0er2p0_SQ_dEta_Max1p6',\n",
       " 'L1_DoubleMu0er2p0_SQ_dR_Max1p4',\n",
       " 'L1_DoubleMu18er2p1_SQ',\n",
       " 'L1_DoubleMu3_OS_er2p3_Mass_Max14_DoubleEG7p5_er2p1_Mass_Max20',\n",
       " 'L1_DoubleMu3_SQ_ETMHF50_HTT60er',\n",
       " 'L1_DoubleMu3_SQ_ETMHF50_Jet60er2p5',\n",
       " 'L1_DoubleMu3_SQ_ETMHF50_Jet60er2p5_OR_DoubleJet40er2p5',\n",
       " 'L1_DoubleMu3_SQ_ETMHF60_Jet60er2p5',\n",
       " 'L1_DoubleMu3_SQ_HTT220er',\n",
       " 'L1_DoubleMu3_SQ_HTT240er',\n",
       " 'L1_DoubleMu3_SQ_HTT260er',\n",
       " 'L1_DoubleMu3_dR_Max1p6_Jet90er2p5_dR_Max0p8',\n",
       " 'L1_DoubleMu3er2p0_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu4_SQ_EG9er2p5',\n",
       " 'L1_DoubleMu4_SQ_OS',\n",
       " 'L1_DoubleMu4_SQ_OS_dR_Max1p2',\n",
       " 'L1_DoubleMu4p5_SQ_OS',\n",
       " 'L1_DoubleMu4p5_SQ_OS_dR_Max1p2',\n",
       " 'L1_DoubleMu4p5er2p0_SQ_OS',\n",
       " 'L1_DoubleMu4p5er2p0_SQ_OS_Mass_7to18',\n",
       " 'L1_DoubleMu4p5er2p0_SQ_OS_Mass_Min7',\n",
       " 'L1_DoubleMu5_OS_er2p3_Mass_8to14_DoubleEG3er2p1_Mass_Max20',\n",
       " 'L1_DoubleMu5_SQ_EG9er2p5',\n",
       " 'L1_DoubleMu8_SQ',\n",
       " 'L1_DoubleMu9_SQ',\n",
       " 'L1_DoubleMu_12_5',\n",
       " 'L1_DoubleMu_15_5_SQ',\n",
       " 'L1_DoubleMu_15_7',\n",
       " 'L1_DoubleMu_15_7_Mass_Min1',\n",
       " 'L1_DoubleMu_15_7_SQ',\n",
       " 'L1_DoubleTau70er2p1',\n",
       " 'L1_ETM120',\n",
       " 'L1_ETM150',\n",
       " 'L1_ETMHF100',\n",
       " 'L1_ETMHF100_HTT60er',\n",
       " 'L1_ETMHF110',\n",
       " 'L1_ETMHF110_HTT60er',\n",
       " 'L1_ETMHF110_HTT60er_NotSecondBunchInTrain',\n",
       " 'L1_ETMHF120',\n",
       " 'L1_ETMHF120_HTT60er',\n",
       " 'L1_ETMHF120_NotSecondBunchInTrain',\n",
       " 'L1_ETMHF130',\n",
       " 'L1_ETMHF130_HTT60er',\n",
       " 'L1_ETMHF140',\n",
       " 'L1_ETMHF150',\n",
       " 'L1_ETMHF70',\n",
       " 'L1_ETMHF70_HTT60er',\n",
       " 'L1_ETMHF80',\n",
       " 'L1_ETMHF80_HTT60er',\n",
       " 'L1_ETMHF90',\n",
       " 'L1_ETMHF90_HTT60er',\n",
       " 'L1_ETMHF90_SingleJet60er2p5_dPhi_Min2p1',\n",
       " 'L1_ETMHF90_SingleJet60er2p5_dPhi_Min2p6',\n",
       " 'L1_ETMHF90_SingleJet80er2p5_dPhi_Min2p1',\n",
       " 'L1_ETMHF90_SingleJet80er2p5_dPhi_Min2p6',\n",
       " 'L1_ETT1200',\n",
       " 'L1_ETT1600',\n",
       " 'L1_ETT2000',\n",
       " 'L1_FirstBunchAfterTrain',\n",
       " 'L1_FirstBunchBeforeTrain',\n",
       " 'L1_FirstBunchInTrain',\n",
       " 'L1_FirstCollisionInOrbit',\n",
       " 'L1_FirstCollisionInTrain',\n",
       " 'L1_HCAL_LaserMon_Trig',\n",
       " 'L1_HCAL_LaserMon_Veto',\n",
       " 'L1_HTT120_SingleLLPJet40',\n",
       " 'L1_HTT120er',\n",
       " 'L1_HTT160_SingleLLPJet50',\n",
       " 'L1_HTT160er',\n",
       " 'L1_HTT200_SingleLLPJet60',\n",
       " 'L1_HTT200er',\n",
       " 'L1_HTT240_SingleLLPJet70',\n",
       " 'L1_HTT255er',\n",
       " 'L1_HTT280er',\n",
       " 'L1_HTT280er_QuadJet_70_55_40_35_er2p5',\n",
       " 'L1_HTT320er',\n",
       " 'L1_HTT320er_QuadJet_70_55_40_40_er2p5',\n",
       " 'L1_HTT320er_QuadJet_80_60_er2p1_45_40_er2p3',\n",
       " 'L1_HTT320er_QuadJet_80_60_er2p1_50_45_er2p3',\n",
       " 'L1_HTT360er',\n",
       " 'L1_HTT400er',\n",
       " 'L1_HTT450er',\n",
       " 'L1_IsoEG32er2p5_Mt40',\n",
       " 'L1_IsoTau52er2p1_QuadJet36er2p5',\n",
       " 'L1_IsolatedBunch',\n",
       " 'L1_LastBunchInTrain',\n",
       " 'L1_LastCollisionInTrain',\n",
       " 'L1_LooseIsoEG22er2p1_IsoTau26er2p1_dR_Min0p3',\n",
       " 'L1_LooseIsoEG22er2p1_Tau70er2p1_dR_Min0p3',\n",
       " 'L1_LooseIsoEG24er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG24er2p1_IsoTau27er2p1_dR_Min0p3',\n",
       " 'L1_LooseIsoEG26er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG26er2p1_Jet34er2p5_dR_Min0p3',\n",
       " 'L1_LooseIsoEG28er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG28er2p1_Jet34er2p5_dR_Min0p3',\n",
       " 'L1_LooseIsoEG30er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG30er2p1_Jet34er2p5_dR_Min0p3',\n",
       " 'L1_MinimumBiasHF0',\n",
       " 'L1_MinimumBiasHF0_AND_BptxAND',\n",
       " 'L1_Mu10er2p3_Jet32er2p3_dR_Max0p4_DoubleJet32er2p3_dEta_Max1p6',\n",
       " 'L1_Mu12er2p3_Jet40er2p1_dR_Max0p4_DoubleJet40er2p1_dEta_Max1p6',\n",
       " 'L1_Mu12er2p3_Jet40er2p3_dR_Max0p4_DoubleJet40er2p3_dEta_Max1p6',\n",
       " 'L1_Mu18er2p1_Tau24er2p1',\n",
       " 'L1_Mu18er2p1_Tau26er2p1',\n",
       " 'L1_Mu18er2p1_Tau26er2p1_Jet55',\n",
       " 'L1_Mu18er2p1_Tau26er2p1_Jet70',\n",
       " 'L1_Mu20_EG10er2p5',\n",
       " 'L1_Mu22er2p1_IsoTau28er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau30er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau32er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau34er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau36er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau40er2p1',\n",
       " 'L1_Mu22er2p1_Tau70er2p1',\n",
       " 'L1_Mu3_Jet120er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet120er2p5_dR_Max0p8',\n",
       " 'L1_Mu3_Jet16er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet30er2p5',\n",
       " 'L1_Mu3_Jet35er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet60er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet80er2p5_dR_Max0p4',\n",
       " 'L1_Mu3er1p5_Jet100er2p5_ETMHF40',\n",
       " 'L1_Mu3er1p5_Jet100er2p5_ETMHF50',\n",
       " 'L1_Mu5_EG23er2p5',\n",
       " 'L1_Mu5_LooseIsoEG20er2p5',\n",
       " 'L1_Mu6_DoubleEG10er2p5',\n",
       " 'L1_Mu6_DoubleEG12er2p5',\n",
       " 'L1_Mu6_DoubleEG15er2p5',\n",
       " 'L1_Mu6_DoubleEG17er2p5',\n",
       " 'L1_Mu6_HTT240er',\n",
       " 'L1_Mu6_HTT250er',\n",
       " 'L1_Mu7_EG20er2p5',\n",
       " 'L1_Mu7_EG23er2p5',\n",
       " 'L1_Mu7_LooseIsoEG20er2p5',\n",
       " 'L1_Mu7_LooseIsoEG23er2p5',\n",
       " 'L1_NotBptxOR',\n",
       " 'L1_QuadJet60er2p5',\n",
       " 'L1_QuadJet_95_75_65_20_DoubleJet_75_65_er2p5_Jet20_FWD3p0',\n",
       " 'L1_QuadMu0',\n",
       " 'L1_QuadMu0_OQ',\n",
       " 'L1_QuadMu0_SQ',\n",
       " 'L1_SecondBunchInTrain',\n",
       " 'L1_SecondLastBunchInTrain',\n",
       " 'L1_SingleEG10er2p5',\n",
       " 'L1_SingleEG15er2p5',\n",
       " 'L1_SingleEG26er2p5',\n",
       " 'L1_SingleEG28_FWD2p5',\n",
       " 'L1_SingleEG28er1p5',\n",
       " 'L1_SingleEG28er2p1',\n",
       " 'L1_SingleEG28er2p5',\n",
       " 'L1_SingleEG34er2p5',\n",
       " 'L1_SingleEG36er2p5',\n",
       " 'L1_SingleEG38er2p5',\n",
       " 'L1_SingleEG40er2p5',\n",
       " 'L1_SingleEG42er2p5',\n",
       " 'L1_SingleEG45er2p5',\n",
       " 'L1_SingleEG50',\n",
       " 'L1_SingleEG60',\n",
       " 'L1_SingleEG8er2p5',\n",
       " 'L1_SingleIsoEG24er1p5',\n",
       " 'L1_SingleIsoEG24er2p1',\n",
       " 'L1_SingleIsoEG26er1p5',\n",
       " 'L1_SingleIsoEG26er2p1',\n",
       " 'L1_SingleIsoEG26er2p5',\n",
       " 'L1_SingleIsoEG28_FWD2p5',\n",
       " 'L1_SingleIsoEG28er1p5',\n",
       " 'L1_SingleIsoEG28er2p1',\n",
       " 'L1_SingleIsoEG28er2p5',\n",
       " 'L1_SingleIsoEG30er2p1',\n",
       " 'L1_SingleIsoEG30er2p5',\n",
       " 'L1_SingleIsoEG32er2p1',\n",
       " 'L1_SingleIsoEG32er2p5',\n",
       " 'L1_SingleIsoEG34er2p5',\n",
       " 'L1_SingleIsoTau32er2p1',\n",
       " 'L1_SingleJet10erHE',\n",
       " 'L1_SingleJet120',\n",
       " 'L1_SingleJet120_FWD3p0',\n",
       " 'L1_SingleJet120er2p5',\n",
       " 'L1_SingleJet12erHE',\n",
       " 'L1_SingleJet140er2p5',\n",
       " 'L1_SingleJet140er2p5_ETMHF70',\n",
       " 'L1_SingleJet140er2p5_ETMHF80',\n",
       " 'L1_SingleJet140er2p5_ETMHF90',\n",
       " 'L1_SingleJet160er2p5',\n",
       " 'L1_SingleJet180',\n",
       " 'L1_SingleJet180er2p5',\n",
       " 'L1_SingleJet200',\n",
       " 'L1_SingleJet20er2p5_NotBptxOR',\n",
       " 'L1_SingleJet20er2p5_NotBptxOR_3BX',\n",
       " 'L1_SingleJet35',\n",
       " 'L1_SingleJet35_FWD3p0',\n",
       " 'L1_SingleJet35er2p5',\n",
       " 'L1_SingleJet43er2p5_NotBptxOR_3BX',\n",
       " 'L1_SingleJet46er2p5_NotBptxOR_3BX',\n",
       " 'L1_SingleJet60',\n",
       " 'L1_SingleJet60_FWD3p0',\n",
       " 'L1_SingleJet60er2p5',\n",
       " 'L1_SingleJet8erHE',\n",
       " 'L1_SingleJet90',\n",
       " 'L1_SingleJet90_FWD3p0',\n",
       " 'L1_SingleJet90er2p5',\n",
       " 'L1_SingleLooseIsoEG26er1p5',\n",
       " 'L1_SingleLooseIsoEG26er2p5',\n",
       " 'L1_SingleLooseIsoEG28_FWD2p5',\n",
       " 'L1_SingleLooseIsoEG28er1p5',\n",
       " 'L1_SingleLooseIsoEG28er2p1',\n",
       " 'L1_SingleLooseIsoEG28er2p5',\n",
       " 'L1_SingleLooseIsoEG30er1p5',\n",
       " 'L1_SingleLooseIsoEG30er2p5',\n",
       " 'L1_SingleMu0_BMTF',\n",
       " 'L1_SingleMu0_DQ',\n",
       " 'L1_SingleMu0_EMTF',\n",
       " 'L1_SingleMu0_OMTF',\n",
       " 'L1_SingleMu10er1p5',\n",
       " 'L1_SingleMu12_DQ_BMTF',\n",
       " 'L1_SingleMu12_DQ_EMTF',\n",
       " 'L1_SingleMu12_DQ_OMTF',\n",
       " 'L1_SingleMu12er1p5',\n",
       " 'L1_SingleMu14er1p5',\n",
       " 'L1_SingleMu15_DQ',\n",
       " 'L1_SingleMu16er1p5',\n",
       " 'L1_SingleMu18',\n",
       " 'L1_SingleMu18er1p5',\n",
       " 'L1_SingleMu20',\n",
       " 'L1_SingleMu22',\n",
       " 'L1_SingleMu22_BMTF',\n",
       " 'L1_SingleMu22_DQ',\n",
       " 'L1_SingleMu22_EMTF',\n",
       " 'L1_SingleMu22_OMTF',\n",
       " 'L1_SingleMu22_OQ',\n",
       " 'L1_SingleMu25',\n",
       " 'L1_SingleMu3',\n",
       " 'L1_SingleMu5',\n",
       " 'L1_SingleMu6er1p5',\n",
       " 'L1_SingleMu7',\n",
       " 'L1_SingleMu7_DQ',\n",
       " 'L1_SingleMu7er1p5',\n",
       " 'L1_SingleMu8er1p5',\n",
       " 'L1_SingleMu9er1p5',\n",
       " 'L1_SingleMuCosmics',\n",
       " 'L1_SingleMuCosmics_BMTF',\n",
       " 'L1_SingleMuCosmics_EMTF',\n",
       " 'L1_SingleMuCosmics_OMTF',\n",
       " 'L1_SingleMuOpen',\n",
       " 'L1_SingleMuOpen_NotBptxOR',\n",
       " 'L1_SingleMuOpen_er1p1_NotBptxOR_3BX',\n",
       " 'L1_SingleMuOpen_er1p4_NotBptxOR_3BX',\n",
       " 'L1_SingleMuShower_Nominal',\n",
       " 'L1_SingleMuShower_Tight',\n",
       " 'L1_SingleTau120er2p1',\n",
       " 'L1_SingleTau130er2p1',\n",
       " 'L1_SingleTau70er2p1',\n",
       " 'L1_TOTEM_1',\n",
       " 'L1_TOTEM_2',\n",
       " 'L1_TOTEM_3',\n",
       " 'L1_TOTEM_4',\n",
       " 'L1_TripleEG16er2p5',\n",
       " 'L1_TripleEG_16_12_8_er2p5',\n",
       " 'L1_TripleEG_16_15_8_er2p5',\n",
       " 'L1_TripleEG_18_17_8_er2p5',\n",
       " 'L1_TripleEG_18_18_12_er2p5',\n",
       " 'L1_TripleJet_100_80_70_DoubleJet_80_70_er2p5',\n",
       " 'L1_TripleJet_105_85_75_DoubleJet_85_75_er2p5',\n",
       " 'L1_TripleJet_95_75_65_DoubleJet_75_65_er2p5',\n",
       " 'L1_TripleMu0',\n",
       " 'L1_TripleMu0_OQ',\n",
       " 'L1_TripleMu0_SQ',\n",
       " 'L1_TripleMu3',\n",
       " 'L1_TripleMu3_SQ',\n",
       " 'L1_TripleMu_2SQ_1p5SQ_0OQ',\n",
       " 'L1_TripleMu_2SQ_1p5SQ_0OQ_Mass_Max12',\n",
       " 'L1_TripleMu_3SQ_2p5SQ_0OQ_Mass_Max12',\n",
       " 'L1_TripleMu_5SQ_3SQ_0OQ',\n",
       " 'L1_TripleMu_5SQ_3SQ_0OQ_DoubleMu_5_3_SQ_OS_Mass_Max9',\n",
       " 'L1_TripleMu_5SQ_3SQ_0_DoubleMu_5_3_SQ_OS_Mass_Max9',\n",
       " 'L1_TripleMu_5_3_3',\n",
       " 'L1_TripleMu_5_3_3_SQ',\n",
       " 'L1_TripleMu_5_3p5_2p5',\n",
       " 'L1_TripleMu_5_3p5_2p5_DoubleMu_5_2p5_OS_Mass_5to17',\n",
       " 'L1_TripleMu_5_3p5_2p5_OQ_DoubleMu_5_2p5_OQ_OS_Mass_5to17',\n",
       " 'L1_TripleMu_5_4_2p5_DoubleMu_5_2p5_OS_Mass_5to17',\n",
       " 'L1_TripleMu_5_5_3',\n",
       " 'L1_UnpairedBunchBptxMinus',\n",
       " 'L1_UnpairedBunchBptxPlus',\n",
       " 'L1_ZeroBias',\n",
       " 'L1_ZeroBias_copy',\n",
       " 'L1_UnprefireableEvent',\n",
       " 'L1Reco_step',\n",
       " 'Flag_HBHENoiseFilter_pRECO',\n",
       " 'Flag_HBHENoiseIsoFilter_pRECO',\n",
       " 'Flag_CSCTightHaloFilter_pRECO',\n",
       " 'Flag_CSCTightHaloTrkMuUnvetoFilter_pRECO',\n",
       " 'Flag_CSCTightHalo2015Filter_pRECO',\n",
       " 'Flag_globalTightHalo2016Filter_pRECO',\n",
       " 'Flag_globalSuperTightHalo2016Filter_pRECO',\n",
       " 'Flag_HcalStripHaloFilter_pRECO',\n",
       " 'Flag_hcalLaserEventFilter_pRECO',\n",
       " 'Flag_EcalDeadCellTriggerPrimitiveFilter_pRECO',\n",
       " 'Flag_EcalDeadCellBoundaryEnergyFilter_pRECO',\n",
       " 'Flag_ecalBadCalibFilter_pRECO',\n",
       " 'Flag_goodVertices_pRECO',\n",
       " 'Flag_eeBadScFilter_pRECO',\n",
       " 'Flag_ecalLaserCorrFilter_pRECO',\n",
       " 'Flag_trkPOGFilters_pRECO',\n",
       " 'Flag_chargedHadronTrackResolutionFilter_pRECO',\n",
       " 'Flag_muonBadTrackFilter_pRECO',\n",
       " 'Flag_BadChargedCandidateFilter_pRECO',\n",
       " 'Flag_BadPFMuonFilter_pRECO',\n",
       " 'Flag_BadPFMuonDzFilter_pRECO',\n",
       " 'Flag_hfNoisyHitsFilter_pRECO',\n",
       " 'Flag_BadChargedCandidateSummer16Filter_pRECO',\n",
       " 'Flag_BadPFMuonSummer16Filter_pRECO',\n",
       " 'Flag_trkPOG_manystripclus53X_pRECO',\n",
       " 'Flag_trkPOG_toomanystripclus53X_pRECO',\n",
       " 'Flag_trkPOG_logErrorTooManyClusters_pRECO',\n",
       " 'Flag_METFilters_pRECO',\n",
       " 'HLTriggerFirstPath',\n",
       " 'HLT_AK8PFJet360_TrimMass30',\n",
       " 'HLT_AK8PFJet380_TrimMass30',\n",
       " 'HLT_AK8PFJet400_TrimMass30',\n",
       " 'HLT_AK8PFJet420_TrimMass30',\n",
       " 'HLT_AK8PFJet400_MassSD30',\n",
       " 'HLT_AK8PFJet420_MassSD30',\n",
       " 'HLT_AK8PFJet450_MassSD30',\n",
       " 'HLT_AK8DiPFJet250_250_MassSD30',\n",
       " 'HLT_AK8DiPFJet250_250_MassSD50',\n",
       " 'HLT_AK8DiPFJet260_260_MassSD30',\n",
       " 'HLT_AK8DiPFJet270_270_MassSD30',\n",
       " 'HLT_AK8PFHT750_TrimMass50',\n",
       " 'HLT_AK8PFHT800_TrimMass50',\n",
       " 'HLT_AK8PFHT850_TrimMass50',\n",
       " 'HLT_AK8PFHT900_TrimMass50',\n",
       " 'HLT_CaloJet500_NoJetID',\n",
       " 'HLT_CaloJet550_NoJetID',\n",
       " 'HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL',\n",
       " 'HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon',\n",
       " ...]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eventss.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "aaf09caf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Now at run 357442\n",
      "Have a batch with 2001 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 14443 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1494 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1200 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2101 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1982 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5639 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5355 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3974 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2361 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2987 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8710 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2641 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1788 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4116 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1201 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1869 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2044 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7223 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6674 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2140 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 384 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1903 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1062 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1408 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3923 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2291 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4170 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6117 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1316 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1884 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2017 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3590 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1910 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 871 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3627 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2620 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 12464 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 436 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 507 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1553 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 436 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2039 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1315 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1826 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2969 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3185 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 882 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1821 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2497 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 406 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2156 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1576 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4139 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2029 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10898 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6199 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2415 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1391 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2253 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6192 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4557 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4888 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1396 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 11789 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1382 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10319 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2814 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 703 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4225 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2004 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4261 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 992 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3269 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6373 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4123 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9108 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6063 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1401 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4131 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7926 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2138 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3912 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1790 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1810 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 445 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10888 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9294 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4457 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1842 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6861 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1573 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1128 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6164 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2091 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2506 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3780 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4161 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1889 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 603 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2881 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3358 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8175 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1497 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2127 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5918 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 582 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1940 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1794 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 984 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1057 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9994 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 583 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1986 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1915 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4045 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 881 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3745 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5453 events\n",
      "Results saved to ./output_results.root\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Have a batch with 1756 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4261 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 901 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1889 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1532 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 419 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8840 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6045 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 12421 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7712 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2076 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2579 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3818 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2364 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1319 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2103 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4557 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2240 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 858 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1108 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6885 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4017 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3959 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3014 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2122 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8351 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 695 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3043 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 936 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3949 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1630 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5146 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3609 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6404 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8404 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1853 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2293 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2281 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1324 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4743 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2412 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2170 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 543 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4142 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 969 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8249 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1231 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 888 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2162 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5327 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 16999 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 890 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5504 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9589 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1538 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7281 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2006 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1906 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3654 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8176 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2302 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2946 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2709 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2028 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1795 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2907 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3024 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5673 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4763 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5483 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3971 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3004 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1912 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1530 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 601 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1365 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 985 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1131 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 595 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1104 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 581 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10064 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5409 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1498 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2789 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2191 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 497 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1870 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4272 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2187 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2232 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1132 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1992 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1737 events\n",
      "Results saved to ./output_results.root\n"
     ]
    }
   ],
   "source": [
    "import argparse\n",
    "\n",
    "import sys\n",
    "sys.argv=['']\n",
    "del sys\n",
    "\n",
    "parser = argparse.ArgumentParser(prog='./ZtoEE_ZFit')\n",
    "parser.add_argument(\n",
    "    '-i', '--input', nargs='+',\n",
    "    help='specify input ntuple root files'\n",
    ")\n",
    "parser.add_argument(\n",
    "    '-o', '--output', default='./',\n",
    "    help='specify output directory'\n",
    ")\n",
    "parser.add_argument(\n",
    "    '--runs', nargs='*', default=None,\n",
    "    help='specify runs to be processed'\n",
    ")\n",
    "args = parser.parse_args()\n",
    "\n",
    "\n",
    "\n",
    "# acceptance cuts\n",
    "ptCut = 30\n",
    "etaCut = 2.5\n",
    "\n",
    "#mass binning \n",
    "mass_low = 76\n",
    "mass_hi = 106\n",
    "mass_nBins = 120         \n",
    "\n",
    "#lumisection binning \n",
    "lumi_nBins = 120\n",
    "lumi_low = 0.5\n",
    "lumi_hi = 1300.5\n",
    "\n",
    "#binning for histogram of number of primary ver\n",
    "pv_nBins = 100\n",
    "pv_low = 0.5 \n",
    "pv_hi = 100.5\n",
    "\n",
    "electronmass = 0.510998946\n",
    "etaBound = 0.9 \n",
    "\n",
    "dirOut = args.output\n",
    "if not os.path.isdir(dirOut):\n",
    "    print(f\"create output directory {dirOut}\")\n",
    "    os.mkdir(dirOut)\n",
    "    \n",
    "branches_electron = [\n",
    "    \"Electron_pt\",\"Electron_eta\",\"Electron_phi\",\"Electron_charge\",\"Electron_cutBased\"\n",
    "]\n",
    "\n",
    "branches_event = [\"luminosityBlock\",\"PV_npvs\"]\n",
    "\n",
    "# branches_tracks = [\"Track_pt\", \"Track_eta\", \"Track_phi\", \"Track_charge\"]\n",
    "\n",
    "# processing the event in batches to avoid using too much memory \n",
    "\n",
    "xrd_filelist = {f : \"Events\" for f in xrd_filelist}\n",
    "\n",
    "full_collection = None\n",
    "runs = [357442]\n",
    "\n",
    "for run in runs:\n",
    "    print(f\"Now at run {run}\")\n",
    "    hists = dict()\n",
    "    xx1 = np.array([])\n",
    "    yy1 = np.array([])\n",
    "    \n",
    "    histograms = {\n",
    "    \"h_mass_1idpass_BB\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_1idpass_BE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_1idpass_EE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_2idpass_BB\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_2idpass_BE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_2idpass_EE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,)\n",
    "}\n",
    "     \n",
    "\n",
    "    for batch in uproot.iterate(xrd_filelist,[\"luminosityBlock\", \"Electron_pt\", \"Electron_eta\",\"Electron_phi\",\"Electron_charge\",\"Electron_cutBased\", \"PV_npvs\"], filter_name=branches_event+branches_electron , cut=\"(run==357442) & HLT_Ele32_WPTight_Gsf & (nElectron>=2)\"):\n",
    "        if len(batch) == 0:\n",
    "            continue\n",
    "        print(f\"Have a batch with {len(batch)} events\")    \n",
    "        events = batch[branches_event]\n",
    "    \n",
    "    # histograms with number of primary vertices vs lumisection\n",
    "\n",
    "        xx1 = np.append(xx1,events[\"luminosityBlock\"].to_numpy())\n",
    "        \n",
    "        yy1 = np.append(yy1,events[\"PV_npvs\"].to_numpy())\n",
    "        \n",
    "        \n",
    "    # electron objects\n",
    "        electrons = batch[branches_electron]\n",
    "    \n",
    "    # rename\n",
    "    \n",
    "        electrons[\"pt\"] = electrons[\"Electron_pt\"]\n",
    "        electrons[\"eta\"] = electrons[\"Electron_eta\"]\n",
    "        electrons[\"phi\"] = electrons[\"Electron_phi\"]\n",
    "        electrons[\"charge\"] = electrons[\"Electron_charge\"]\n",
    "        electrons[\"cut\"] = electrons[\"Electron_cutBased\"]\n",
    "\n",
    "    # index of the electron within the event (needed to disambiguate)\n",
    "    \n",
    "        electrons[\"index\"] = ak.local_index(electrons[\"Electron_pt\"])\n",
    "    \n",
    "    # collection of electrons that pass ID and hlt(trigger pro)\n",
    "    \n",
    "        id_pass = electrons[(electrons[\"pt\"] > ptCut) & (abs(electrons[\"eta\"]) < etaCut)& (electrons[\"cut\"]>=3)]\n",
    "\n",
    "    # collection of electrons that pass ID and fail hlt\n",
    "        \n",
    "        id_fail = electrons[(electrons[\"pt\"] > ptCut) & (abs(electrons[\"eta\"]) < etaCut) &(electrons[\"cut\"]<3)]\n",
    "   \n",
    "    # build pairs from the specified collections, compute masses, and fill histograms\n",
    "    \n",
    "    \n",
    "        def produce(name, tags, probes=None, disambiguate=False):\n",
    "            \n",
    "            BB = []\n",
    "            BE = []\n",
    "            EE = []\n",
    "            \n",
    "            # 1.) build pairs\n",
    "            if probes is None:\n",
    "                p_charge = ak.combinations(tags[\"charge\"], 2)        \n",
    "                lefts, rights = ak.unzip(p_charge)\n",
    "                mask_p = lefts*rights == -1\n",
    "\n",
    "                p_pt = ak.combinations(tags[\"pt\"], 2)[mask_p]\n",
    "                p_eta = ak.combinations(tags[\"eta\"], 2)[mask_p]\n",
    "                p_phi = ak.combinations(tags[\"phi\"], 2)[mask_p]\n",
    "            \n",
    "            else:              \n",
    "                p_charge = ak.cartesian([tags[\"charge\"], probes[\"charge\"]])        \n",
    "                l_charge , r_charge = ak.unzip(p_charge)\n",
    "                mask_p = l_charge*r_charge == -1\n",
    "                if disambiguate:\n",
    "                    p_idx = ak.cartesian([tags[\"index\"], probes[\"index\"]])\n",
    "                    l_idx, r_idx = ak.unzip(p_idx)\n",
    "                    mask_p = mask_p & (l_idx != r_idx)\n",
    "\n",
    "                p_pt = ak.cartesian([tags[\"pt\"],probes[\"pt\"]])[mask_p]\n",
    "                p_eta = ak.cartesian([tags[\"eta\"],probes[\"eta\"]])[mask_p]\n",
    "                p_phi = ak.cartesian([tags[\"phi\"],probes[\"phi\"]])[mask_p]\n",
    "            l_eta, r_eta = ak.unzip(p_eta)\n",
    "\n",
    "            l_pt , r_pt = ak.unzip(p_pt)\n",
    "\n",
    "            \n",
    "            l_phi, r_phi = ak.unzip(p_phi)\n",
    "\n",
    "            ele1 = vector.obj(pt=l_pt, phi=l_phi, eta=l_eta, mass=l_pt*0+electronmass)\n",
    "            ele2 = vector.obj(pt=r_pt, phi=r_phi, eta=r_eta, mass=r_pt*0+electronmass)\n",
    "\n",
    "            masses = (ele1 + ele2).mass\n",
    "            mask_mass = (masses > mass_low) & (masses < mass_hi)\n",
    "        \n",
    "        \n",
    "        # 3.) Fill histograms    \n",
    "            \n",
    "            for region, mask_eta in (\n",
    "                (\"BB\", (abs(l_eta) < etaBound) & (abs(r_eta) < etaBound)),\n",
    "                (\"BE\", (abs(l_eta) < etaBound) != (abs(r_eta) < etaBound)),\n",
    "                (\"EE\", (abs(l_eta) >= etaBound) & (abs(r_eta) >= etaBound))\n",
    "             ):\n",
    "\n",
    "                \n",
    "                yy = masses[mask_eta & mask_mass]   # select tag and probe pairs in eta and mass range\n",
    "                xx = events[\"luminosityBlock\"]\n",
    "#                 print(f\"\\nRegion: {region}\")\n",
    "#                 print(f\"Mask count for region '{region}': {len(yy)} events\")\n",
    "\n",
    "                # pair multiplicities in each event \n",
    "                # counts = ak.num(yy)                                                                   \n",
    "                \n",
    "                # bring the event by event array into the same dimension\n",
    "                if len(xx) > 0:\n",
    "                \n",
    "                    xx = ak.unflatten(xx,counts=1)\n",
    "                # bring the arrays into the same form\n",
    "                    xx, yy = ak.broadcast_arrays(xx,yy)\n",
    "                 \n",
    "                    xx = ak.flatten(xx).to_numpy()\n",
    "                \n",
    "                    yy = ak.flatten(yy).to_numpy()\n",
    "                    \n",
    "                    pairs = np.column_stack((xx, yy))\n",
    "                    \n",
    "                    if region == \"BB\":\n",
    "                        BB.extend(pairs)\n",
    "                    elif region == \"BE\":\n",
    "                        BE.extend(pairs)\n",
    "                    elif region == \"EE\":\n",
    "                        EE.extend(pairs)\n",
    "\n",
    "\n",
    "            BB, BE, EE = map(lambda x: np.array(x).reshape(-1, 2), (BB, BE, EE))\n",
    "\n",
    "            \n",
    "            for region_data , region_name in zip([BB,BE,EE],[\"BB\",\"BE\",\"EE\"]):\n",
    "                if len(region_data)>0 :\n",
    "                    xx_region = region_data[:,0] \n",
    "                    yy_region = region_data[:,1]\n",
    "                \n",
    "#                     h2 = hist.Hist(hist.axis.Regular(120,0.5,1300.5,name=\"luminosity\"),hist.axis.Regular(120,76,106,name=\"mass_z\"),)   \n",
    "#                     h2.fill(np.array(xx_region) , np.array(yy_region)) \n",
    "                \n",
    "                    specific_name = f\"h_mass_{name}_{region_name}\"\n",
    "    \n",
    "    \n",
    "                    histograms[specific_name].fill(xx_region, yy_region)\n",
    "        \n",
    "\n",
    "            return histograms\n",
    "                \n",
    "\n",
    "        produce(\"1idpass\", id_pass, id_fail) \n",
    "        produce(\"2idpass\",id_pass)\n",
    "        \n",
    "        # Save histograms\n",
    "        h1 = hist.Hist(hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"), hist.axis.Regular(100, 0.5, 100.5, name=\"Npv\"),)\n",
    "        h1.fill(np.array(xx1), np.array(yy1))\n",
    "        \n",
    "        \n",
    "        file_path = os.path.join(dirOut, \"output_results.root\")\n",
    "        with uproot.recreate(file_path) as root_file:\n",
    "            root_file[\"histnpv\"] = h1\n",
    "            \n",
    "\n",
    "            for name, hist_obj in histograms.items():\n",
    " \n",
    "                root_file[name] = hist_obj\n",
    "                    \n",
    "\n",
    "        print(f\"Results saved to {file_path}\")\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "122a3327",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_EE\"]\n",
    "\n",
    "values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "\n",
    "\n",
    "x_bin_start1 = 1  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end1 = 41\n",
    "\n",
    "x_bin_start2 = 42  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end2 = 82\n",
    "\n",
    "x_bin_start3 = 83  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end3 = 123\n",
    "\n",
    "\n",
    "sliced_values1 = values[x_bin_start1:x_bin_end1 + 1, :]\n",
    "sliced_values2 = values[x_bin_start2:x_bin_end2 + 1, :]\n",
    "sliced_values3 = values[x_bin_start3:x_bin_end3 + 1, :]\n",
    "\n",
    "\n",
    "\n",
    "projected_values1 = sliced_values1.sum(axis=0)\n",
    "projected_values2 = sliced_values2.sum(axis=0)\n",
    "projected_values3 = sliced_values3.sum(axis=0)\n",
    "\n",
    "\n",
    "# y-axis bin edges remain the same\n",
    "y_bin_edges = edges_mass\n",
    "# print(projected_values1)\n",
    "# print(y_bin_edges)\n",
    "# print(\"//////\")\n",
    "\n",
    "myHist = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "# myHist.view()[:] = projected_values1\n",
    "# myHist.view()[:] = projected_values2\n",
    "\n",
    "# print(projected_values1)\n",
    "# print(\"*****\")\n",
    "# print(projected_values2)\n",
    "\n",
    "file_path = os.path.join(dirOut, \"region_EE.root\")\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    myHist.view()[:] = projected_values1\n",
    "    root_file[\"my2dEE1\"] = myHist\n",
    "    myHist.view()[:] = projected_values2\n",
    "    root_file[\"my2dEE2\"] = myHist\n",
    "    myHist.view()[:] = projected_values3\n",
    "    root_file[\"my2dEE3\"] = myHist\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e9c52996",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import uproot\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BE\"]\n",
    "\n",
    "values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "\n",
    "\n",
    "x_bin_start4 = 1  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end4 = 41\n",
    "\n",
    "x_bin_start5 = 42  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end5 = 82\n",
    "\n",
    "x_bin_start6 = 83  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end6 = 123\n",
    "\n",
    "\n",
    "sliced_values4 = values[x_bin_start4:x_bin_end4 + 1, :]\n",
    "sliced_values5 = values[x_bin_start5:x_bin_end5 + 1, :]\n",
    "sliced_values6 = values[x_bin_start6:x_bin_end6 + 1, :]\n",
    "\n",
    "\n",
    "\n",
    "projected_values4 = sliced_values4.sum(axis=0)\n",
    "projected_values5 = sliced_values5.sum(axis=0)\n",
    "projected_values6 = sliced_values6.sum(axis=0)\n",
    "\n",
    "\n",
    "# y-axis bin edges remain the same\n",
    "y_bin_edges = edges_mass\n",
    "# print(projected_values1)\n",
    "# print(y_bin_edges)\n",
    "# print(\"//////\")\n",
    "\n",
    "myHist = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "# myHist.view()[:] = projected_values1\n",
    "# myHist.view()[:] = projected_values2\n",
    "\n",
    "# print(projected_values1)\n",
    "# print(\"*****\")\n",
    "# print(projected_values2)\n",
    "\n",
    "file_path = os.path.join(dirOut, \"region_BE.root\")\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    myHist.view()[:] = projected_values4\n",
    "    root_file[\"my2dBE1\"] = myHist\n",
    "    myHist.view()[:] = projected_values5\n",
    "    root_file[\"my2dBE2\"] = myHist\n",
    "    myHist.view()[:] = projected_values6\n",
    "    root_file[\"my2dBE3\"] = myHist\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "27943760",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_BB\"]\n",
    "\n",
    "values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "\n",
    "\n",
    "x_bin_start7 = 1  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end7 = 26\n",
    "\n",
    "x_bin_start8 = 27  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end8 = 52\n",
    "\n",
    "x_bin_start9 = 53  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end9 = 78\n",
    "\n",
    "x_bin_start10 = 79  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end10 = 104\n",
    "\n",
    "x_bin_start11 = 105  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end11 = 130\n",
    "\n",
    "\n",
    "sliced_values7 = values[x_bin_start7:x_bin_end7 + 1, :]\n",
    "sliced_values8 = values[x_bin_start8:x_bin_end8 + 1, :]\n",
    "sliced_values9 = values[x_bin_start9:x_bin_end9 + 1, :]\n",
    "sliced_values10 = values[x_bin_start10:x_bin_end10 + 1, :]\n",
    "sliced_values11 = values[x_bin_start11:x_bin_end11 + 1, :]\n",
    "\n",
    "\n",
    "\n",
    "projected_values7 = sliced_values7.sum(axis=0)\n",
    "projected_values8 = sliced_values8.sum(axis=0)\n",
    "projected_values9 = sliced_values9.sum(axis=0)\n",
    "projected_values10 = sliced_values10.sum(axis=0)\n",
    "projected_values11 = sliced_values11.sum(axis=0)\n",
    "\n",
    "\n",
    "\n",
    "# y-axis bin edges remain the same\n",
    "y_bin_edges = edges_mass\n",
    "# print(projected_values1)\n",
    "# print(y_bin_edges)\n",
    "# print(\"//////\")\n",
    "\n",
    "myHist = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "# myHist.view()[:] = projected_values1\n",
    "# myHist.view()[:] = projected_values2\n",
    "\n",
    "# print(projected_values1)\n",
    "# print(\"*****\")\n",
    "# print(projected_values2)\n",
    "\n",
    "file_path = os.path.join(dirOut, \"region_BB.root\")\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    myHist.view()[:] = projected_values7\n",
    "    root_file[\"my2dBB1\"] = myHist\n",
    "    myHist.view()[:] = projected_values8\n",
    "    root_file[\"my2dBB2\"] = myHist\n",
    "    myHist.view()[:] = projected_values9\n",
    "    root_file[\"my2dBB3\"] = myHist\n",
    "    myHist.view()[:] = projected_values10\n",
    "    root_file[\"my2dBB4\"] = myHist\n",
    "    myHist.view()[:] = projected_values11\n",
    "    root_file[\"my2dBB5\"] = myHist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "0994b6d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed h_mass_2idpass_EE\n",
      "Projected values 1: [ 21.  13.  14.  30.  12.  15.  24.  25.  32.  29.  23.  31.  23.  31.\n",
      "  30.  35.  42.  38.  45.  48.  35.  47.  65.  61.  58.  64.  69.  81.\n",
      " 103.  95.  95. 102. 124.  96. 140. 116. 135. 154. 148. 212. 188. 200.\n",
      " 204. 216. 228. 266. 274. 280. 304. 339. 373. 337. 345. 387. 377. 407.\n",
      " 410. 435. 395. 408. 430. 411. 415. 373. 364. 367. 340. 313. 280. 268.\n",
      " 241. 237. 203. 196. 150. 176. 146. 131. 111. 107.  89.  80.  84.  76.\n",
      "  64.  60.  47.  38.  51.  34.  35.  27.  23.  33.  27.  22.  26.  24.\n",
      "  19.  16.  17.  15.  16.  12.  10.   8.  18.  11.   7.   8.  12.  13.\n",
      "  11.  22.  10.   9.  17.   7.  11.   8.]\n",
      "Projected values 2: [ 10.  15.  12.  17.  17.  20.  15.  12.  17.  33.  22.  30.  21.  20.\n",
      "  29.  43.  27.  34.  46.  43.  34.  41.  62.  55.  46.  44.  49.  69.\n",
      "  72.  80.  78.  85.  87.  79. 103. 123. 118. 129. 143. 169. 170. 159.\n",
      " 201. 219. 237. 244. 224. 258. 277. 281. 328. 299. 328. 307. 325. 346.\n",
      " 337. 356. 349. 359. 364. 340. 345. 329. 327. 289. 285. 276. 280. 257.\n",
      " 210. 202. 187. 171. 151. 157. 112. 120. 103. 109.  80.  81.  59.  50.\n",
      "  62.  56.  40.  48.  41.  31.  29.  34.  26.  18.  22.  28.  27.  20.\n",
      "  17.  17.  24.  10.  11.  13.   9.  13.  11.   9.   6.   9.  11.   4.\n",
      "   6.   9.   9.  12.   4.  10.  11.   5.]\n",
      "Projected values 3: [  9.  12.  10.  11.  16.  12.  16.  14.  15.  18.  26.  17.  18.  22.\n",
      "  20.  20.  22.  31.  23.  28.  31.  41.  39.  39.  52.  46.  52.  59.\n",
      "  77.  57.  69.  65.  65.  84.  87.  81. 105. 102. 117. 130. 125. 133.\n",
      " 140. 169. 180. 198. 185. 186. 198. 229. 224. 238. 256. 267. 280. 305.\n",
      " 284. 284. 309. 352. 269. 294. 283. 241. 239. 283. 247. 220. 201. 191.\n",
      " 198. 170. 161. 139. 115. 103. 103.  93.  70.  78.  88.  64.  44.  45.\n",
      "  30.  43.  42.  26.  30.  35.  32.  26.  25.  28.  22.  12.  23.  15.\n",
      "  12.  11.  13.  21.  10.   6.  13.  13.   7.  14.  10.   8.  11.   5.\n",
      "   3.   9.   6.   8.  12.   4.  10.   7.]\n",
      "Processed h_mass_1idpass_EE\n",
      "Projected values 1: [ 14.  18.  12.  12.  20.  17.  15.  21.  17.  18.  17.  16.  15.  28.\n",
      "  24.  21.  21.  20.  24.  22.  27.  19.  26.  29.  31.  32.  36.  35.\n",
      "  41.  53.  52.  52.  49.  52.  57.  60.  48.  66.  61.  76.  85.  76.\n",
      "  63.  83.  88.  80.  86.  91.  77.  88.  97.  95. 112. 105. 102. 102.\n",
      " 127. 118. 132.  97. 110. 104. 121.  99. 109. 102.  85.  89.  98.  64.\n",
      "  65.  64.  60.  47.  45.  58.  45.  40.  39.  34.  31.  32.  30.  32.\n",
      "  15.  30.  14.  15.  13.  14.  22.  14.  15.  14.  13.  11.  15.   8.\n",
      "  16.  11.  16.   8.  11.   9.   3.   6.   6.   7.  10.   6.   6.   6.\n",
      "  10.  10.   6.   9.   8.   8.   4.   9.]\n",
      "Projected values 2: [ 11.  22.  10.  13.  10.  11.  17.  10.  12.  11.  15.  15.  17.  26.\n",
      "  17.   9.  17.  23.  19.  20.  30.  22.  28.  31.  29.  21.  29.  34.\n",
      "  42.  42.  34.  50.  40.  35.  42.  48.  57.  41.  52.  47.  64.  59.\n",
      "  58.  64.  75.  61.  88.  81.  91.  79.  83.  80.  81.  86.  89.  81.\n",
      "  92. 103. 103.  82.  75.  84.  86.  92.  84.  73.  91.  78.  65.  57.\n",
      "  56.  62.  64.  49.  41.  34.  39.  40.  28.  22.  30.  26.  15.  25.\n",
      "  12.  18.  17.  14.  11.  17.  13.  13.  11.  15.   9.   8.   5.  13.\n",
      "   8.   8.   4.  11.  10.  13.  11.   4.   6.   8.   6.  10.   5.   8.\n",
      "   3.   7.  11.   3.   5.   8.  11.   1.]\n",
      "Projected values 3: [16. 14. 10. 11. 13. 13.  9. 12.  7. 14. 12. 10. 11. 13.  8. 20. 17. 16.\n",
      " 18. 16. 17. 17. 18. 20. 25. 17. 25. 20. 21. 25. 36. 25. 33. 21. 24. 26.\n",
      " 34. 29. 37. 58. 44. 41. 42. 49. 52. 47. 43. 66. 49. 56. 61. 69. 67. 75.\n",
      " 76. 85. 71. 71. 80. 53. 74. 71. 62. 78. 58. 67. 49. 62. 43. 40. 44. 35.\n",
      " 39. 30. 30. 24. 19. 31. 16. 31. 27. 20. 16. 13. 19. 14. 14. 14. 17. 12.\n",
      "  9. 13. 14. 11. 11.  8.  9.  9.  5.  8.  3.  6.  2.  3.  6.  5.  6. 11.\n",
      "  4.  5.  5.  8.  4.  5.  6.  2.  5.  4.  2.  3.]\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unrecognized type cannot be written to a ROOT file: list",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_439/750285051.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhist_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprocessed_results\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;31m# Save each projection and histogram to the ROOT file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m             \u001b[0mroot_file\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"{hist_name}_proj1\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"projected_values_1\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m             \u001b[0mroot_file\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"{hist_name}_proj2\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"projected_values_2\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m             \u001b[0mroot_file\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"{hist_name}_proj3\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"projected_values_3\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/uproot/writing/writable.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, where, what)\u001b[0m\n\u001b[1;32m    956\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msink\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclosed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    957\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cannot write data to a closed file\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 958\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mwhat\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    959\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    960\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__delitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/uproot/writing/writable.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, pairs, **more_pairs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m                 \u001b[0mdirectory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdirectory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0muproot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriting\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midentify\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_to_directory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdirectory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstreamers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cascading\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstreamers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_streamers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msink\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstreamers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/uproot/writing/identify.py\u001b[0m in \u001b[0;36madd_to_directory\u001b[0;34m(obj, name, directory, streamers)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0mwritable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_writable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mrawstreamer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mwritable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_rawstreamers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/uproot/writing/identify.py\u001b[0m in \u001b[0;36mto_writable\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m    638\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    639\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 640\u001b[0;31m         raise TypeError(\n\u001b[0m\u001b[1;32m    641\u001b[0m             \u001b[0;34m\"unrecognized type cannot be written to a ROOT file: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    642\u001b[0m         )\n",
      "\u001b[0;31mTypeError\u001b[0m: unrecognized type cannot be written to a ROOT file: list"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import uproot\n",
    "import hist\n",
    "import os\n",
    "\n",
    "# Define the list of histogram names you want to process\n",
    "hist_names = [\"h_mass_2idpass_EE\", \"h_mass_1idpass_EE\"]\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Define an output dictionary to store the processed results for each histogram\n",
    "processed_results = {}\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    # Iterate over each histogram name\n",
    "    for hist_name in hist_names:\n",
    "        # Access the histogram data for the current component\n",
    "        uproot_hist = root_file_2[hist_name]\n",
    "        values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "        # Define bin ranges for slicing\n",
    "        x_bin_start_1 = 1   # This is the first bin in your selection (second bin in ROOT convention)\n",
    "        x_bin_end_1 = 41\n",
    "\n",
    "        x_bin_start_2 = 42   # This is the first bin in your second selection (second bin in ROOT convention)\n",
    "        x_bin_end_2 = 82\n",
    "        \n",
    "        x_bin_start_3 = 83   # This is the first bin in your second selection (second bin in ROOT convention)\n",
    "        x_bin_end_3 = 123\n",
    "        \n",
    "\n",
    "        # Slice and project the data based on the bin ranges\n",
    "        sliced_values_1 = values[x_bin_start1:x_bin_end1 + 1, :]\n",
    "        sliced_values_2 = values[x_bin_start2:x_bin_end2 + 1, :]\n",
    "        sliced_values_3 = values[x_bin_start3:x_bin_end3 + 1, :]\n",
    "        \n",
    "\n",
    "        projected_values_1 = sliced_values_1.sum(axis=0)\n",
    "        projected_values_2 = sliced_values_2.sum(axis=0)\n",
    "        projected_values_3 = sliced_values_3.sum(axis=0)\n",
    "        \n",
    "\n",
    "        # Define y-axis bin edges, which remain the same\n",
    "        y_bin_edges = edges_mass\n",
    "\n",
    "        # Create histograms for the projections using `hist` library\n",
    "        myHist = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        \n",
    "\n",
    "        # Store processed projections and histograms in the results dictionary\n",
    "        processed_results[hist_name] = {\n",
    "            \"projected_values_1\": projected_values_1,\n",
    "            \"projected_values_2\": projected_values_2,\n",
    "            \"projected_values_3\": projected_values_3,\n",
    "            \n",
    "            \"histogram\": myHist\n",
    "        }\n",
    "\n",
    "        # Optionally print for each histogram\n",
    "        print(f\"Processed {hist_name}\")\n",
    "        print(\"Projected values 1:\", projected_values_1)\n",
    "        print(\"Projected values 2:\", projected_values_2)\n",
    "        print(\"Projected values 3:\", projected_values_3)\n",
    "        \n",
    "\n",
    "#     Example of saving to a new ROOT file\n",
    "    dirOut = \"output_directory\"  # Specify your output directory\n",
    "    os.makedirs(dirOut, exist_ok=True)\n",
    "    file_path = os.path.join(dirOut, \"testID_second.root\")\n",
    "    with uproot.recreate(file_path) as root_file:\n",
    "        for hist_name, result in processed_results.items():\n",
    "            # Save each projection and histogram to the ROOT file\n",
    "            root_file[f\"{hist_name}_proj1\"] = result[\"projected_values_1\"].tolist()\n",
    "            root_file[f\"{hist_name}_proj2\"] = result[\"projected_values_2\"].tolist()\n",
    "            root_file[f\"{hist_name}_proj3\"] = result[\"projected_values_3\"].tolist()\n",
    "            \n",
    "            root_file[f\"{hist_name}_hist\"] = result[\"histogram\"]          \n",
    "            \n",
    "            \n",
    "print(\"All histograms processed and saved.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5a321c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a12e432e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "889a0602",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d12f42d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import mplhep as hep\n",
    "hep.style.use(\"CMS\") \n",
    "import numpy as np\n",
    "\n",
    "def plot_model(model, data, scale=1, plot_data=True, label=\"model\", color=\"red\", linestyle=\"-\"):  \n",
    "\n",
    "    lower, upper = data.data_range.limit1d\n",
    "    x = np.linspace(lower, upper, num=1000) \n",
    "    y = model.ext_pdf(x)\n",
    "    y *= scale\n",
    "    plt.plot(x, y, label=label, color=color, linestyle=linestyle)\n",
    "    \n",
    "    if plot_data:\n",
    "        y, x = data.to_hist().to_numpy()\n",
    "        xerr = (x[1:] - x[:-1])/2.\n",
    "        x = x[:-1] + (x[1:] - x[:-1])/2.\n",
    "\n",
    "        plt.errorbar(x, y, xerr=xerr, yerr=np.sqrt(y), label=\"Data\", \n",
    "            fmt=\"ko\", ecolor='black', elinewidth=1.0, capsize=1.0, barsabove=True, markersize=4)\n",
    "\n",
    "def plot_comp_model(model, data, name=\"\", bkg=None, sig=None):\n",
    "    plt.figure()\n",
    "\n",
    "    if bkg:\n",
    "        plot_model(bkg, data, plot_data=False, label=\"bkg\", color=\"green\", linestyle=\"--\")\n",
    "    if sig:\n",
    "        plot_model(sig, data, plot_data=False, label=\"sig\", color=\"blue\", linestyle=\"--\")\n",
    "\n",
    "    plot_model(model, data)\n",
    "    plt.legend()\n",
    "\n",
    "    plt.savefig(\"fit_{0}.png\".format(name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "80999498",
   "metadata": {},
   "outputs": [],
   "source": [
    "import zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "758cff26",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import zfit_physics as zphysics\n",
    "\n",
    "# signal models -----------------------------------------\n",
    "# ZMASS = zfit.Parameter('mass', 91.1876, floating=False)\n",
    "# ZWIDTH = zfit.Parameter('width', 2.4952, floating=False)\n",
    "\n",
    "# resolution functions ---------------------------------|--------\n",
    "\n",
    "\n",
    "def zmzw_create():\n",
    "    \n",
    "    ZMASS = zfit.Parameter('mass', 91.1876, floating=False)\n",
    "\n",
    "    ZWIDTH = zfit.Parameter('width', 2.4952, floating=False)\n",
    "    \n",
    "    return ZWIDTH , ZMASS\n",
    "\n",
    "# resolution functions\n",
    "def get_func(obs, name):\n",
    "    if name == \"bw\":\n",
    "        mymass = zmzw_create()[1]\n",
    "        mywidth = zmzw_create()[0]\n",
    "        print(mymass, \"\\t\",mywidth )\n",
    "        return zfit.pdf.Gauss( mu=mymass, sigma=mywidth, obs=obs)\n",
    "        ###zphysics.pdf.RelativisticBreitWigner\n",
    "    \n",
    "def get_resolution(name, category=\"\"):\n",
    "    if name == \"gauss\":\n",
    "        return zfit.pdf.Gauss(\n",
    "            obs=zfit.Space('x', (-10., 10.)), \n",
    "            mu=zfit.Parameter('sig_mu_{0}'.format(category), 0, -2.5, 2.5), \n",
    "            sigma=zfit.Parameter('sig_sigma_{0}'.format(category), 2, 0.1, 5))\n",
    "    elif name == \"cb\":\n",
    "        return zfit.pdf.CrystalBall(\n",
    "            obs=zfit.Space('x', (-10., 10.)), \n",
    "            mu=zfit.Parameter('sig_mu_{0}'.format(category), 0, -2.5, 2.5), \n",
    "            sigma=zfit.Parameter('sig_sigma_{0}'.format(category), 2, 0.1, 5),\n",
    "            alpha=zfit.Parameter('sig_alpha_{0}'.format(category), 5, 0, 20),\n",
    "            n=zfit.Parameter('sig_n_{0}'.format(category), 5,0.5,10),\n",
    "            )        \n",
    "\n",
    "def get_signal(obs, func=\"bw\", resolution=\"gauss\", category=\"\"):\n",
    "    \n",
    "    func = get_func(obs, func)\n",
    "\n",
    "    if resolution == None:\n",
    "        return func\n",
    "    \n",
    "    return zfit.pdf.FFTConvPDFV1(func, get_resolution(resolution, category), obs=obs, interpolation=\"spline:3\")\n",
    "    \n",
    "    \n",
    "#background models\n",
    "\n",
    "def get_background(obs, func=\"exp\", category=\"\"):\n",
    "\n",
    "    if func == \"uniform\":\n",
    "        return zfit.pdf.Uniform(obs=obs)\n",
    "    elif func == \"exp\":\n",
    "        return zfit.pdf.Exponential(zfit.Parameter('bkg_lambda_{0}'.format(category), -0.01, -0.5, 1.0), obs=obs)\n",
    "    elif func == \"chebyshev\":\n",
    "        return zfit.pdf.Chebyshev(coeffs=[zfit.Parameter('bkg_{0}_{1}'.format(i, category), 0.0, -1.0, 1.0) for i in range(3)], obs=obs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "d4afd98b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "59b0dd97",
   "metadata": {},
   "outputs": [],
   "source": [
    "# expected signal fraction for initial\n",
    "signal_fraction = {\n",
    "\n",
    "    \"ID_pass\": 0.98,\n",
    "    \"ID_fail\": 0.5\n",
    "    \n",
    "}\n",
    "\n",
    "def myfit(hist_obj, nBins, binLo, binHi, category):\n",
    "#     from python.zfit_models import get_signal, get_background\n",
    "#     from python.zfit_plot import plot_comp_model\n",
    "\n",
    "    category = category.replace(\" \",\"_\")\n",
    "\n",
    "    # unbinned\n",
    "    # create observable space\n",
    "    obs_nobin = zfit.Space(\"x\", limits=(binLo, binHi))\n",
    "\n",
    "#     binned\n",
    "    binning = zfit.binned.RegularBinning(nBins, binLo, binHi, name=\"x\")\n",
    "    obs = zfit.Space(\"x\", binning=binning)\n",
    "\n",
    "    data = zfit.data.BinnedData.from_hist(hist_obj)\n",
    "    \n",
    "    # #  create model\n",
    "\n",
    "    # signal component\n",
    "    sig = get_signal(obs_nobin, \"bw\", \"gauss\", category=category)\n",
    "\n",
    "\n",
    "    sig_yield = zfit.Parameter('sig_yield_{0}'.format(category), sum(hist_obj)*signal_fraction[category], 0, sum(hist_obj)*1.5, step_size=1)\n",
    "    sig.set_yield(sig_yield)\n",
    "\n",
    "    # combinatorial background\n",
    "    bkg = get_background(obs_nobin, \"chebyshev\", category=category)\n",
    "\n",
    "    bkg_yield = zfit.Parameter('bkg_yield_{0}'.format(category), sum(hist_obj)*(1-signal_fraction[category]), 0, sum(hist_obj)*1.5, step_size=1)\n",
    "    bkg.set_yield(bkg_yield)\n",
    "\n",
    "    model_nobin = zfit.pdf.SumPDF([sig, bkg])\n",
    "\n",
    "    # plot_comp_model(model_nobin, data, name=\"prefit\", bkg=bkg)x\n",
    "\n",
    "    model = zfit.pdf.BinnedFromUnbinnedPDF(model_nobin, obs)\n",
    "    loss = zfit.loss.ExtendedBinnedNLL(model, data, options = { \"numhess\" : False })\n",
    "    \n",
    "    # minimization\n",
    "    # minimizer = zfit.minimize.Minuit()\n",
    "    minimizer = zfit.minimize.ScipyTrustConstrV1(hessian = \"zfit\")\n",
    "    result = minimizer.minimize(loss)\n",
    "\n",
    "    status = result.valid\n",
    "\n",
    "    print(f\"status: {status}\")\n",
    "\n",
    "    try:\n",
    "        hessval = result.loss.hessian(list(result.params)).numpy()\n",
    "        cov = np.linalg.inv(hessval)\n",
    "        eigvals = np.linalg.eigvalsh(hessval)\n",
    "        covstatus = eigvals[0] > 0.\n",
    "    except:\n",
    "        cov = None\n",
    "        covstatus = False\n",
    "\n",
    "    print(f\"covariance status: {covstatus}\")\n",
    "\n",
    "    print(result)\n",
    "\n",
    "    plot_comp_model(model_nobin, data, bkg=bkg, name=category)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d3337087",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'axes'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_439/2976855225.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmyfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m120\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m120.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ID_pass\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/tmp/ipykernel_439/4029323207.py\u001b[0m in \u001b[0;36mmyfit\u001b[0;34m(hist_obj, nBins, binLo, binHi, category)\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0mobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSpace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinning\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbinning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBinnedData\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_hist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist_obj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0;31m# #  create model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/_data/binneddatav1.py\u001b[0m in \u001b[0;36mfrom_hist\u001b[0;34m(cls, h)\u001b[0m\n\u001b[1;32m    151\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mzfit\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSpace\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m         \u001b[0mspace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSpace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbinning\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhistaxes_to_binning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mznp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m         \u001b[0mvariances\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariances\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'axes'"
     ]
    }
   ],
   "source": [
    "myfit(hist_obj, 120, 0.5, 120.5, \"ID_pass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2ff2aad2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import zfit\n",
    "\n",
    "# Global parameter store to manage unique parameters for each call\n",
    "parameter_store = {}\n",
    "\n",
    "def zmzw_create(category):\n",
    "    unique_id = int(time.time() * 1000)  # Milliseconds timestamp for uniqueness\n",
    "    mass_name = f'mass_{category}_{unique_id}'\n",
    "    width_name = f'width_{category}_{unique_id}'\n",
    "\n",
    "    ZMASS = zfit.Parameter(mass_name, 91.1876, floating=False)\n",
    "    ZWIDTH = zfit.Parameter(width_name, 2.4952, floating=False)\n",
    "\n",
    "    parameter_store[(mass_name, width_name)] = (ZMASS, ZWIDTH)\n",
    "    \n",
    "    return ZMASS, ZWIDTH\n",
    "\n",
    "def get_func(obs, name, category):\n",
    "    if name == \"bw\":\n",
    "        mymass, mywidth = zmzw_create(category)\n",
    "        print(\"Mass:\", mymass, \"Width:\", mywidth)\n",
    "        return zfit.pdf.Gauss(mu=mymass, sigma=mywidth, obs=obs)\n",
    "\n",
    "def get_signal(obs, func=\"bw\", resolution=\"gauss\", category=\"\"):\n",
    "    func_model = get_func(obs, func, category)\n",
    "    if resolution is None:\n",
    "        return func_model\n",
    "    return func_model\n",
    "\n",
    "def myfit(hist_obj, nBins, binLo, binHi, category):\n",
    "    global parameter_store\n",
    "    parameter_store.clear()\n",
    "\n",
    "    obs_nobin = zfit.Space(\"obs\", limits=(binLo, binHi))\n",
    "\n",
    "    # Signal component\n",
    "    sig = get_signal(obs_nobin, \"bw\", \"gauss\", category=category)\n",
    "\n",
    "    # Yield estimate and limits\n",
    "    total_yield = sum(hist_obj)\n",
    "    estimated_yield = total_yield * 0.5\n",
    "    lower_limit = 0\n",
    "    upper_limit = total_yield * 1.5 if total_yield > 0 else 1.0  # Default non-zero upper limit\n",
    "\n",
    "    # Define the signal yield parameter with unique names\n",
    "    unique_id = int(time.time() * 1000)\n",
    "    sig_yield = zfit.Parameter(\n",
    "        f'sig_yield_{category}_{unique_id}', \n",
    "        estimated_yield, \n",
    "        lower_limit, \n",
    "        upper_limit, \n",
    "        step_size=1\n",
    "    )\n",
    "    sig.set_yield(sig_yield)\n",
    "\n",
    "    # Background component: Example with an exponential decay\n",
    "    bkg_lambda = zfit.Parameter(f\"bkg_lambda_{category}_{unique_id}\", -0.1, -1.0, 0.0)\n",
    "    bkg = zfit.pdf.Exponential(lam=bkg_lambda, obs=obs_nobin)\n",
    "    bkg_yield = zfit.Parameter(\n",
    "        f'bkg_yield_{category}_{unique_id}', \n",
    "        estimated_yield, \n",
    "        lower_limit, \n",
    "        upper_limit, \n",
    "        step_size=1\n",
    "    )\n",
    "    bkg.set_yield(bkg_yield)\n",
    "\n",
    "    # Combine signal and background components\n",
    "    model = zfit.pdf.SumPDF([sig, bkg], fracs=[sig_yield, bkg_yield])\n",
    "\n",
    "    print(\"Signal Yield:\", sig_yield)\n",
    "    print(\"Background Yield:\", bkg_yield)\n",
    "    \n",
    "    # return fit_results\n",
    "\n",
    "def plot_fit_result(hist_obj, model, obs, nBins, binLo, binHi):\n",
    "    # Define bin edges for the histogram\n",
    "    bin_edges = np.linspace(binLo, binHi, nBins + 1)\n",
    "    \n",
    "    # Plot the histogram\n",
    "    plt.hist(\n",
    "        bin_edges[:-1],\n",
    "        bins=bin_edges,\n",
    "        weights=hist_obj,\n",
    "        histtype=\"step\",\n",
    "        color=\"black\",\n",
    "        label=\"Data\",\n",
    "        linewidth=1.5,\n",
    "    )\n",
    "\n",
    "    # Generate points across the observable space for plotting the fit model\n",
    "    x_plot = np.linspace(binLo, binHi, 1000)\n",
    "    y_plot = model.pdf(x_plot, norm_range=obs).numpy() * sum(hist_obj) * (binHi - binLo) / nBins  # Scale to histogram\n",
    "\n",
    "    # Plot the fit model\n",
    "    plt.plot(x_plot, y_plot, label=\"Fit Model\", color=\"red\", linewidth=2)\n",
    "\n",
    "    # Add labels and legend\n",
    "    plt.xlabel(\"Observable\")\n",
    "    plt.ylabel(\"Counts\")\n",
    "    plt.title(\"Fit Result\")\n",
    "    plt.legend()\n",
    "    \n",
    "    # Show plot\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your fit model and histogram data\n",
    "    plot_fit_result(hist_obj, model, obs_nobin, 120, 0.5, 120.5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3b0ff988",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mass: <zfit.Parameter 'mass_ID_pass_1731132161450' floating=False value=91.19> Width: <zfit.Parameter 'width_ID_pass_1731132161450' floating=False value=2.495>\n",
      "Signal Yield: <zfit.Parameter 'sig_yield_ID_pass_1731132161462' floating=True value=4.559e+04>\n",
      "Background Yield: <zfit.Parameter 'bkg_yield_ID_pass_1731132161462' floating=True value=4.559e+04>\n"
     ]
    }
   ],
   "source": [
    "myfit(hist_obj, 120, 0.5, 120.5, \"ID_pass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb7e0492",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ff91963f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mass: <zfit.Parameter 'mass_test_category_1731132459255' floating=False value=91.19> Width: <zfit.Parameter 'width_test_category_1731132459255' floating=False value=2.495>\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import time\n",
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Global parameter store to manage unique parameters for each call\n",
    "parameter_store = {}\n",
    "\n",
    "def zmzw_create(category):\n",
    "    unique_id = int(time.time() * 1000)  # Milliseconds timestamp for uniqueness\n",
    "    mass_name = f'mass_{category}_{unique_id}'\n",
    "    width_name = f'width_{category}_{unique_id}'\n",
    "\n",
    "    ZMASS = zfit.Parameter(mass_name, 91.1876, floating=False)\n",
    "    ZWIDTH = zfit.Parameter(width_name, 2.4952, floating=False)\n",
    "\n",
    "    parameter_store[(mass_name, width_name)] = (ZMASS, ZWIDTH)\n",
    "    \n",
    "    return ZMASS, ZWIDTH\n",
    "\n",
    "def get_func(obs, name, category):\n",
    "    if name == \"bw\":\n",
    "        mymass, mywidth = zmzw_create(category)\n",
    "        print(\"Mass:\", mymass, \"Width:\", mywidth)\n",
    "        return zfit.pdf.Gauss(mu=mymass, sigma=mywidth, obs=obs)\n",
    "    return None\n",
    "\n",
    "def get_signal(obs, func=\"bw\", resolution=\"gauss\", category=\"\"):\n",
    "    func_model = get_func(obs, func, category)\n",
    "    if resolution is None:\n",
    "        return func_model\n",
    "    return func_model\n",
    "\n",
    "def myfit(hist_obj, nBins, binLo, binHi, category):\n",
    "    global parameter_store\n",
    "    parameter_store.clear()\n",
    "\n",
    "    obs_nobin = zfit.Space(\"obs\", limits=(binLo, binHi))\n",
    "\n",
    "    # Signal component\n",
    "    sig = get_signal(obs_nobin, \"bw\", \"gauss\", category=category)\n",
    "\n",
    "    # Yield estimate and limits\n",
    "    total_yield = sum(hist_obj)\n",
    "    estimated_yield = total_yield * 0.5\n",
    "    lower_limit = 0\n",
    "    upper_limit = total_yield * 1.5 if total_yield > 0 else 1.0  # Default non-zero upper limit\n",
    "\n",
    "    # Define the signal yield parameter with unique names\n",
    "    unique_id = int(time.time() * 1000)\n",
    "    sig_yield = zfit.Parameter(\n",
    "        f'sig_yield_{category}_{unique_id}', \n",
    "        estimated_yield, \n",
    "        lower_limit, \n",
    "        upper_limit, \n",
    "        step_size=1\n",
    "    )\n",
    "    sig.set_yield(sig_yield)\n",
    "\n",
    "    # Background component: Example with an exponential decay\n",
    "    bkg_lambda = zfit.Parameter(f\"bkg_lambda_{category}_{unique_id}\", -0.1, -1.0, 0.0)\n",
    "    bkg = zfit.pdf.Exponential(lam=bkg_lambda, obs=obs_nobin)\n",
    "    bkg_yield = zfit.Parameter(\n",
    "        f'bkg_yield_{category}_{unique_id}', \n",
    "        estimated_yield, \n",
    "        lower_limit, \n",
    "        upper_limit, \n",
    "        step_size=1\n",
    "    )\n",
    "    bkg.set_yield(bkg_yield)\n",
    "\n",
    "    # Combine signal and background components\n",
    "    model = zfit.pdf.SumPDF([sig, bkg], fracs=[sig_yield, bkg_yield])\n",
    "\n",
    "    # Return model for plotting\n",
    "    return model\n",
    "\n",
    "def plot_fit_result(hist_obj, model, obs, nBins, binLo, binHi):\n",
    "    # Define bin edges for the histogram\n",
    "    bin_edges = np.linspace(binLo, binHi, nBins + 1)\n",
    "    \n",
    "    # Create histogram from hist_obj (the data points)\n",
    "    hist, _ = np.histogram(hist_obj, bins=bin_edges)\n",
    "\n",
    "    # Plot the histogram\n",
    "    plt.hist(\n",
    "        bin_edges[:-1],  # Bin edges (excluding the last edge)\n",
    "        bins=bin_edges,  # Bin edges\n",
    "        weights=hist,    # Weights are the histogram counts\n",
    "        histtype=\"step\",\n",
    "        color=\"black\",\n",
    "        label=\"Data\",\n",
    "        linewidth=1.5,\n",
    "    )\n",
    "\n",
    "    # Generate points across the observable space for plotting the fit model\n",
    "    x_plot = np.linspace(binLo, binHi, 1000)\n",
    "    y_plot = model.pdf(x_plot, norm_range=obs).numpy() * sum(hist_obj) * (binHi - binLo) / nBins  # Scale to histogram\n",
    "\n",
    "    # Plot the fit model\n",
    "    plt.plot(x_plot, y_plot, label=\"Fit Model\", color=\"red\", linewidth=2)\n",
    "\n",
    "    # Add labels and legend\n",
    "    plt.xlabel(\"Observable\")\n",
    "    plt.ylabel(\"Counts\")\n",
    "    plt.title(\"Fit Result\")\n",
    "    plt.legend()\n",
    "    \n",
    "    # Show plot\n",
    "    plt.show()\n",
    "\n",
    "# # Example histogram data\n",
    "# hist_obj = np.random.normal(loc=91.2, scale=2.5, size=1000)  # Example histogram data\n",
    "\n",
    "# Perform fit and plot result\n",
    "model = myfit(hist_obj, 120, 0.5, 120.5, category=\"test_category\")\n",
    "plot_fit_result(hist_obj, model, zfit.Space(\"obs\", limits=(0.5, 120.5)), 120, 0.5, 120.5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c66f65c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
