{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4bda4fc4",
   "metadata": {},
   "source": [
    "# Accessing files from CERN EOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b09a06c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We use the Run 357442 from LHC Fill 8387 see (requires certificate) https://cmsoms.cern.ch/cms/fills/report?cms_fill=8387\n",
    "# we need these files: https://cmsweb.cern.ch/das/request?view=list&limit=50&instance=prod%2Fglobal&input=file+dataset%3D%2FEGamma%2FRun2022F-22Sep2023-v1%2FNANOAOD+run%3D361971\n",
    "# I got the filelist by running within a CMSSW envirnonment on lxplus\n",
    "#   voms-proxy-init --voms cms\n",
    "#   dasgoclient --query=\"file dataset=/EGamma/Run2022F-22Sep2023-v1/NANOAOD run=361971\"\n",
    "\n",
    "## Run2022C, run=357442 Fill=8124 Recorded Lumi = 309.53 pb-1\n",
    "\n",
    "filelist = [\n",
    "    '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/3c15f464-10bd-4ab8-9064-a509a3470c8a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/ac8e9d83-82a8-4d80-af0e-c8ada661a3b2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/f80a5b95-fe62-4f0d-a944-5241fb60aed8.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/94b4307d-743e-43ba-aacb-e24d62976a0c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/fe30838d-340e-4b6d-8a9d-dbf48b0769f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/2c381ce9-cebb-4ac2-bd86-fec266ae32ab.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/ac146ab1-4c62-4e59-9e47-97a0f27296c0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/91770f25-c595-417d-af06-0294ce83a54a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/b63f1a53-2f1c-49c1-9030-9cf128774737.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/617c9322-aa7b-4ab4-a76b-754aa976d193.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8a38772c-3521-4d31-b890-182129ec27a4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/77aae102-b491-4b59-b805-81756e10f9c9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/6120064a-8510-4c71-9e6d-f561acda3104.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/89bebe36-6b23-4425-936a-4736e2c5a7a2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/c1638809-d776-48ad-a636-086b3ad888e5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/fdfef697-4d08-47d9-adf4-96a5b57d53ba.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0709d59f-9ebb-4322-b6a4-5ac5b0920c46.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8774f467-3552-46ea-8cdb-bdc8e0325d72.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/254a37c2-b758-4ef6-9304-1483cb86bc00.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b3ed630c-4607-4c01-b43a-70a821a82e29.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f13df640-b2bb-455a-b12e-591bdcf478c9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2c7d3206-8253-4c71-aec1-a9c2ba306bd0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/64624550-d985-4dce-9a65-84d5c9f177b7.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/42521add-a1f8-45bb-9428-1bfaa9fb9552.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/48736d9f-ff08-4011-bae4-158a7a410dc3.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/91e83c4b-8163-434a-a834-49ca0447769a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/9c0e14d2-1dbd-46e0-b526-aadea8772b37.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/774adccc-2030-4081-b2dd-d419d596e5c2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/5f345cbf-ac95-4b40-9d65-0ed2e731a671.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c7888cb2-a9bf-46a2-8d70-030087226d2e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a6f13e9e-3018-46a3-a1bc-9c44ef3745bd.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/76d420f7-3069-4862-bd48-9b0fcb2957a4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/90c94494-d854-41dc-8ef3-829950fca9c5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bf7612bb-d5a8-427b-9c3b-6227e956e07c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4e7f4cab-c543-40cf-9962-d0467f51017c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/edc968c5-c8ae-4646-abde-94797f8f37bc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/060a2b92-8317-4633-b167-bf4a8f9bfe72.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8c41e42e-7e98-4eb5-8f80-9a674b86bfdc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4d17c297-6026-4dd7-b95c-82bab3e5b82c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9327925d-b457-4af2-908c-0c2633b4c2ff.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/52684bad-d9f1-4ddb-a949-fa5d692d4773.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/6dc6095c-7e75-44f5-adf8-24672304c683.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/ebde7b7f-8855-41fb-ac15-d223c8451d56.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/44b6df71-9516-42db-bb32-463e45d58b06.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/cbf47164-81b5-47a2-ae31-d68c7f5e722a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5fff0893-868e-41f7-8156-37e04c22bf9b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/995e6556-488b-4c78-aa5c-ebe61964d265.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0a668c2a-b08e-4b29-b26d-b3e8fcb5b57b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/55d5cc8e-6ff6-41ef-82fb-ff03220d1949.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/53d8b7cc-9394-4e14-b9a7-5fa9dc475ebd.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5ed16adc-ac33-4632-b758-44dfc29ed491.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/510000/61ef47ab-8a9e-464b-8702-1cffa353639b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/6acb7c3c-fd21-41e0-9d2b-c2aa7163395c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c29ec79c-3311-4c04-80ca-288c90fc7295.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/081192ec-f6f8-4f68-a9e2-2f2496ad8f85.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/7ced153b-2121-4754-9bce-e34d89b25c4c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8ee8ed5b-d529-4673-bd87-3b8e458b2731.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/98ca33fd-9157-430d-a13b-4974b5dea4df.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c1e52356-dcba-40f7-92c1-e4c1f0a64335.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/149e3cf1-87bc-4ce9-b8d2-3c2fa97dfe3d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/bc4b2934-339d-4765-8b6f-3e06467309da.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/236d332c-2c11-4906-9b67-54dc3db89f56.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b062eb78-b422-4e07-bb61-0b4616fbc161.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0f21827a-b6fa-4511-a5c2-9bc8916096fe.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/38c2ddcf-5d7c-41e6-a0a9-6bfa25ad103d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/fe1fee55-8d10-41ad-9e8e-50063e1640c0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bc20e209-8af5-4310-8891-274f56fd900c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b016544c-5379-434a-b76b-2ca9dcfb8c9e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f5c6ef9a-a623-44be-ad5b-bd537972572d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2579b84e-e72a-40e6-8171-e49c69ff6e77.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1499bb13-3cb7-4d2a-9501-f1b058b03d9f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/24354e75-d99b-4956-9ce7-f8787351bfd9.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/344a5e80-338c-472d-bdf4-933e66f9b658.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/f48fecb3-769e-49c0-9379-4c07fa52223d.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/1f3d4880-1d32-4683-9394-1433fe5952c0.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/15f76c07-c6fb-4ef9-bef8-28532c8b8077.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/d4c8236d-c92b-4f3c-976d-af4b8266b4b1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/dc5bd126-de1b-43ce-afc7-fb720a79d16b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/7ba028e4-8c25-40bb-ad00-6e9afb25b71d.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/f8499e1c-dff2-464f-a0f9-f7b4f32cef97.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/5a7724d2-c759-4946-9c16-fdcdd5fedb56.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/2a026df0-ba28-4e5e-8baf-2a01559d87f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/6f7be9a4-58c6-405b-85f7-473ea868ae58.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/1864bc31-46c6-4db7-8821-a3e365ea3eec.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f1321844-176c-49cc-83c8-215c7507c636.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/da1b734f-e837-42ea-9b56-13a1a196b285.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5332c4f1-783c-4f1e-86ca-7588aaff7bdc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/da0097c7-c9be-4ec4-bd60-145dfece59ed.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/6cb37c6e-9994-4af2-a4f9-025511ae90d2.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5c2eda6b-ede4-4c06-bb65-57dbe4e53427.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/c3e17de8-65be-4d2b-a9d8-b1e5c913d733.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/61aa820e-c1a5-4d13-9782-dc9545eb24f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/89e12e24-1410-470c-9944-5a877c5b31b7.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2ba08682-4b77-4c44-99b6-1b69d82e7dbb.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/68cb8e58-64f8-48bc-a22e-1e9ce62b527f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/76309f98-5cf4-41dd-9889-c10b04438a0c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9a8535b5-0ec1-44b9-a5cd-8f210404e3af.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4d7911c8-1024-422b-a3df-657fb95e3be4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/af4d17e5-b002-4148-8bf8-45689424d140.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/26541a02-8ad4-4ae9-959b-ba0ed5f70eda.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a89888f2-4aaf-457e-8ac1-72613bd7bd93.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/1d0edbfd-15cd-42b3-9396-76486bcc6b29.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/3d927b61-0e71-4778-a3c1-d438b44c4bd5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/eddec031-eaea-4f00-a40e-fd875ed76e7f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/6782e123-eaba-4aa8-924f-0db889a4f706.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/49cecabe-851d-4b13-ae4e-2f0891abf851.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/6a642882-ad9d-48bb-bca1-c0fdd2bd5cbd.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/020979ca-5879-4ace-bfc3-7893bdea4d37.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f3c4420c-dc5a-4d56-8f05-29174ff1b924.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9b4a8982-fae2-4824-ab20-b954aa89400c.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f23c8368-51bd-4cb6-83b1-71ac89d4b878.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bf49ad32-4f36-4364-aa27-6de1f75fd63a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b21feb7b-87c0-4e97-be99-d97cc07a76bf.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1c0532fc-4697-4e1c-9555-6334bd5e2659.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b2a83b11-af6e-4bd2-b872-f5306093144e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/a930bd63-be2f-41cf-b4e5-0df1720c9ebc.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/506e75cb-b256-412d-a32d-cebb0982830f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/a97687a8-83f6-4ad5-824a-d84e25bd53ec.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/ac53464f-c3f3-4377-8665-5af26b7b7fe7.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/881ae5f4-e500-4f62-a509-ae253f0799c8.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/440504bf-8a2f-48a0-9d5f-1f31d63ba63d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/e9dcd001-1a52-4a1b-b251-1cead74883a5.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/7769ec43-5822-4efe-8b4e-c04ca3348bd4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/046aaab1-dbcc-4c1d-a23a-b69030e8429e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/f21c1492-5db8-40e0-a509-dca139bc95d9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a1c4135c-be53-49c0-a403-55c3c94f7e1a.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/4f8a6067-c61b-4743-9c81-db3274f237e8.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/4e05992f-fc60-4348-a53d-ba93672d2eaf.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/7b4542f7-2652-4ab4-9f28-25f030c30715.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/10e47a7b-79cb-4b83-82c1-d8d18620a644.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/03419313-fa3a-4906-9da4-1f8803279411.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/89b78ecf-799c-428c-b50c-3f676657f940.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/44a30e06-3ab9-4cf6-8523-95fc5aa22f6b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/59350a73-7bdf-4294-8369-37f79ca41f72.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/140d0bcf-3b08-45ec-af9a-e86c01c3749d.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/811279b2-bcbf-4300-bd32-1a3690558ef3.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/46965eaa-bbeb-48dd-85b0-dd6f3b9f5346.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b45a8ff9-def1-41e6-975a-98875d0ee52f.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bc8aa637-b568-4f34-a180-d5aa05c29670.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/242a1386-13b4-47f4-8d62-2a1262c73fea.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5d371a1f-192a-4a85-9738-1c7142873add.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/4481615d-30ad-4f45-a5b4-005380357a90.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/d8f2d4f7-eec5-4d3a-a89b-961a25ad5128.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1048d798-d931-44fb-b7cd-88ea399ab489.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/3ddb0ae7-8b09-4abf-ab40-251be6a64fdb.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/04782e6d-aadb-4235-ab82-e2fbbb96f2f0.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b67759be-629f-4d05-bf02-a565dc3ffbb6.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0dd102e1-ff7f-4b80-8727-e4a41a224451.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/e7d9bb3b-a424-4319-a62b-207f23b188b9.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/ce823b4f-ab9b-43ed-9668-5e6a7c3bccfe.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/7c150ab1-2683-4163-8aac-94e5f8b7463e.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/38df5d5b-053a-48ae-aa7a-432e45a9fb8b.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/94d30e15-a3e7-492e-ac94-a0db126928a4.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c2353203-6985-4da5-933f-427f144d1fc1.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8f276d6b-ac83-49ef-9bcd-e5ea05324421.root',\n",
    " '/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/66b33d30-22a5-40dc-9b7c-ed75bed20cd1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/12471af8-4bf7-451c-ad25-961ce12d7cb4.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/cbbf11e2-fd0c-4ef2-b90f-f6446a110cb4.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/22ba6863-13b7-46b0-9a3c-c6e9dcd9ea08.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/62e33648-d9a2-43f2-8998-f7c1cad4d1b5.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/31d38704-5fc7-4d06-b3ed-0eb69bc3462f.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/77a0cec8-44c9-407c-94d6-90361ca37e39.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/8cf222eb-e51b-4837-bad3-b832409d0b1a.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/d18625b5-bd53-466c-a2f4-0fd279f5dea4.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c06a4f3e-5cac-49ee-adbd-e886639943aa.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/523fe910-31a6-4bfb-9919-c3b7d1307224.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/0cb8a0d7-9784-4174-bbbb-a0fd3ad71a0d.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/de27da55-5362-4dd0-a97d-ddbe6eb38d8a.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/a60a4c07-6cdb-4f01-bf80-56c496880d8f.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/af4dc5db-0f77-41d9-a445-c575485211a2.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/be8f49be-6bee-47b7-bb3f-55f30276192b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/90f667e4-6eb4-4a4d-ac1f-026deb15d109.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/27b4e094-3e65-4b67-a159-38aff32115c1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/067923a5-b66d-4249-bbd3-890e127ab3f7.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/379f4e11-b6ce-4a11-901c-7f1dcdb472dd.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/33021012-3916-463b-bb69-785135216b98.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5861a96d-29e8-4927-b698-890e5cf1bc02.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/ae364dcf-bfff-4aba-ad12-a1c311d9d44f.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/edb5e9ed-cda9-4d8a-aef0-641e3080e4f8.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8a1f94bc-d623-4107-a54f-bc8f7532a757.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/207abcfc-1f92-4bb4-a556-916ab5dc2346.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f2c2d092-dab9-4fcb-b50d-30611bc2e9b0.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/64d1dbdc-dff6-4fd2-8f7e-b0e33989459b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/009c166b-3848-4ad8-8278-ced132ce7dbc.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/316461ea-3ed0-424d-b4a0-7cbd15dcde34.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/a4352f79-71da-4005-9998-8bd157904e82.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c5ffe1c2-50d9-4bb7-a5a2-9792ad0fe7c8.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/3642f1a8-d56f-4b4f-9f6b-d2a0e851b409.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/eaf2ff77-6c3f-4941-a0fb-fab97da165c8.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c259c9a6-5635-4fd0-8054-adea7d395e11.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c57ccf4a-199c-4848-9350-a6ec6f4794da.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/21045470-94a3-417d-8e4e-483eca3ab939.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/c910f58b-3454-49bb-b90d-77fc75460e52.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/aa7f2a8c-5cc7-495a-ad11-249ec3e9e470.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/33330782-17e1-45ae-a6bf-d0b60a4761ce.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/2530000/307f6a83-aaf3-4973-89b6-ff3fa88e1c3b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/f9e9872e-435c-480f-b0f7-06b3427d865e.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/274bc486-3504-479c-aa74-0204bbc6e2f7.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/15d0e8df-d78d-4d35-b3b7-3c66f87e3584.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/8058917a-537a-49dd-b487-e6bf588202a2.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/aef56106-5f52-447b-bc19-85f6ef55caec.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/32a1df92-559d-4420-832f-c6d9cb6c65ac.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/9de92d13-754f-4a88-968a-8a740e2eeca3.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/976c5678-a9e8-4645-a86f-b48631eb7612.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/1576cd91-b003-4e7c-b77a-a96c6e62051b.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/bee350b6-d811-453c-a7ee-97d426dd7540.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/76c8ca25-1e61-4bcd-bd83-1c654cad69f1.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/c5857e5f-f9ec-4963-b863-368732f93438.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/b393d21c-4373-4883-8689-4b6a1cc9b3ad.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/7ef19857-1f58-42be-bd8f-281d831fc24c.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/fd0c6ff9-0e84-4b0c-8834-2886941b3740.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/2b352fcc-854f-416e-9fe3-40651da3af81.root',\n",
    "'/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/40000/5f621841-1ed2-47b2-8e5a-8d6beb98e5c7.root'\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e81b5920",
   "metadata": {},
   "outputs": [],
   "source": [
    "# use xrootd to browse/open files on cern eos\n",
    "import XRootD.client\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2bcc73fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "path = \"root://eoscms.cern.ch/\"\n",
    "xrdurl =  XRootD.client.URL(path)\n",
    "xrdfs = XRootD.client.FileSystem(xrdurl.hostid)\n",
    "xrdpath = xrdurl.path\n",
    "print(xrdpath)\n",
    "\n",
    "num_clients = 16 # number of xroord clients to load files\n",
    "xrd_filelist = [f\"{xrdfs.url.protocol}://user_{random.randrange(num_clients)}@{xrdfs.url.hostname}:{xrdfs.url.port}/{file}\" for file in filelist]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20386af5",
   "metadata": {},
   "source": [
    "# Process events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "05af545b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot # see https://uproot.readthedocs.io/en/latest/index.html \n",
    "import awkward as ak\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pdb\n",
    "import vector\n",
    "import hist\n",
    "from hist import Hist\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9743491f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### example\n",
    "treename=\"zcounting/tree\"\n",
    "filename_ntuple=\"/eos/cms/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/3c15f464-10bd-4ab8-9064-a509a3470c8a.root\"\n",
    "f1=uproot.open(filename_ntuple)\n",
    "f1.keys()\n",
    "eventss = uproot.open(\"/eos/cms/store/data/Run2022C/EGamma/NANOAOD/22Sep2023-v1/50000/3c15f464-10bd-4ab8-9064-a509a3470c8a.root:Events\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d55f868c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['run',\n",
       " 'luminosityBlock',\n",
       " 'event',\n",
       " 'bunchCrossing',\n",
       " 'BeamSpot_type',\n",
       " 'BeamSpot_sigmaZ',\n",
       " 'BeamSpot_sigmaZError',\n",
       " 'BeamSpot_z',\n",
       " 'BeamSpot_zError',\n",
       " 'nboostedTau',\n",
       " 'boostedTau_idAntiEle2018',\n",
       " 'boostedTau_idAntiMu',\n",
       " 'boostedTau_idMVAnewDM2017v2',\n",
       " 'boostedTau_idMVAoldDM2017v2',\n",
       " 'boostedTau_jetIdx',\n",
       " 'boostedTau_rawAntiEleCat2018',\n",
       " 'boostedTau_charge',\n",
       " 'boostedTau_decayMode',\n",
       " 'boostedTau_chargedIso',\n",
       " 'boostedTau_eta',\n",
       " 'boostedTau_leadTkDeltaEta',\n",
       " 'boostedTau_leadTkDeltaPhi',\n",
       " 'boostedTau_leadTkPtOverTauPt',\n",
       " 'boostedTau_mass',\n",
       " 'boostedTau_neutralIso',\n",
       " 'boostedTau_phi',\n",
       " 'boostedTau_photonsOutsideSignalCone',\n",
       " 'boostedTau_pt',\n",
       " 'boostedTau_puCorr',\n",
       " 'boostedTau_rawAntiEle2018',\n",
       " 'boostedTau_rawIso',\n",
       " 'boostedTau_rawIsodR03',\n",
       " 'boostedTau_rawMVAnewDM2017v2',\n",
       " 'boostedTau_rawMVAoldDM2017v2',\n",
       " 'CaloMET_phi',\n",
       " 'CaloMET_pt',\n",
       " 'CaloMET_sumEt',\n",
       " 'ChsMET_phi',\n",
       " 'ChsMET_pt',\n",
       " 'ChsMET_sumEt',\n",
       " 'nCorrT1METJet',\n",
       " 'CorrT1METJet_area',\n",
       " 'CorrT1METJet_eta',\n",
       " 'CorrT1METJet_muonSubtrFactor',\n",
       " 'CorrT1METJet_phi',\n",
       " 'CorrT1METJet_rawPt',\n",
       " 'DeepMETResolutionTune_phi',\n",
       " 'DeepMETResolutionTune_pt',\n",
       " 'DeepMETResponseTune_phi',\n",
       " 'DeepMETResponseTune_pt',\n",
       " 'nElectron',\n",
       " 'Electron_seediEtaOriX',\n",
       " 'Electron_convVeto',\n",
       " 'Electron_cutBased',\n",
       " 'Electron_cutBased_HEEP',\n",
       " 'Electron_isPFcand',\n",
       " 'Electron_jetNDauCharged',\n",
       " 'Electron_lostHits',\n",
       " 'Electron_mvaIso_WP80',\n",
       " 'Electron_mvaIso_WP90',\n",
       " 'Electron_mvaNoIso_WP80',\n",
       " 'Electron_mvaNoIso_WP90',\n",
       " 'Electron_seedGain',\n",
       " 'Electron_tightCharge',\n",
       " 'Electron_jetIdx',\n",
       " 'Electron_photonIdx',\n",
       " 'Electron_svIdx',\n",
       " 'Electron_fsrPhotonIdx',\n",
       " 'Electron_charge',\n",
       " 'Electron_pdgId',\n",
       " 'Electron_seediPhiOriY',\n",
       " 'Electron_vidNestedWPBitmap',\n",
       " 'Electron_vidNestedWPBitmapHEEP',\n",
       " 'Electron_deltaEtaSC',\n",
       " 'Electron_dr03EcalRecHitSumEt',\n",
       " 'Electron_dr03HcalDepth1TowerSumEt',\n",
       " 'Electron_dr03TkSumPt',\n",
       " 'Electron_dr03TkSumPtHEEP',\n",
       " 'Electron_dxy',\n",
       " 'Electron_dxyErr',\n",
       " 'Electron_dz',\n",
       " 'Electron_dzErr',\n",
       " 'Electron_eInvMinusPInv',\n",
       " 'Electron_energyErr',\n",
       " 'Electron_eta',\n",
       " 'Electron_hoe',\n",
       " 'Electron_ip3d',\n",
       " 'Electron_jetPtRelv2',\n",
       " 'Electron_jetRelIso',\n",
       " 'Electron_mass',\n",
       " 'Electron_miniPFRelIso_all',\n",
       " 'Electron_miniPFRelIso_chg',\n",
       " 'Electron_mvaHZZIso',\n",
       " 'Electron_mvaIso',\n",
       " 'Electron_mvaNoIso',\n",
       " 'Electron_pfRelIso03_all',\n",
       " 'Electron_pfRelIso03_chg',\n",
       " 'Electron_phi',\n",
       " 'Electron_pt',\n",
       " 'Electron_r9',\n",
       " 'Electron_scEtOverPt',\n",
       " 'Electron_sieie',\n",
       " 'Electron_sip3d',\n",
       " 'Electron_mvaTTH',\n",
       " 'nFatJet',\n",
       " 'FatJet_jetId',\n",
       " 'FatJet_nConstituents',\n",
       " 'FatJet_subJetIdx1',\n",
       " 'FatJet_subJetIdx2',\n",
       " 'FatJet_electronIdx3SJ',\n",
       " 'FatJet_muonIdx3SJ',\n",
       " 'FatJet_area',\n",
       " 'FatJet_btagDDBvLV2',\n",
       " 'FatJet_btagDDCvBV2',\n",
       " 'FatJet_btagDDCvLV2',\n",
       " 'FatJet_btagDeepB',\n",
       " 'FatJet_btagHbb',\n",
       " 'FatJet_eta',\n",
       " 'FatJet_mass',\n",
       " 'FatJet_msoftdrop',\n",
       " 'FatJet_n2b1',\n",
       " 'FatJet_n3b1',\n",
       " 'FatJet_particleNetWithMass_H4qvsQCD',\n",
       " 'FatJet_particleNetWithMass_HbbvsQCD',\n",
       " 'FatJet_particleNetWithMass_HccvsQCD',\n",
       " 'FatJet_particleNetWithMass_QCD',\n",
       " 'FatJet_particleNetWithMass_TvsQCD',\n",
       " 'FatJet_particleNetWithMass_WvsQCD',\n",
       " 'FatJet_particleNetWithMass_ZvsQCD',\n",
       " 'FatJet_particleNet_QCD',\n",
       " 'FatJet_particleNet_QCD0HF',\n",
       " 'FatJet_particleNet_QCD1HF',\n",
       " 'FatJet_particleNet_QCD2HF',\n",
       " 'FatJet_particleNet_XbbVsQCD',\n",
       " 'FatJet_particleNet_XccVsQCD',\n",
       " 'FatJet_particleNet_XggVsQCD',\n",
       " 'FatJet_particleNet_XqqVsQCD',\n",
       " 'FatJet_particleNet_XteVsQCD',\n",
       " 'FatJet_particleNet_XtmVsQCD',\n",
       " 'FatJet_particleNet_XttVsQCD',\n",
       " 'FatJet_particleNet_massCorr',\n",
       " 'FatJet_phi',\n",
       " 'FatJet_pt',\n",
       " 'FatJet_rawFactor',\n",
       " 'FatJet_tau1',\n",
       " 'FatJet_tau2',\n",
       " 'FatJet_tau3',\n",
       " 'FatJet_tau4',\n",
       " 'FatJet_lsf3',\n",
       " 'nFsrPhoton',\n",
       " 'FsrPhoton_electronIdx',\n",
       " 'FsrPhoton_muonIdx',\n",
       " 'FsrPhoton_dROverEt2',\n",
       " 'FsrPhoton_eta',\n",
       " 'FsrPhoton_phi',\n",
       " 'FsrPhoton_pt',\n",
       " 'FsrPhoton_relIso03',\n",
       " 'nIsoTrack',\n",
       " 'IsoTrack_isHighPurityTrack',\n",
       " 'IsoTrack_isPFcand',\n",
       " 'IsoTrack_isFromLostTrack',\n",
       " 'IsoTrack_charge',\n",
       " 'IsoTrack_fromPV',\n",
       " 'IsoTrack_pdgId',\n",
       " 'IsoTrack_dxy',\n",
       " 'IsoTrack_dz',\n",
       " 'IsoTrack_eta',\n",
       " 'IsoTrack_pfRelIso03_all',\n",
       " 'IsoTrack_pfRelIso03_chg',\n",
       " 'IsoTrack_phi',\n",
       " 'IsoTrack_pt',\n",
       " 'IsoTrack_miniPFRelIso_all',\n",
       " 'IsoTrack_miniPFRelIso_chg',\n",
       " 'nJet',\n",
       " 'Jet_jetId',\n",
       " 'Jet_nConstituents',\n",
       " 'Jet_nElectrons',\n",
       " 'Jet_nMuons',\n",
       " 'Jet_nSVs',\n",
       " 'Jet_electronIdx1',\n",
       " 'Jet_electronIdx2',\n",
       " 'Jet_muonIdx1',\n",
       " 'Jet_muonIdx2',\n",
       " 'Jet_svIdx1',\n",
       " 'Jet_svIdx2',\n",
       " 'Jet_hfadjacentEtaStripsSize',\n",
       " 'Jet_hfcentralEtaStripSize',\n",
       " 'Jet_PNetRegPtRawCorr',\n",
       " 'Jet_PNetRegPtRawCorrNeutrino',\n",
       " 'Jet_PNetRegPtRawRes',\n",
       " 'Jet_area',\n",
       " 'Jet_btagDeepFlavB',\n",
       " 'Jet_btagDeepFlavCvB',\n",
       " 'Jet_btagDeepFlavCvL',\n",
       " 'Jet_btagDeepFlavQG',\n",
       " 'Jet_btagPNetB',\n",
       " 'Jet_btagPNetCvB',\n",
       " 'Jet_btagPNetCvL',\n",
       " 'Jet_btagPNetQvG',\n",
       " 'Jet_btagPNetTauVJet',\n",
       " 'Jet_btagRobustParTAK4B',\n",
       " 'Jet_btagRobustParTAK4CvB',\n",
       " 'Jet_btagRobustParTAK4CvL',\n",
       " 'Jet_btagRobustParTAK4QG',\n",
       " 'Jet_chEmEF',\n",
       " 'Jet_chHEF',\n",
       " 'Jet_eta',\n",
       " 'Jet_hfsigmaEtaEta',\n",
       " 'Jet_hfsigmaPhiPhi',\n",
       " 'Jet_mass',\n",
       " 'Jet_muEF',\n",
       " 'Jet_muonSubtrFactor',\n",
       " 'Jet_neEmEF',\n",
       " 'Jet_neHEF',\n",
       " 'Jet_phi',\n",
       " 'Jet_pt',\n",
       " 'Jet_rawFactor',\n",
       " 'nLowPtElectron',\n",
       " 'LowPtElectron_convVeto',\n",
       " 'LowPtElectron_convWP',\n",
       " 'LowPtElectron_lostHits',\n",
       " 'LowPtElectron_electronIdx',\n",
       " 'LowPtElectron_photonIdx',\n",
       " 'LowPtElectron_charge',\n",
       " 'LowPtElectron_pdgId',\n",
       " 'LowPtElectron_ID',\n",
       " 'LowPtElectron_convVtxRadius',\n",
       " 'LowPtElectron_deltaEtaSC',\n",
       " 'LowPtElectron_dxy',\n",
       " 'LowPtElectron_dxyErr',\n",
       " 'LowPtElectron_dz',\n",
       " 'LowPtElectron_dzErr',\n",
       " 'LowPtElectron_eInvMinusPInv',\n",
       " 'LowPtElectron_energyErr',\n",
       " 'LowPtElectron_eta',\n",
       " 'LowPtElectron_hoe',\n",
       " 'LowPtElectron_mass',\n",
       " 'LowPtElectron_miniPFRelIso_all',\n",
       " 'LowPtElectron_miniPFRelIso_chg',\n",
       " 'LowPtElectron_phi',\n",
       " 'LowPtElectron_pt',\n",
       " 'LowPtElectron_ptbiased',\n",
       " 'LowPtElectron_r9',\n",
       " 'LowPtElectron_scEtOverPt',\n",
       " 'LowPtElectron_sieie',\n",
       " 'LowPtElectron_unbiased',\n",
       " 'MET_MetUnclustEnUpDeltaX',\n",
       " 'MET_MetUnclustEnUpDeltaY',\n",
       " 'MET_covXX',\n",
       " 'MET_covXY',\n",
       " 'MET_covYY',\n",
       " 'MET_phi',\n",
       " 'MET_pt',\n",
       " 'MET_significance',\n",
       " 'MET_sumEt',\n",
       " 'MET_sumPtUnclustered',\n",
       " 'nProton_multiRP',\n",
       " 'Proton_multiRP_arm',\n",
       " 'Proton_multiRP_t',\n",
       " 'Proton_multiRP_thetaX',\n",
       " 'Proton_multiRP_thetaY',\n",
       " 'Proton_multiRP_time',\n",
       " 'Proton_multiRP_timeUnc',\n",
       " 'Proton_multiRP_xi',\n",
       " 'nMuon',\n",
       " 'Muon_highPtId',\n",
       " 'Muon_highPurity',\n",
       " 'Muon_inTimeMuon',\n",
       " 'Muon_isGlobal',\n",
       " 'Muon_isPFcand',\n",
       " 'Muon_isStandalone',\n",
       " 'Muon_isTracker',\n",
       " 'Muon_jetNDauCharged',\n",
       " 'Muon_looseId',\n",
       " 'Muon_mediumId',\n",
       " 'Muon_mediumPromptId',\n",
       " 'Muon_miniIsoId',\n",
       " 'Muon_multiIsoId',\n",
       " 'Muon_mvaMuID_WP',\n",
       " 'Muon_nStations',\n",
       " 'Muon_nTrackerLayers',\n",
       " 'Muon_pfIsoId',\n",
       " 'Muon_puppiIsoId',\n",
       " 'Muon_softId',\n",
       " 'Muon_softMvaId',\n",
       " 'Muon_tightCharge',\n",
       " 'Muon_tightId',\n",
       " 'Muon_tkIsoId',\n",
       " 'Muon_triggerIdLoose',\n",
       " 'Muon_jetIdx',\n",
       " 'Muon_svIdx',\n",
       " 'Muon_fsrPhotonIdx',\n",
       " 'Muon_charge',\n",
       " 'Muon_pdgId',\n",
       " 'Muon_dxy',\n",
       " 'Muon_dxyErr',\n",
       " 'Muon_dxybs',\n",
       " 'Muon_dz',\n",
       " 'Muon_dzErr',\n",
       " 'Muon_eta',\n",
       " 'Muon_ip3d',\n",
       " 'Muon_jetPtRelv2',\n",
       " 'Muon_jetRelIso',\n",
       " 'Muon_mass',\n",
       " 'Muon_miniPFRelIso_all',\n",
       " 'Muon_miniPFRelIso_chg',\n",
       " 'Muon_mvaMuID',\n",
       " 'Muon_pfRelIso03_all',\n",
       " 'Muon_pfRelIso03_chg',\n",
       " 'Muon_pfRelIso04_all',\n",
       " 'Muon_phi',\n",
       " 'Muon_pt',\n",
       " 'Muon_ptErr',\n",
       " 'Muon_segmentComp',\n",
       " 'Muon_sip3d',\n",
       " 'Muon_softMva',\n",
       " 'Muon_tkRelIso',\n",
       " 'Muon_tunepRelPt',\n",
       " 'Muon_bsConstrainedChi2',\n",
       " 'Muon_bsConstrainedPt',\n",
       " 'Muon_bsConstrainedPtErr',\n",
       " 'Muon_mvaLowPt',\n",
       " 'Muon_mvaTTH',\n",
       " 'nPhoton',\n",
       " 'Photon_seediEtaOriX',\n",
       " 'Photon_cutBased',\n",
       " 'Photon_electronVeto',\n",
       " 'Photon_hasConversionTracks',\n",
       " 'Photon_isScEtaEB',\n",
       " 'Photon_isScEtaEE',\n",
       " 'Photon_mvaID_WP80',\n",
       " 'Photon_mvaID_WP90',\n",
       " 'Photon_pixelSeed',\n",
       " 'Photon_seedGain',\n",
       " 'Photon_electronIdx',\n",
       " 'Photon_jetIdx',\n",
       " 'Photon_seediPhiOriY',\n",
       " 'Photon_vidNestedWPBitmap',\n",
       " 'Photon_ecalPFClusterIso',\n",
       " 'Photon_energyErr',\n",
       " 'Photon_energyRaw',\n",
       " 'Photon_esEffSigmaRR',\n",
       " 'Photon_esEnergyOverRawE',\n",
       " 'Photon_eta',\n",
       " 'Photon_etaWidth',\n",
       " 'Photon_haloTaggerMVAVal',\n",
       " 'Photon_hcalPFClusterIso',\n",
       " 'Photon_hoe',\n",
       " 'Photon_hoe_PUcorr',\n",
       " 'Photon_mvaID',\n",
       " 'Photon_pfChargedIso',\n",
       " 'Photon_pfChargedIsoPFPV',\n",
       " 'Photon_pfChargedIsoWorstVtx',\n",
       " 'Photon_pfPhoIso03',\n",
       " 'Photon_pfRelIso03_all_quadratic',\n",
       " 'Photon_pfRelIso03_chg_quadratic',\n",
       " 'Photon_phi',\n",
       " 'Photon_phiWidth',\n",
       " 'Photon_pt',\n",
       " 'Photon_r9',\n",
       " 'Photon_s4',\n",
       " 'Photon_sieie',\n",
       " 'Photon_sieip',\n",
       " 'Photon_sipip',\n",
       " 'Photon_trkSumPtHollowConeDR03',\n",
       " 'Photon_trkSumPtSolidConeDR04',\n",
       " 'Photon_x_calo',\n",
       " 'Photon_y_calo',\n",
       " 'Photon_z_calo',\n",
       " 'nPPSLocalTrack',\n",
       " 'PPSLocalTrack_multiRPProtonIdx',\n",
       " 'PPSLocalTrack_singleRPProtonIdx',\n",
       " 'PPSLocalTrack_decRPId',\n",
       " 'PPSLocalTrack_rpType',\n",
       " 'PPSLocalTrack_x',\n",
       " 'PPSLocalTrack_y',\n",
       " 'PPSLocalTrack_time',\n",
       " 'PPSLocalTrack_timeUnc',\n",
       " 'PuppiMET_phi',\n",
       " 'PuppiMET_phiJERDown',\n",
       " 'PuppiMET_phiJERUp',\n",
       " 'PuppiMET_phiJESDown',\n",
       " 'PuppiMET_phiJESUp',\n",
       " 'PuppiMET_phiUnclusteredDown',\n",
       " 'PuppiMET_phiUnclusteredUp',\n",
       " 'PuppiMET_pt',\n",
       " 'PuppiMET_ptJERDown',\n",
       " 'PuppiMET_ptJERUp',\n",
       " 'PuppiMET_ptJESDown',\n",
       " 'PuppiMET_ptJESUp',\n",
       " 'PuppiMET_ptUnclusteredDown',\n",
       " 'PuppiMET_ptUnclusteredUp',\n",
       " 'PuppiMET_sumEt',\n",
       " 'RawMET_phi',\n",
       " 'RawMET_pt',\n",
       " 'RawMET_sumEt',\n",
       " 'RawPuppiMET_phi',\n",
       " 'RawPuppiMET_pt',\n",
       " 'RawPuppiMET_sumEt',\n",
       " 'Rho_fixedGridRhoAll',\n",
       " 'Rho_fixedGridRhoFastjetAll',\n",
       " 'Rho_fixedGridRhoFastjetCentral',\n",
       " 'Rho_fixedGridRhoFastjetCentralCalo',\n",
       " 'Rho_fixedGridRhoFastjetCentralChargedPileUp',\n",
       " 'Rho_fixedGridRhoFastjetCentralNeutral',\n",
       " 'nSoftActivityJet',\n",
       " 'SoftActivityJet_eta',\n",
       " 'SoftActivityJet_phi',\n",
       " 'SoftActivityJet_pt',\n",
       " 'SoftActivityJetNjets10',\n",
       " 'SoftActivityJetNjets2',\n",
       " 'SoftActivityJetNjets5',\n",
       " 'SoftActivityJetHT',\n",
       " 'SoftActivityJetHT10',\n",
       " 'SoftActivityJetHT2',\n",
       " 'SoftActivityJetHT5',\n",
       " 'nProton_singleRP',\n",
       " 'Proton_singleRP_decRPId',\n",
       " 'Proton_singleRP_thetaY',\n",
       " 'Proton_singleRP_xi',\n",
       " 'nSubJet',\n",
       " 'SubJet_btagDeepB',\n",
       " 'SubJet_eta',\n",
       " 'SubJet_mass',\n",
       " 'SubJet_n2b1',\n",
       " 'SubJet_n3b1',\n",
       " 'SubJet_phi',\n",
       " 'SubJet_pt',\n",
       " 'SubJet_rawFactor',\n",
       " 'SubJet_tau1',\n",
       " 'SubJet_tau2',\n",
       " 'SubJet_tau3',\n",
       " 'SubJet_tau4',\n",
       " 'nTau',\n",
       " 'Tau_decayMode',\n",
       " 'Tau_idAntiEleDeadECal',\n",
       " 'Tau_idAntiMu',\n",
       " 'Tau_idDecayModeNewDMs',\n",
       " 'Tau_idDecayModeOldDMs',\n",
       " 'Tau_idDeepTau2017v2p1VSe',\n",
       " 'Tau_idDeepTau2017v2p1VSjet',\n",
       " 'Tau_idDeepTau2017v2p1VSmu',\n",
       " 'Tau_idDeepTau2018v2p5VSe',\n",
       " 'Tau_idDeepTau2018v2p5VSjet',\n",
       " 'Tau_idDeepTau2018v2p5VSmu',\n",
       " 'Tau_nSVs',\n",
       " 'Tau_charge',\n",
       " 'Tau_decayModePNet',\n",
       " 'Tau_eleIdx',\n",
       " 'Tau_jetIdx',\n",
       " 'Tau_muIdx',\n",
       " 'Tau_svIdx1',\n",
       " 'Tau_svIdx2',\n",
       " 'Tau_chargedIso',\n",
       " 'Tau_dxy',\n",
       " 'Tau_dz',\n",
       " 'Tau_eta',\n",
       " 'Tau_leadTkDeltaEta',\n",
       " 'Tau_leadTkDeltaPhi',\n",
       " 'Tau_leadTkPtOverTauPt',\n",
       " 'Tau_mass',\n",
       " 'Tau_neutralIso',\n",
       " 'Tau_phi',\n",
       " 'Tau_photonsOutsideSignalCone',\n",
       " 'Tau_probDM0PNet',\n",
       " 'Tau_probDM10PNet',\n",
       " 'Tau_probDM11PNet',\n",
       " 'Tau_probDM1PNet',\n",
       " 'Tau_probDM2PNet',\n",
       " 'Tau_pt',\n",
       " 'Tau_ptCorrPNet',\n",
       " 'Tau_puCorr',\n",
       " 'Tau_qConfPNet',\n",
       " 'Tau_rawDeepTau2017v2p1VSe',\n",
       " 'Tau_rawDeepTau2017v2p1VSjet',\n",
       " 'Tau_rawDeepTau2017v2p1VSmu',\n",
       " 'Tau_rawDeepTau2018v2p5VSe',\n",
       " 'Tau_rawDeepTau2018v2p5VSjet',\n",
       " 'Tau_rawDeepTau2018v2p5VSmu',\n",
       " 'Tau_rawIso',\n",
       " 'Tau_rawIsodR03',\n",
       " 'Tau_rawPNetVSe',\n",
       " 'Tau_rawPNetVSjet',\n",
       " 'Tau_rawPNetVSmu',\n",
       " 'TkMET_phi',\n",
       " 'TkMET_pt',\n",
       " 'TkMET_sumEt',\n",
       " 'nTrigObj',\n",
       " 'TrigObj_l1charge',\n",
       " 'TrigObj_id',\n",
       " 'TrigObj_l1iso',\n",
       " 'TrigObj_filterBits',\n",
       " 'TrigObj_pt',\n",
       " 'TrigObj_eta',\n",
       " 'TrigObj_phi',\n",
       " 'TrigObj_l1pt',\n",
       " 'TrigObj_l1pt_2',\n",
       " 'TrigObj_l2pt',\n",
       " 'nOtherPV',\n",
       " 'OtherPV_z',\n",
       " 'OtherPV_score',\n",
       " 'PV_npvs',\n",
       " 'PV_npvsGood',\n",
       " 'PV_ndof',\n",
       " 'PV_x',\n",
       " 'PV_y',\n",
       " 'PV_z',\n",
       " 'PV_chi2',\n",
       " 'PV_score',\n",
       " 'nSV',\n",
       " 'SV_charge',\n",
       " 'SV_dlen',\n",
       " 'SV_dlenSig',\n",
       " 'SV_dxy',\n",
       " 'SV_dxySig',\n",
       " 'SV_pAngle',\n",
       " 'SV_ntracks',\n",
       " 'SV_chi2',\n",
       " 'SV_eta',\n",
       " 'SV_mass',\n",
       " 'SV_ndof',\n",
       " 'SV_phi',\n",
       " 'SV_pt',\n",
       " 'SV_x',\n",
       " 'SV_y',\n",
       " 'SV_z',\n",
       " 'Flag_HBHENoiseFilter',\n",
       " 'Flag_HBHENoiseIsoFilter',\n",
       " 'Flag_CSCTightHaloFilter',\n",
       " 'Flag_CSCTightHaloTrkMuUnvetoFilter',\n",
       " 'Flag_CSCTightHalo2015Filter',\n",
       " 'Flag_globalTightHalo2016Filter',\n",
       " 'Flag_globalSuperTightHalo2016Filter',\n",
       " 'Flag_HcalStripHaloFilter',\n",
       " 'Flag_hcalLaserEventFilter',\n",
       " 'Flag_EcalDeadCellTriggerPrimitiveFilter',\n",
       " 'Flag_EcalDeadCellBoundaryEnergyFilter',\n",
       " 'Flag_ecalBadCalibFilter',\n",
       " 'Flag_goodVertices',\n",
       " 'Flag_eeBadScFilter',\n",
       " 'Flag_ecalLaserCorrFilter',\n",
       " 'Flag_trkPOGFilters',\n",
       " 'Flag_chargedHadronTrackResolutionFilter',\n",
       " 'Flag_muonBadTrackFilter',\n",
       " 'Flag_BadChargedCandidateFilter',\n",
       " 'Flag_BadPFMuonFilter',\n",
       " 'Flag_BadPFMuonDzFilter',\n",
       " 'Flag_hfNoisyHitsFilter',\n",
       " 'Flag_BadChargedCandidateSummer16Filter',\n",
       " 'Flag_BadPFMuonSummer16Filter',\n",
       " 'Flag_trkPOG_manystripclus53X',\n",
       " 'Flag_trkPOG_toomanystripclus53X',\n",
       " 'Flag_trkPOG_logErrorTooManyClusters',\n",
       " 'Flag_METFilters',\n",
       " 'L1_AlwaysTrue',\n",
       " 'L1_BPTX_AND_Ref1_VME',\n",
       " 'L1_BPTX_AND_Ref3_VME',\n",
       " 'L1_BPTX_AND_Ref4_VME',\n",
       " 'L1_BPTX_BeamGas_B1_VME',\n",
       " 'L1_BPTX_BeamGas_B2_VME',\n",
       " 'L1_BPTX_BeamGas_Ref1_VME',\n",
       " 'L1_BPTX_BeamGas_Ref2_VME',\n",
       " 'L1_BPTX_NotOR_VME',\n",
       " 'L1_BPTX_OR_Ref3_VME',\n",
       " 'L1_BPTX_OR_Ref4_VME',\n",
       " 'L1_BPTX_RefAND_VME',\n",
       " 'L1_BptxMinus',\n",
       " 'L1_BptxOR',\n",
       " 'L1_BptxPlus',\n",
       " 'L1_BptxXOR',\n",
       " 'L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142',\n",
       " 'L1_DoubleEG10_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG10p5_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG11_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG4_er1p2_dR_Max0p9',\n",
       " 'L1_DoubleEG4p5_er1p2_dR_Max0p9',\n",
       " 'L1_DoubleEG5_er1p2_dR_Max0p9',\n",
       " 'L1_DoubleEG5p5_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG6_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG6p5_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG7_er1p2_dR_Max0p8',\n",
       " 'L1_DoubleEG7p5_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG8_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG8er2p5_HTT260er',\n",
       " 'L1_DoubleEG8er2p5_HTT280er',\n",
       " 'L1_DoubleEG8er2p5_HTT300er',\n",
       " 'L1_DoubleEG8er2p5_HTT320er',\n",
       " 'L1_DoubleEG8er2p5_HTT340er',\n",
       " 'L1_DoubleEG8p5_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG9_er1p2_dR_Max0p7',\n",
       " 'L1_DoubleEG9p5_er1p2_dR_Max0p6',\n",
       " 'L1_DoubleEG_15_10_er2p5',\n",
       " 'L1_DoubleEG_20_10_er2p5',\n",
       " 'L1_DoubleEG_22_10_er2p5',\n",
       " 'L1_DoubleEG_25_12_er2p5',\n",
       " 'L1_DoubleEG_25_14_er2p5',\n",
       " 'L1_DoubleEG_27_14_er2p5',\n",
       " 'L1_DoubleEG_LooseIso16_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso18_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso20_10_er2p5',\n",
       " 'L1_DoubleEG_LooseIso20_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso22_10_er2p5',\n",
       " 'L1_DoubleEG_LooseIso22_12_er2p5',\n",
       " 'L1_DoubleEG_LooseIso22_LooseIso12_er1p5',\n",
       " 'L1_DoubleEG_LooseIso25_12_er2p5',\n",
       " 'L1_DoubleEG_LooseIso25_LooseIso12_er1p5',\n",
       " 'L1_DoubleIsoTau26er2p1_Jet55_RmOvlp_dR0p5',\n",
       " 'L1_DoubleIsoTau26er2p1_Jet70_RmOvlp_dR0p5',\n",
       " 'L1_DoubleIsoTau28er2p1',\n",
       " 'L1_DoubleIsoTau28er2p1_Mass_Max80',\n",
       " 'L1_DoubleIsoTau28er2p1_Mass_Max90',\n",
       " 'L1_DoubleIsoTau30er2p1',\n",
       " 'L1_DoubleIsoTau30er2p1_Mass_Max80',\n",
       " 'L1_DoubleIsoTau30er2p1_Mass_Max90',\n",
       " 'L1_DoubleIsoTau32er2p1',\n",
       " 'L1_DoubleIsoTau34er2p1',\n",
       " 'L1_DoubleIsoTau35er2p1',\n",
       " 'L1_DoubleIsoTau36er2p1',\n",
       " 'L1_DoubleJet100er2p3_dEta_Max1p6',\n",
       " 'L1_DoubleJet100er2p5',\n",
       " 'L1_DoubleJet112er2p3_dEta_Max1p6',\n",
       " 'L1_DoubleJet120er2p5',\n",
       " 'L1_DoubleJet150er2p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min150_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min200_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min250_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min300_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min330_dEta_Max1p5',\n",
       " 'L1_DoubleJet30er2p5_Mass_Min360_dEta_Max1p5',\n",
       " 'L1_DoubleJet35_Mass_Min450_IsoTau45_RmOvlp',\n",
       " 'L1_DoubleJet35_Mass_Min450_IsoTau45er2p1_RmOvlp_dR0p5',\n",
       " 'L1_DoubleJet40er2p5',\n",
       " 'L1_DoubleJet_100_30_DoubleJet30_Mass_Min620',\n",
       " 'L1_DoubleJet_110_35_DoubleJet35_Mass_Min620',\n",
       " 'L1_DoubleJet_115_40_DoubleJet40_Mass_Min620',\n",
       " 'L1_DoubleJet_115_40_DoubleJet40_Mass_Min620_Jet60TT28',\n",
       " 'L1_DoubleJet_120_45_DoubleJet45_Mass_Min620',\n",
       " 'L1_DoubleJet_120_45_DoubleJet45_Mass_Min620_Jet60TT28',\n",
       " 'L1_DoubleJet_80_30_Mass_Min420_DoubleMu0_SQ',\n",
       " 'L1_DoubleJet_80_30_Mass_Min420_IsoTau40_RmOvlp',\n",
       " 'L1_DoubleJet_80_30_Mass_Min420_Mu8',\n",
       " 'L1_DoubleJet_90_30_DoubleJet30_Mass_Min620',\n",
       " 'L1_DoubleLLPJet40',\n",
       " 'L1_DoubleLooseIsoEG22er2p1',\n",
       " 'L1_DoubleLooseIsoEG24er2p1',\n",
       " 'L1_DoubleMu0',\n",
       " 'L1_DoubleMu0_Mass_Min1',\n",
       " 'L1_DoubleMu0_OQ',\n",
       " 'L1_DoubleMu0_SQ',\n",
       " 'L1_DoubleMu0_SQ_OS',\n",
       " 'L1_DoubleMu0_Upt15_Upt7',\n",
       " 'L1_DoubleMu0_Upt5_Upt5',\n",
       " 'L1_DoubleMu0_Upt6_IP_Min1_Upt4',\n",
       " 'L1_DoubleMu0_dR_Max1p6_Jet90er2p5_dR_Max0p8',\n",
       " 'L1_DoubleMu0er1p4_OQ_OS_dEta_Max1p6',\n",
       " 'L1_DoubleMu0er1p4_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu0er1p5_SQ',\n",
       " 'L1_DoubleMu0er1p5_SQ_OS',\n",
       " 'L1_DoubleMu0er1p5_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu0er1p5_SQ_dR_Max1p4',\n",
       " 'L1_DoubleMu0er2p0_SQ_OS_dEta_Max1p5',\n",
       " 'L1_DoubleMu0er2p0_SQ_OS_dEta_Max1p6',\n",
       " 'L1_DoubleMu0er2p0_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu0er2p0_SQ_dEta_Max1p5',\n",
       " 'L1_DoubleMu0er2p0_SQ_dEta_Max1p6',\n",
       " 'L1_DoubleMu0er2p0_SQ_dR_Max1p4',\n",
       " 'L1_DoubleMu18er2p1_SQ',\n",
       " 'L1_DoubleMu3_OS_er2p3_Mass_Max14_DoubleEG7p5_er2p1_Mass_Max20',\n",
       " 'L1_DoubleMu3_SQ_ETMHF50_HTT60er',\n",
       " 'L1_DoubleMu3_SQ_ETMHF50_Jet60er2p5',\n",
       " 'L1_DoubleMu3_SQ_ETMHF50_Jet60er2p5_OR_DoubleJet40er2p5',\n",
       " 'L1_DoubleMu3_SQ_ETMHF60_Jet60er2p5',\n",
       " 'L1_DoubleMu3_SQ_HTT220er',\n",
       " 'L1_DoubleMu3_SQ_HTT240er',\n",
       " 'L1_DoubleMu3_SQ_HTT260er',\n",
       " 'L1_DoubleMu3_dR_Max1p6_Jet90er2p5_dR_Max0p8',\n",
       " 'L1_DoubleMu3er2p0_SQ_OS_dR_Max1p4',\n",
       " 'L1_DoubleMu4_SQ_EG9er2p5',\n",
       " 'L1_DoubleMu4_SQ_OS',\n",
       " 'L1_DoubleMu4_SQ_OS_dR_Max1p2',\n",
       " 'L1_DoubleMu4p5_SQ_OS',\n",
       " 'L1_DoubleMu4p5_SQ_OS_dR_Max1p2',\n",
       " 'L1_DoubleMu4p5er2p0_SQ_OS',\n",
       " 'L1_DoubleMu4p5er2p0_SQ_OS_Mass_7to18',\n",
       " 'L1_DoubleMu4p5er2p0_SQ_OS_Mass_Min7',\n",
       " 'L1_DoubleMu5_OS_er2p3_Mass_8to14_DoubleEG3er2p1_Mass_Max20',\n",
       " 'L1_DoubleMu5_SQ_EG9er2p5',\n",
       " 'L1_DoubleMu8_SQ',\n",
       " 'L1_DoubleMu9_SQ',\n",
       " 'L1_DoubleMu_12_5',\n",
       " 'L1_DoubleMu_15_5_SQ',\n",
       " 'L1_DoubleMu_15_7',\n",
       " 'L1_DoubleMu_15_7_Mass_Min1',\n",
       " 'L1_DoubleMu_15_7_SQ',\n",
       " 'L1_DoubleTau70er2p1',\n",
       " 'L1_ETM120',\n",
       " 'L1_ETM150',\n",
       " 'L1_ETMHF100',\n",
       " 'L1_ETMHF100_HTT60er',\n",
       " 'L1_ETMHF110',\n",
       " 'L1_ETMHF110_HTT60er',\n",
       " 'L1_ETMHF110_HTT60er_NotSecondBunchInTrain',\n",
       " 'L1_ETMHF120',\n",
       " 'L1_ETMHF120_HTT60er',\n",
       " 'L1_ETMHF120_NotSecondBunchInTrain',\n",
       " 'L1_ETMHF130',\n",
       " 'L1_ETMHF130_HTT60er',\n",
       " 'L1_ETMHF140',\n",
       " 'L1_ETMHF150',\n",
       " 'L1_ETMHF70',\n",
       " 'L1_ETMHF70_HTT60er',\n",
       " 'L1_ETMHF80',\n",
       " 'L1_ETMHF80_HTT60er',\n",
       " 'L1_ETMHF90',\n",
       " 'L1_ETMHF90_HTT60er',\n",
       " 'L1_ETMHF90_SingleJet60er2p5_dPhi_Min2p1',\n",
       " 'L1_ETMHF90_SingleJet60er2p5_dPhi_Min2p6',\n",
       " 'L1_ETMHF90_SingleJet80er2p5_dPhi_Min2p1',\n",
       " 'L1_ETMHF90_SingleJet80er2p5_dPhi_Min2p6',\n",
       " 'L1_ETT1200',\n",
       " 'L1_ETT1600',\n",
       " 'L1_ETT2000',\n",
       " 'L1_FirstBunchAfterTrain',\n",
       " 'L1_FirstBunchBeforeTrain',\n",
       " 'L1_FirstBunchInTrain',\n",
       " 'L1_FirstCollisionInOrbit',\n",
       " 'L1_FirstCollisionInTrain',\n",
       " 'L1_HCAL_LaserMon_Trig',\n",
       " 'L1_HCAL_LaserMon_Veto',\n",
       " 'L1_HTT120_SingleLLPJet40',\n",
       " 'L1_HTT120er',\n",
       " 'L1_HTT160_SingleLLPJet50',\n",
       " 'L1_HTT160er',\n",
       " 'L1_HTT200_SingleLLPJet60',\n",
       " 'L1_HTT200er',\n",
       " 'L1_HTT240_SingleLLPJet70',\n",
       " 'L1_HTT255er',\n",
       " 'L1_HTT280er',\n",
       " 'L1_HTT280er_QuadJet_70_55_40_35_er2p5',\n",
       " 'L1_HTT320er',\n",
       " 'L1_HTT320er_QuadJet_70_55_40_40_er2p5',\n",
       " 'L1_HTT320er_QuadJet_80_60_er2p1_45_40_er2p3',\n",
       " 'L1_HTT320er_QuadJet_80_60_er2p1_50_45_er2p3',\n",
       " 'L1_HTT360er',\n",
       " 'L1_HTT400er',\n",
       " 'L1_HTT450er',\n",
       " 'L1_IsoEG32er2p5_Mt40',\n",
       " 'L1_IsoTau52er2p1_QuadJet36er2p5',\n",
       " 'L1_IsolatedBunch',\n",
       " 'L1_LastBunchInTrain',\n",
       " 'L1_LastCollisionInTrain',\n",
       " 'L1_LooseIsoEG22er2p1_IsoTau26er2p1_dR_Min0p3',\n",
       " 'L1_LooseIsoEG22er2p1_Tau70er2p1_dR_Min0p3',\n",
       " 'L1_LooseIsoEG24er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG24er2p1_IsoTau27er2p1_dR_Min0p3',\n",
       " 'L1_LooseIsoEG26er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG26er2p1_Jet34er2p5_dR_Min0p3',\n",
       " 'L1_LooseIsoEG28er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG28er2p1_Jet34er2p5_dR_Min0p3',\n",
       " 'L1_LooseIsoEG30er2p1_HTT100er',\n",
       " 'L1_LooseIsoEG30er2p1_Jet34er2p5_dR_Min0p3',\n",
       " 'L1_MinimumBiasHF0',\n",
       " 'L1_MinimumBiasHF0_AND_BptxAND',\n",
       " 'L1_Mu10er2p3_Jet32er2p3_dR_Max0p4_DoubleJet32er2p3_dEta_Max1p6',\n",
       " 'L1_Mu12er2p3_Jet40er2p1_dR_Max0p4_DoubleJet40er2p1_dEta_Max1p6',\n",
       " 'L1_Mu12er2p3_Jet40er2p3_dR_Max0p4_DoubleJet40er2p3_dEta_Max1p6',\n",
       " 'L1_Mu18er2p1_Tau24er2p1',\n",
       " 'L1_Mu18er2p1_Tau26er2p1',\n",
       " 'L1_Mu18er2p1_Tau26er2p1_Jet55',\n",
       " 'L1_Mu18er2p1_Tau26er2p1_Jet70',\n",
       " 'L1_Mu20_EG10er2p5',\n",
       " 'L1_Mu22er2p1_IsoTau28er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau30er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau32er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau34er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau36er2p1',\n",
       " 'L1_Mu22er2p1_IsoTau40er2p1',\n",
       " 'L1_Mu22er2p1_Tau70er2p1',\n",
       " 'L1_Mu3_Jet120er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet120er2p5_dR_Max0p8',\n",
       " 'L1_Mu3_Jet16er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet30er2p5',\n",
       " 'L1_Mu3_Jet35er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet60er2p5_dR_Max0p4',\n",
       " 'L1_Mu3_Jet80er2p5_dR_Max0p4',\n",
       " 'L1_Mu3er1p5_Jet100er2p5_ETMHF40',\n",
       " 'L1_Mu3er1p5_Jet100er2p5_ETMHF50',\n",
       " 'L1_Mu5_EG23er2p5',\n",
       " 'L1_Mu5_LooseIsoEG20er2p5',\n",
       " 'L1_Mu6_DoubleEG10er2p5',\n",
       " 'L1_Mu6_DoubleEG12er2p5',\n",
       " 'L1_Mu6_DoubleEG15er2p5',\n",
       " 'L1_Mu6_DoubleEG17er2p5',\n",
       " 'L1_Mu6_HTT240er',\n",
       " 'L1_Mu6_HTT250er',\n",
       " 'L1_Mu7_EG20er2p5',\n",
       " 'L1_Mu7_EG23er2p5',\n",
       " 'L1_Mu7_LooseIsoEG20er2p5',\n",
       " 'L1_Mu7_LooseIsoEG23er2p5',\n",
       " 'L1_NotBptxOR',\n",
       " 'L1_QuadJet60er2p5',\n",
       " 'L1_QuadJet_95_75_65_20_DoubleJet_75_65_er2p5_Jet20_FWD3p0',\n",
       " 'L1_QuadMu0',\n",
       " 'L1_QuadMu0_OQ',\n",
       " 'L1_QuadMu0_SQ',\n",
       " 'L1_SecondBunchInTrain',\n",
       " 'L1_SecondLastBunchInTrain',\n",
       " 'L1_SingleEG10er2p5',\n",
       " 'L1_SingleEG15er2p5',\n",
       " 'L1_SingleEG26er2p5',\n",
       " 'L1_SingleEG28_FWD2p5',\n",
       " 'L1_SingleEG28er1p5',\n",
       " 'L1_SingleEG28er2p1',\n",
       " 'L1_SingleEG28er2p5',\n",
       " 'L1_SingleEG34er2p5',\n",
       " 'L1_SingleEG36er2p5',\n",
       " 'L1_SingleEG38er2p5',\n",
       " 'L1_SingleEG40er2p5',\n",
       " 'L1_SingleEG42er2p5',\n",
       " 'L1_SingleEG45er2p5',\n",
       " 'L1_SingleEG50',\n",
       " 'L1_SingleEG60',\n",
       " 'L1_SingleEG8er2p5',\n",
       " 'L1_SingleIsoEG24er1p5',\n",
       " 'L1_SingleIsoEG24er2p1',\n",
       " 'L1_SingleIsoEG26er1p5',\n",
       " 'L1_SingleIsoEG26er2p1',\n",
       " 'L1_SingleIsoEG26er2p5',\n",
       " 'L1_SingleIsoEG28_FWD2p5',\n",
       " 'L1_SingleIsoEG28er1p5',\n",
       " 'L1_SingleIsoEG28er2p1',\n",
       " 'L1_SingleIsoEG28er2p5',\n",
       " 'L1_SingleIsoEG30er2p1',\n",
       " 'L1_SingleIsoEG30er2p5',\n",
       " 'L1_SingleIsoEG32er2p1',\n",
       " 'L1_SingleIsoEG32er2p5',\n",
       " 'L1_SingleIsoEG34er2p5',\n",
       " 'L1_SingleIsoTau32er2p1',\n",
       " 'L1_SingleJet10erHE',\n",
       " 'L1_SingleJet120',\n",
       " 'L1_SingleJet120_FWD3p0',\n",
       " 'L1_SingleJet120er2p5',\n",
       " 'L1_SingleJet12erHE',\n",
       " 'L1_SingleJet140er2p5',\n",
       " 'L1_SingleJet140er2p5_ETMHF70',\n",
       " 'L1_SingleJet140er2p5_ETMHF80',\n",
       " 'L1_SingleJet140er2p5_ETMHF90',\n",
       " 'L1_SingleJet160er2p5',\n",
       " 'L1_SingleJet180',\n",
       " 'L1_SingleJet180er2p5',\n",
       " 'L1_SingleJet200',\n",
       " 'L1_SingleJet20er2p5_NotBptxOR',\n",
       " 'L1_SingleJet20er2p5_NotBptxOR_3BX',\n",
       " 'L1_SingleJet35',\n",
       " 'L1_SingleJet35_FWD3p0',\n",
       " 'L1_SingleJet35er2p5',\n",
       " 'L1_SingleJet43er2p5_NotBptxOR_3BX',\n",
       " 'L1_SingleJet46er2p5_NotBptxOR_3BX',\n",
       " 'L1_SingleJet60',\n",
       " 'L1_SingleJet60_FWD3p0',\n",
       " 'L1_SingleJet60er2p5',\n",
       " 'L1_SingleJet8erHE',\n",
       " 'L1_SingleJet90',\n",
       " 'L1_SingleJet90_FWD3p0',\n",
       " 'L1_SingleJet90er2p5',\n",
       " 'L1_SingleLooseIsoEG26er1p5',\n",
       " 'L1_SingleLooseIsoEG26er2p5',\n",
       " 'L1_SingleLooseIsoEG28_FWD2p5',\n",
       " 'L1_SingleLooseIsoEG28er1p5',\n",
       " 'L1_SingleLooseIsoEG28er2p1',\n",
       " 'L1_SingleLooseIsoEG28er2p5',\n",
       " 'L1_SingleLooseIsoEG30er1p5',\n",
       " 'L1_SingleLooseIsoEG30er2p5',\n",
       " 'L1_SingleMu0_BMTF',\n",
       " 'L1_SingleMu0_DQ',\n",
       " 'L1_SingleMu0_EMTF',\n",
       " 'L1_SingleMu0_OMTF',\n",
       " 'L1_SingleMu10er1p5',\n",
       " 'L1_SingleMu12_DQ_BMTF',\n",
       " 'L1_SingleMu12_DQ_EMTF',\n",
       " 'L1_SingleMu12_DQ_OMTF',\n",
       " 'L1_SingleMu12er1p5',\n",
       " 'L1_SingleMu14er1p5',\n",
       " 'L1_SingleMu15_DQ',\n",
       " 'L1_SingleMu16er1p5',\n",
       " 'L1_SingleMu18',\n",
       " 'L1_SingleMu18er1p5',\n",
       " 'L1_SingleMu20',\n",
       " 'L1_SingleMu22',\n",
       " 'L1_SingleMu22_BMTF',\n",
       " 'L1_SingleMu22_DQ',\n",
       " 'L1_SingleMu22_EMTF',\n",
       " 'L1_SingleMu22_OMTF',\n",
       " 'L1_SingleMu22_OQ',\n",
       " 'L1_SingleMu25',\n",
       " 'L1_SingleMu3',\n",
       " 'L1_SingleMu5',\n",
       " 'L1_SingleMu6er1p5',\n",
       " 'L1_SingleMu7',\n",
       " 'L1_SingleMu7_DQ',\n",
       " 'L1_SingleMu7er1p5',\n",
       " 'L1_SingleMu8er1p5',\n",
       " 'L1_SingleMu9er1p5',\n",
       " 'L1_SingleMuCosmics',\n",
       " 'L1_SingleMuCosmics_BMTF',\n",
       " 'L1_SingleMuCosmics_EMTF',\n",
       " 'L1_SingleMuCosmics_OMTF',\n",
       " 'L1_SingleMuOpen',\n",
       " 'L1_SingleMuOpen_NotBptxOR',\n",
       " 'L1_SingleMuOpen_er1p1_NotBptxOR_3BX',\n",
       " 'L1_SingleMuOpen_er1p4_NotBptxOR_3BX',\n",
       " 'L1_SingleMuShower_Nominal',\n",
       " 'L1_SingleMuShower_Tight',\n",
       " 'L1_SingleTau120er2p1',\n",
       " 'L1_SingleTau130er2p1',\n",
       " 'L1_SingleTau70er2p1',\n",
       " 'L1_TOTEM_1',\n",
       " 'L1_TOTEM_2',\n",
       " 'L1_TOTEM_3',\n",
       " 'L1_TOTEM_4',\n",
       " 'L1_TripleEG16er2p5',\n",
       " 'L1_TripleEG_16_12_8_er2p5',\n",
       " 'L1_TripleEG_16_15_8_er2p5',\n",
       " 'L1_TripleEG_18_17_8_er2p5',\n",
       " 'L1_TripleEG_18_18_12_er2p5',\n",
       " 'L1_TripleJet_100_80_70_DoubleJet_80_70_er2p5',\n",
       " 'L1_TripleJet_105_85_75_DoubleJet_85_75_er2p5',\n",
       " 'L1_TripleJet_95_75_65_DoubleJet_75_65_er2p5',\n",
       " 'L1_TripleMu0',\n",
       " 'L1_TripleMu0_OQ',\n",
       " 'L1_TripleMu0_SQ',\n",
       " 'L1_TripleMu3',\n",
       " 'L1_TripleMu3_SQ',\n",
       " 'L1_TripleMu_2SQ_1p5SQ_0OQ',\n",
       " 'L1_TripleMu_2SQ_1p5SQ_0OQ_Mass_Max12',\n",
       " 'L1_TripleMu_3SQ_2p5SQ_0OQ_Mass_Max12',\n",
       " 'L1_TripleMu_5SQ_3SQ_0OQ',\n",
       " 'L1_TripleMu_5SQ_3SQ_0OQ_DoubleMu_5_3_SQ_OS_Mass_Max9',\n",
       " 'L1_TripleMu_5SQ_3SQ_0_DoubleMu_5_3_SQ_OS_Mass_Max9',\n",
       " 'L1_TripleMu_5_3_3',\n",
       " 'L1_TripleMu_5_3_3_SQ',\n",
       " 'L1_TripleMu_5_3p5_2p5',\n",
       " 'L1_TripleMu_5_3p5_2p5_DoubleMu_5_2p5_OS_Mass_5to17',\n",
       " 'L1_TripleMu_5_3p5_2p5_OQ_DoubleMu_5_2p5_OQ_OS_Mass_5to17',\n",
       " 'L1_TripleMu_5_4_2p5_DoubleMu_5_2p5_OS_Mass_5to17',\n",
       " 'L1_TripleMu_5_5_3',\n",
       " 'L1_UnpairedBunchBptxMinus',\n",
       " 'L1_UnpairedBunchBptxPlus',\n",
       " 'L1_ZeroBias',\n",
       " 'L1_ZeroBias_copy',\n",
       " 'L1_UnprefireableEvent',\n",
       " 'L1Reco_step',\n",
       " 'Flag_HBHENoiseFilter_pRECO',\n",
       " 'Flag_HBHENoiseIsoFilter_pRECO',\n",
       " 'Flag_CSCTightHaloFilter_pRECO',\n",
       " 'Flag_CSCTightHaloTrkMuUnvetoFilter_pRECO',\n",
       " 'Flag_CSCTightHalo2015Filter_pRECO',\n",
       " 'Flag_globalTightHalo2016Filter_pRECO',\n",
       " 'Flag_globalSuperTightHalo2016Filter_pRECO',\n",
       " 'Flag_HcalStripHaloFilter_pRECO',\n",
       " 'Flag_hcalLaserEventFilter_pRECO',\n",
       " 'Flag_EcalDeadCellTriggerPrimitiveFilter_pRECO',\n",
       " 'Flag_EcalDeadCellBoundaryEnergyFilter_pRECO',\n",
       " 'Flag_ecalBadCalibFilter_pRECO',\n",
       " 'Flag_goodVertices_pRECO',\n",
       " 'Flag_eeBadScFilter_pRECO',\n",
       " 'Flag_ecalLaserCorrFilter_pRECO',\n",
       " 'Flag_trkPOGFilters_pRECO',\n",
       " 'Flag_chargedHadronTrackResolutionFilter_pRECO',\n",
       " 'Flag_muonBadTrackFilter_pRECO',\n",
       " 'Flag_BadChargedCandidateFilter_pRECO',\n",
       " 'Flag_BadPFMuonFilter_pRECO',\n",
       " 'Flag_BadPFMuonDzFilter_pRECO',\n",
       " 'Flag_hfNoisyHitsFilter_pRECO',\n",
       " 'Flag_BadChargedCandidateSummer16Filter_pRECO',\n",
       " 'Flag_BadPFMuonSummer16Filter_pRECO',\n",
       " 'Flag_trkPOG_manystripclus53X_pRECO',\n",
       " 'Flag_trkPOG_toomanystripclus53X_pRECO',\n",
       " 'Flag_trkPOG_logErrorTooManyClusters_pRECO',\n",
       " 'Flag_METFilters_pRECO',\n",
       " 'HLTriggerFirstPath',\n",
       " 'HLT_AK8PFJet360_TrimMass30',\n",
       " 'HLT_AK8PFJet380_TrimMass30',\n",
       " 'HLT_AK8PFJet400_TrimMass30',\n",
       " 'HLT_AK8PFJet420_TrimMass30',\n",
       " 'HLT_AK8PFJet400_MassSD30',\n",
       " 'HLT_AK8PFJet420_MassSD30',\n",
       " 'HLT_AK8PFJet450_MassSD30',\n",
       " 'HLT_AK8DiPFJet250_250_MassSD30',\n",
       " 'HLT_AK8DiPFJet250_250_MassSD50',\n",
       " 'HLT_AK8DiPFJet260_260_MassSD30',\n",
       " 'HLT_AK8DiPFJet270_270_MassSD30',\n",
       " 'HLT_AK8PFHT750_TrimMass50',\n",
       " 'HLT_AK8PFHT800_TrimMass50',\n",
       " 'HLT_AK8PFHT850_TrimMass50',\n",
       " 'HLT_AK8PFHT900_TrimMass50',\n",
       " 'HLT_CaloJet500_NoJetID',\n",
       " 'HLT_CaloJet550_NoJetID',\n",
       " 'HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL',\n",
       " 'HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon',\n",
       " ...]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eventss.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "aaf09caf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Now at run 357442\n",
      "Have a batch with 2001 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 14443 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1494 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1200 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2101 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1982 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5639 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5355 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3974 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2361 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2987 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8710 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2641 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1788 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4116 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1201 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1869 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2044 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7223 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6674 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2140 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 384 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1903 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1062 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1408 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3923 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2291 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4170 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6117 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1316 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1884 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2017 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3590 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1910 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 871 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3627 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2620 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 12464 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 436 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 507 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1553 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 436 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2039 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1315 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1826 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2969 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3185 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 882 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1821 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2497 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 406 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2156 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1576 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4139 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2029 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10898 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6199 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2415 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1391 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2253 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6192 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4557 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4888 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1396 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 11789 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1382 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10319 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2814 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 703 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4225 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2004 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4261 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 992 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3269 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6373 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4123 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9108 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6063 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1401 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4131 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7926 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2138 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3912 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1790 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1810 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 445 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10888 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9294 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4457 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1842 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6861 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1573 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1128 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6164 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2091 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2506 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3780 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4161 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1889 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 603 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2881 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3358 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8175 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1497 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2127 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5918 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 582 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1940 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1794 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 984 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1057 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9994 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 583 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1986 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1915 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4045 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 881 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3745 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5453 events\n",
      "Results saved to ./output_results.root\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Have a batch with 1756 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4261 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 901 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1889 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1532 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 419 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8840 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6045 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 12421 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7712 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2076 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2579 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3818 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2364 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1319 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2103 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4557 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2240 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 858 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1108 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6885 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4017 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3959 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3014 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2122 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8351 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 695 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3043 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 936 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3949 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1630 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5146 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3609 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 6404 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8404 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1853 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2293 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2281 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1324 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4743 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2412 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2170 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 543 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4142 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 969 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8249 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1231 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 888 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2162 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5327 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 16999 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 890 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5504 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 9589 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1538 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 7281 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2006 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1906 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3654 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 8176 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2302 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2946 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2709 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2028 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1795 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2907 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3024 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5673 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4763 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5483 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3971 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 3004 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1912 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1530 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 601 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1365 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 985 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1131 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 595 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1104 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 581 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 10064 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 5409 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1498 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2789 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2191 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 497 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1870 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 4272 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2187 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 2232 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1132 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1992 events\n",
      "Results saved to ./output_results.root\n",
      "Have a batch with 1737 events\n",
      "Results saved to ./output_results.root\n"
     ]
    }
   ],
   "source": [
    "import argparse\n",
    "\n",
    "import sys\n",
    "sys.argv=['']\n",
    "del sys\n",
    "\n",
    "parser = argparse.ArgumentParser(prog='./ZtoEE_ZFit')\n",
    "parser.add_argument(\n",
    "    '-i', '--input', nargs='+',\n",
    "    help='specify input ntuple root files'\n",
    ")\n",
    "parser.add_argument(\n",
    "    '-o', '--output', default='./',\n",
    "    help='specify output directory'\n",
    ")\n",
    "parser.add_argument(\n",
    "    '--runs', nargs='*', default=None,\n",
    "    help='specify runs to be processed'\n",
    ")\n",
    "args = parser.parse_args()\n",
    "\n",
    "\n",
    "\n",
    "# acceptance cuts\n",
    "ptCut = 30\n",
    "etaCut = 2.5\n",
    "\n",
    "#mass binning \n",
    "mass_low = 76\n",
    "mass_hi = 106\n",
    "mass_nBins = 120         \n",
    "\n",
    "#lumisection binning \n",
    "lumi_nBins = 120\n",
    "lumi_low = 0.5\n",
    "lumi_hi = 1300.5\n",
    "\n",
    "#binning for histogram of number of primary ver\n",
    "pv_nBins = 100\n",
    "pv_low = 0.5 \n",
    "pv_hi = 100.5\n",
    "\n",
    "electronmass = 0.510998946\n",
    "etaBound = 0.9 \n",
    "\n",
    "dirOut = args.output\n",
    "if not os.path.isdir(dirOut):\n",
    "    print(f\"create output directory {dirOut}\")\n",
    "    os.mkdir(dirOut)\n",
    "    \n",
    "branches_electron = [\n",
    "    \"Electron_pt\",\"Electron_eta\",\"Electron_phi\",\"Electron_charge\",\"Electron_cutBased\"\n",
    "]\n",
    "\n",
    "branches_event = [\"luminosityBlock\",\"PV_npvs\"]\n",
    "\n",
    "# branches_tracks = [\"Track_pt\", \"Track_eta\", \"Track_phi\", \"Track_charge\"]\n",
    "\n",
    "# processing the event in batches to avoid using too much memory \n",
    "\n",
    "xrd_filelist = {f : \"Events\" for f in xrd_filelist}\n",
    "\n",
    "full_collection = None\n",
    "runs = [357442]\n",
    "\n",
    "for run in runs:\n",
    "    print(f\"Now at run {run}\")\n",
    "    hists = dict()\n",
    "    xx1 = np.array([])\n",
    "    yy1 = np.array([])\n",
    "    \n",
    "    histograms = {\n",
    "    \"h_mass_1idpass_BB\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_1idpass_BE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_1idpass_EE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_2idpass_BB\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_2idpass_BE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,),\n",
    "    \"h_mass_2idpass_EE\": hist.Hist(\n",
    "        hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"),\n",
    "        hist.axis.Regular(120, 76, 106, name=\"mass\")\n",
    "    ,)\n",
    "}\n",
    "     \n",
    "\n",
    "    for batch in uproot.iterate(xrd_filelist,[\"luminosityBlock\", \"Electron_pt\", \"Electron_eta\",\"Electron_phi\",\"Electron_charge\",\"Electron_cutBased\", \"PV_npvs\"], filter_name=branches_event+branches_electron , cut=\"(run==357442) & HLT_Ele32_WPTight_Gsf & (nElectron>=2)\"):\n",
    "        if len(batch) == 0:\n",
    "            continue\n",
    "        print(f\"Have a batch with {len(batch)} events\")    \n",
    "        events = batch[branches_event]\n",
    "    \n",
    "    # histograms with number of primary vertices vs lumisection\n",
    "\n",
    "        xx1 = np.append(xx1,events[\"luminosityBlock\"].to_numpy())\n",
    "        \n",
    "        yy1 = np.append(yy1,events[\"PV_npvs\"].to_numpy())\n",
    "        \n",
    "        \n",
    "    # electron objects\n",
    "        electrons = batch[branches_electron]\n",
    "    \n",
    "    # rename\n",
    "    \n",
    "        electrons[\"pt\"] = electrons[\"Electron_pt\"]\n",
    "        electrons[\"eta\"] = electrons[\"Electron_eta\"]\n",
    "        electrons[\"phi\"] = electrons[\"Electron_phi\"]\n",
    "        electrons[\"charge\"] = electrons[\"Electron_charge\"]\n",
    "        electrons[\"cut\"] = electrons[\"Electron_cutBased\"]\n",
    "\n",
    "    # index of the electron within the event (needed to disambiguate)\n",
    "    \n",
    "        electrons[\"index\"] = ak.local_index(electrons[\"Electron_pt\"])\n",
    "    \n",
    "    # collection of electrons that pass ID and hlt(trigger pro)\n",
    "    \n",
    "        id_pass = electrons[(electrons[\"pt\"] > ptCut) & (abs(electrons[\"eta\"]) < etaCut)& (electrons[\"cut\"]>=3)]\n",
    "\n",
    "    # collection of electrons that pass ID and fail hlt\n",
    "        \n",
    "        id_fail = electrons[(electrons[\"pt\"] > ptCut) & (abs(electrons[\"eta\"]) < etaCut) &(electrons[\"cut\"]<3)]\n",
    "   \n",
    "    # build pairs from the specified collections, compute masses, and fill histograms\n",
    "    \n",
    "    \n",
    "        def produce(name, tags, probes=None, disambiguate=False):\n",
    "            \n",
    "            BB = []\n",
    "            BE = []\n",
    "            EE = []\n",
    "            \n",
    "            # 1.) build pairs\n",
    "            if probes is None:\n",
    "                p_charge = ak.combinations(tags[\"charge\"], 2)        \n",
    "                lefts, rights = ak.unzip(p_charge)\n",
    "                mask_p = lefts*rights == -1\n",
    "\n",
    "                p_pt = ak.combinations(tags[\"pt\"], 2)[mask_p]\n",
    "                p_eta = ak.combinations(tags[\"eta\"], 2)[mask_p]\n",
    "                p_phi = ak.combinations(tags[\"phi\"], 2)[mask_p]\n",
    "            \n",
    "            else:              \n",
    "                p_charge = ak.cartesian([tags[\"charge\"], probes[\"charge\"]])        \n",
    "                l_charge , r_charge = ak.unzip(p_charge)\n",
    "                mask_p = l_charge*r_charge == -1\n",
    "                if disambiguate:\n",
    "                    p_idx = ak.cartesian([tags[\"index\"], probes[\"index\"]])\n",
    "                    l_idx, r_idx = ak.unzip(p_idx)\n",
    "                    mask_p = mask_p & (l_idx != r_idx)\n",
    "\n",
    "                p_pt = ak.cartesian([tags[\"pt\"],probes[\"pt\"]])[mask_p]\n",
    "                p_eta = ak.cartesian([tags[\"eta\"],probes[\"eta\"]])[mask_p]\n",
    "                p_phi = ak.cartesian([tags[\"phi\"],probes[\"phi\"]])[mask_p]\n",
    "            l_eta, r_eta = ak.unzip(p_eta)\n",
    "\n",
    "            l_pt , r_pt = ak.unzip(p_pt)\n",
    "\n",
    "            \n",
    "            l_phi, r_phi = ak.unzip(p_phi)\n",
    "\n",
    "            ele1 = vector.obj(pt=l_pt, phi=l_phi, eta=l_eta, mass=l_pt*0+electronmass)\n",
    "            ele2 = vector.obj(pt=r_pt, phi=r_phi, eta=r_eta, mass=r_pt*0+electronmass)\n",
    "\n",
    "            masses = (ele1 + ele2).mass\n",
    "            mask_mass = (masses > mass_low) & (masses < mass_hi)\n",
    "        \n",
    "        \n",
    "        # 3.) Fill histograms    \n",
    "            \n",
    "            for region, mask_eta in (\n",
    "                (\"BB\", (abs(l_eta) < etaBound) & (abs(r_eta) < etaBound)),\n",
    "                (\"BE\", (abs(l_eta) < etaBound) != (abs(r_eta) < etaBound)),\n",
    "                (\"EE\", (abs(l_eta) >= etaBound) & (abs(r_eta) >= etaBound))\n",
    "             ):\n",
    "\n",
    "                \n",
    "                yy = masses[mask_eta & mask_mass]   # select tag and probe pairs in eta and mass range\n",
    "                xx = events[\"luminosityBlock\"]\n",
    "#                 print(f\"\\nRegion: {region}\")\n",
    "#                 print(f\"Mask count for region '{region}': {len(yy)} events\")\n",
    "\n",
    "                # pair multiplicities in each event \n",
    "                # counts = ak.num(yy)                                                                   \n",
    "                \n",
    "                # bring the event by event array into the same dimension\n",
    "                if len(xx) > 0:\n",
    "                \n",
    "                    xx = ak.unflatten(xx,counts=1)\n",
    "                # bring the arrays into the same form\n",
    "                    xx, yy = ak.broadcast_arrays(xx,yy)\n",
    "                 \n",
    "                    xx = ak.flatten(xx).to_numpy()\n",
    "                \n",
    "                    yy = ak.flatten(yy).to_numpy()\n",
    "                    \n",
    "                    pairs = np.column_stack((xx, yy))\n",
    "                    \n",
    "                    if region == \"BB\":\n",
    "                        BB.extend(pairs)\n",
    "                    elif region == \"BE\":\n",
    "                        BE.extend(pairs)\n",
    "                    elif region == \"EE\":\n",
    "                        EE.extend(pairs)\n",
    "\n",
    "\n",
    "            BB, BE, EE = map(lambda x: np.array(x).reshape(-1, 2), (BB, BE, EE))\n",
    "\n",
    "            \n",
    "            for region_data , region_name in zip([BB,BE,EE],[\"BB\",\"BE\",\"EE\"]):\n",
    "                if len(region_data)>0 :\n",
    "                    xx_region = region_data[:,0] \n",
    "                    yy_region = region_data[:,1]\n",
    "                \n",
    "#                     h2 = hist.Hist(hist.axis.Regular(120,0.5,1300.5,name=\"luminosity\"),hist.axis.Regular(120,76,106,name=\"mass_z\"),)   \n",
    "#                     h2.fill(np.array(xx_region) , np.array(yy_region)) \n",
    "                \n",
    "                    specific_name = f\"h_mass_{name}_{region_name}\"\n",
    "    \n",
    "    \n",
    "                    histograms[specific_name].fill(xx_region, yy_region)\n",
    "        \n",
    "\n",
    "            return histograms\n",
    "                \n",
    "\n",
    "        produce(\"1idpass\", id_pass, id_fail) \n",
    "        produce(\"2idpass\",id_pass)\n",
    "        \n",
    "        # Save histograms\n",
    "        h1 = hist.Hist(hist.axis.Regular(120, 0.5, 1300.5, name=\"luminosity\"), hist.axis.Regular(100, 0.5, 100.5, name=\"Npv\"),)\n",
    "        h1.fill(np.array(xx1), np.array(yy1))\n",
    "        \n",
    "        \n",
    "        file_path = os.path.join(dirOut, \"output_results.root\")\n",
    "        with uproot.recreate(file_path) as root_file:\n",
    "            root_file[\"histnpv\"] = h1\n",
    "            \n",
    "\n",
    "            for name, hist_obj in histograms.items():\n",
    " \n",
    "                root_file[name] = hist_obj\n",
    "                    \n",
    "\n",
    "        print(f\"Results saved to {file_path}\")\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "122a3327",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    uproot_hist = root_file_2[\"h_mass_2idpass_EE\"]\n",
    "\n",
    "values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "\n",
    "\n",
    "x_bin_start1 = 1  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end1 = 41\n",
    "\n",
    "x_bin_start2 = 41  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end2 = 82\n",
    "\n",
    "x_bin_start3 = 82  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "x_bin_end3 = 119\n",
    "\n",
    "\n",
    "sliced_values1 = values[x_bin_start1:x_bin_end1 + 1, :]\n",
    "sliced_values2 = values[x_bin_start2:x_bin_end2 + 1, :]\n",
    "sliced_values3 = values[x_bin_start3:x_bin_end3 + 1, :]\n",
    "\n",
    "\n",
    "\n",
    "projected_values1 = sliced_values1.sum(axis=0)\n",
    "projected_values2 = sliced_values2.sum(axis=0)\n",
    "projected_values3 = sliced_values3.sum(axis=0)\n",
    "\n",
    "\n",
    "# y-axis bin edges remain the same\n",
    "y_bin_edges = edges_mass\n",
    "# print(projected_values1)\n",
    "# print(y_bin_edges)\n",
    "# print(\"//////\")\n",
    "\n",
    "myHist = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "# myHist.view()[:] = projected_values1\n",
    "# myHist.view()[:] = projected_values2\n",
    "\n",
    "# print(projected_values1)\n",
    "# print(\"*****\")\n",
    "# print(projected_values2)\n",
    "\n",
    "file_path = os.path.join(dirOut, \"region_EE.root\")\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    myHist.view()[:] = projected_values1\n",
    "    root_file[\"my2dEE1\"] = myHist\n",
    "    myHist.view()[:] = projected_values2\n",
    "    root_file[\"my2dEE2\"] = myHist\n",
    "    myHist.view()[:] = projected_values3\n",
    "    root_file[\"my2dEE3\"] = myHist\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "02e92ae4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed h_mass_2idpass_EE\n",
      "Projected values 1: [ 21.  13.  14.  30.  12.  15.  24.  25.  32.  29.  23.  31.  23.  31.\n",
      "  30.  35.  42.  38.  45.  48.  35.  47.  65.  61.  58.  64.  69.  81.\n",
      " 103.  95.  95. 102. 124.  96. 140. 116. 135. 154. 148. 212. 188. 200.\n",
      " 204. 216. 228. 266. 274. 280. 304. 339. 373. 337. 345. 387. 377. 407.\n",
      " 410. 435. 395. 408. 430. 411. 415. 373. 364. 367. 340. 313. 280. 268.\n",
      " 241. 237. 203. 196. 150. 176. 146. 131. 111. 107.  89.  80.  84.  76.\n",
      "  64.  60.  47.  38.  51.  34.  35.  27.  23.  33.  27.  22.  26.  24.\n",
      "  19.  16.  17.  15.  16.  12.  10.   8.  18.  11.   7.   8.  12.  13.\n",
      "  11.  22.  10.   9.  17.   7.  11.   8.]\n",
      "Projected values 2: [ 11.  15.  13.  18.  17.  20.  15.  11.  17.  34.  22.  29.  21.  19.\n",
      "  28.  41.  25.  35.  47.  42.  32.  40.  61.  56.  45.  44.  49.  67.\n",
      "  73.  79.  77.  88.  91.  81. 103. 123. 119. 129. 138. 169. 170. 157.\n",
      " 200. 220. 237. 249. 226. 257. 274. 277. 331. 296. 334. 301. 328. 348.\n",
      " 340. 360. 357. 358. 366. 335. 353. 332. 333. 292. 291. 274. 283. 255.\n",
      " 213. 200. 190. 168. 153. 153. 116. 120. 104. 108.  80.  83.  58.  51.\n",
      "  64.  57.  40.  48.  41.  31.  30.  34.  27.  17.  21.  27.  27.  21.\n",
      "  17.  16.  24.  10.  11.  13.   9.  13.  11.   9.   6.   9.  11.   4.\n",
      "   6.   9.   9.  12.   4.  10.  13.   5.]\n",
      "Projected values 3: [  9.  12.  11.  13.  16.  12.  19.  15.  15.  18.  26.  20.  18.  24.\n",
      "  23.  24.  26.  33.  23.  30.  35.  45.  43.  40.  55.  47.  54.  65.\n",
      "  78.  63.  76.  67.  68.  86.  96.  83. 108. 107. 125. 135. 130. 142.\n",
      " 153. 178. 190. 206. 200. 200. 212. 246. 242. 252. 271. 286. 293. 320.\n",
      " 298. 298. 323. 370. 293. 312. 300. 256. 258. 298. 257. 232. 211. 205.\n",
      " 205. 182. 167. 149. 120. 115. 106. 102.  72.  82.  90.  65.  45.  46.\n",
      "  32.  47.  43.  28.  31.  37.  32.  27.  26.  30.  24.  14.  23.  16.\n",
      "  13.  12.  13.  21.  11.   6.  13.  13.   7.  14.  10.   8.  11.   5.\n",
      "   3.   9.   6.   8.  12.   4.  10.   7.]\n",
      "Processed h_mass_1idpass_EE\n",
      "Projected values 1: [ 14.  18.  12.  12.  20.  17.  15.  21.  17.  18.  17.  16.  15.  28.\n",
      "  24.  21.  21.  20.  24.  22.  27.  19.  26.  29.  31.  32.  36.  35.\n",
      "  41.  53.  52.  52.  49.  52.  57.  60.  48.  66.  61.  76.  85.  76.\n",
      "  63.  83.  88.  80.  86.  91.  77.  88.  97.  95. 112. 105. 102. 102.\n",
      " 127. 118. 132.  97. 110. 104. 121.  99. 109. 102.  85.  89.  98.  64.\n",
      "  65.  64.  60.  47.  45.  58.  45.  40.  39.  34.  31.  32.  30.  32.\n",
      "  15.  30.  14.  15.  13.  14.  22.  14.  15.  14.  13.  11.  15.   8.\n",
      "  16.  11.  16.   8.  11.   9.   3.   6.   6.   7.  10.   6.   6.   6.\n",
      "  10.  10.   6.   9.   8.   8.   4.   9.]\n",
      "Projected values 2: [ 14.  23.  11.  12.  10.  11.  17.  10.  13.  11.  14.  15.  17.  24.\n",
      "  18.   8.  19.  23.  19.  21.  31.  23.  29.  31.  31.  21.  29.  35.\n",
      "  43.  41.  35.  49.  40.  34.  42.  48.  58.  40.  53.  48.  65.  60.\n",
      "  56.  65.  75.  62.  93.  80.  92.  78.  85.  80.  80.  89.  92.  80.\n",
      "  97. 105. 102.  81.  75.  84.  84.  93.  86.  73.  89.  77.  66.  60.\n",
      "  58.  60.  62.  49.  42.  32.  39.  42.  31.  23.  29.  27.  16.  26.\n",
      "  12.  18.  18.  14.  11.  17.  13.  13.  11.  15.   8.   8.   5.  13.\n",
      "   7.   8.   4.  12.  10.  14.  11.   4.   6.   8.   6.  10.   5.   7.\n",
      "   3.   7.  11.   3.   5.   8.  11.   1.]\n",
      "Projected values 3: [16. 15. 10. 12. 15. 13.  9. 12.  7. 14. 14. 11. 11. 15.  8. 21. 17. 16.\n",
      " 18. 16. 18. 17. 18. 20. 26. 18. 26. 24. 22. 28. 37. 26. 34. 23. 27. 28.\n",
      " 35. 33. 39. 60. 49. 43. 47. 51. 57. 49. 47. 71. 49. 60. 62. 75. 72. 78.\n",
      " 80. 88. 74. 77. 88. 58. 78. 76. 66. 81. 63. 67. 54. 66. 43. 41. 45. 39.\n",
      " 42. 32. 32. 29. 20. 32. 16. 32. 29. 23. 17. 13. 20. 16. 14. 16. 17. 12.\n",
      " 10. 13. 14. 11. 12.  8.  9.  9.  6.  8.  3.  7.  2.  3.  6.  5.  6. 12.\n",
      "  4.  6.  5.  9.  4.  6.  6.  2.  5.  4.  2.  3.]\n",
      "All histograms processed and saved.\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import uproot\n",
    "import hist\n",
    "import os\n",
    "import awkward as ak  # To handle arrays in `TTree` format\n",
    "\n",
    "# Define the list of histogram names you want to process\n",
    "hist_names = [\"h_mass_2idpass_EE\", \"h_mass_1idpass_EE\"]\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Define an output dictionary to store the processed results for each histogram\n",
    "processed_results = {}\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    # Iterate over each histogram name\n",
    "    for hist_name in hist_names:\n",
    "        # Access the histogram data for the current component\n",
    "        uproot_hist = root_file_2[hist_name]\n",
    "        values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "        # Define bin ranges for slicing\n",
    "        x_bin_start1 = 1    # This is the first bin in your selection (second bin in ROOT convention)\n",
    "        x_bin_end1 = 41\n",
    "\n",
    "        x_bin_start2 = 41   # This is the first bin in your second selection (second bin in ROOT convention)\n",
    "        x_bin_end2 = 81\n",
    "        \n",
    "        x_bin_start3 = 81  # This is the first bin in your third selection (second bin in ROOT convention)\n",
    "        x_bin_end3 = 119\n",
    "\n",
    "        # Slice and project the data based on the bin ranges\n",
    "        sliced_values1 = values[x_bin_start1:x_bin_end1 + 1, :]\n",
    "        sliced_values2 = values[x_bin_start2:x_bin_end2 + 1, :]\n",
    "        sliced_values3 = values[x_bin_start3:x_bin_end3 + 1, :]\n",
    "\n",
    "        projected_values1 = sliced_values1.sum(axis=0)\n",
    "        projected_values2 = sliced_values2.sum(axis=0)\n",
    "        projected_values3 = sliced_values3.sum(axis=0)\n",
    "\n",
    "        # Define y-axis bin edges, which remain the same\n",
    "        y_bin_edges = edges_mass\n",
    "\n",
    "        # Create a fresh histogram for each `hist_name` to avoid reusing\n",
    "        myHist1 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist1.view()[()] = projected_values1\n",
    "        \n",
    "        myHist2 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist2.view()[()] = projected_values2\n",
    "        \n",
    "        myHist3 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist3.view()[()] = projected_values3\n",
    "\n",
    "        # Store processed projections and histograms in the results dictionary\n",
    "        processed_results[hist_name] = {\n",
    "            \"projected_values1\": projected_values1,\n",
    "            \"projected_values2\": projected_values2,\n",
    "            \"projected_values3\": projected_values3,\n",
    "            \"histogram1\": myHist1,\n",
    "            \"histogram2\": myHist2,\n",
    "            \"histogram3\": myHist3,\n",
    "        }\n",
    "\n",
    "        # Optionally print for each histogram\n",
    "        print(f\"Processed {hist_name}\")\n",
    "        print(\"Projected values 1:\", projected_values1)\n",
    "        print(\"Projected values 2:\", projected_values2)\n",
    "        print(\"Projected values 3:\", projected_values3)\n",
    "\n",
    "# Example of saving to a new ROOT file\n",
    "dirOut = \"mass_regionEE.root\"  # Specify your output directory\n",
    "# os.makedirs(dirOut, exist_ok=True)\n",
    "file_path = os.path.join(dirOut)\n",
    "# Write processed histograms and projections to the ROOT file\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    for hist_name, result in processed_results.items():  \n",
    "        # Save each histogram separately\n",
    "        root_file[f\"{hist_name}_hist1\"] = result[\"histogram1\"]\n",
    "        root_file[f\"{hist_name}_hist2\"] = result[\"histogram2\"]\n",
    "        root_file[f\"{hist_name}_hist3\"] = result[\"histogram3\"]\n",
    "\n",
    "print(\"All histograms processed and saved.\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a788424d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed h_mass_2idpass_BE\n",
      "Projected values 4: [  7.   9.  12.  13.   9.  12.  11.  10.  22.  11.  17.  15.  12.  17.\n",
      "  15.  27.  24.  20.  20.  20.  21.  42.  39.  28.  47.  46.  47.  59.\n",
      "  56.  72.  72.  87.  94.  82. 103. 109. 107. 110. 139. 170. 162. 193.\n",
      " 202. 192. 220. 254. 290. 304. 332. 304. 372. 371. 418. 428. 421. 420.\n",
      " 533. 514. 498. 478. 535. 482. 493. 446. 439. 426. 385. 331. 315. 268.\n",
      " 239. 247. 236. 216. 186. 150. 136. 112. 111.  96.  83.  76.  80.  58.\n",
      "  62.  73.  50.  56.  36.  46.  36.  36.  30.  37.  21.  29.  26.  25.\n",
      "  32.  26.  24.  20.  21.  18.  23.  18.  21.  14.  12.  17.  13.  11.\n",
      "  12.  15.   8.  11.  10.   8.  10.  15.]\n",
      "Projected values 5: [  8.   9.   5.   6.  18.   7.   7.  11.  10.  12.  16.  20.  14.  12.\n",
      "  12.  14.  24.  26.  24.  21.  20.  25.  31.  31.  35.  41.  39.  46.\n",
      "  38.  43.  67.  58.  55.  79.  93.  87.  89.  98. 117. 135. 112. 156.\n",
      " 156. 152. 188. 177. 247. 231. 247. 301. 318. 332. 346. 380. 410. 412.\n",
      " 448. 465. 441. 425. 407. 417. 430. 410. 387. 353. 335. 300. 287. 250.\n",
      " 201. 203. 184. 165. 133. 119. 128. 117. 109.  99.  86.  68.  67.  60.\n",
      "  56.  51.  48.  28.  47.  36.  30.  27.  28.  27.  16.  15.  26.  29.\n",
      "  22.  25.  21.  19.  15.  16.  12.  17.  15.  18.  18.  14.  11.  16.\n",
      "  13.  14.  18.  12.   7.  10.   6.   9.]\n",
      "Projected values 6: [  4.   5.   7.  11.   7.   4.   6.   8.  12.  12.   9.  12.  11.  10.\n",
      "  12.  15.  19.  15.  33.  15.  32.  22.  25.  32.  30.  33.  40.  37.\n",
      "  45.  35.  49.  52.  63.  78.  68.  70.  82.  89. 109.  97. 113. 120.\n",
      " 142. 163. 171. 167. 192. 219. 224. 253. 270. 280. 329. 323. 341. 339.\n",
      " 349. 380. 350. 358. 395. 347. 349. 305. 324. 303. 264. 276. 239. 213.\n",
      " 187. 186. 169. 161. 139. 118. 100. 106.  77.  74.  55.  57.  50.  60.\n",
      "  44.  35.  39.  35.  22.  34.  26.  24.  19.  26.  22.  27.  19.  22.\n",
      "  11.  21.  15.   7.  20.  17.  15.  11.  10.  14.  17.   8.   8.  10.\n",
      "  15.  11.   5.  10.   7.  13.   9.   8.]\n",
      "Processed h_mass_1idpass_BE\n",
      "Projected values 4: [  7.   4.   9.  10.  10.  11.   7.   8.   9.   9.   5.  12.  14.  12.\n",
      "  11.  13.  20.  19.  16.  15.   9.  21.  18.  16.  17.  27.  25.  25.\n",
      "  28.  34.  24.  29.  34.  37.  37.  35.  57.  44.  46.  54.  67.  59.\n",
      "  56.  79.  59.  72.  53.  83.  99.  84.  97. 101. 117. 103.  93. 102.\n",
      " 108. 118. 107. 130. 126. 106.  99. 102.  99. 113.  93.  89.  73.  68.\n",
      "  76.  53.  66.  62.  34.  42.  47.  34.  36.  26.  30.  18.  32.  25.\n",
      "  22.  23.  20.  18.  12.  16.  21.  11.  14.   9.  11.  18.   9.  16.\n",
      "   5.   7.  12.  11.   7.   7.   5.   5.   8.   5.   9.   8.   9.   8.\n",
      "   9.   2.   3.   9.   8.   8.   6.   6.]\n",
      "Projected values 5: [  3.   4.   3.   9.   6.   7.   5.   8.   9.   8.   7.   8.   9.   5.\n",
      "  15.  16.  10.  17.  15.   7.  19.  15.  17.  17.  16.  23.  21.  12.\n",
      "  31.  22.  22.  24.  20.  24.  30.  37.  31.  34.  37.  45.  49.  59.\n",
      "  47.  50.  55.  64.  61.  56.  69.  53.  82.  85.  97.  73.  79. 104.\n",
      "  92. 106. 108.  97.  96.  95.  87.  82.  81.  88.  80.  74.  75.  55.\n",
      "  53.  54.  46.  39.  43.  36.  40.  35.  23.  17.  19.  14.  22.  19.\n",
      "  16.  14.  13.  14.   9.  20.  10.  14.  10.  11.   9.   4.   9.  12.\n",
      "   8.   7.   9.  10.   5.   7.   6.   8.   2.   8.   6.   8.   6.   4.\n",
      "   7.   8.   7.   2.   7.   6.   7.   5.]\n",
      "Projected values 6: [ 2.  3.  9.  6.  8. 11.  7.  6.  7.  3.  5.  9.  6. 10.  6.  7. 13. 11.\n",
      " 13.  9. 18.  9. 14. 14. 24. 20. 10. 19. 18. 18. 17. 23. 20. 26. 27. 25.\n",
      " 17. 31. 29. 36. 42. 40. 41. 46. 41. 47. 45. 50. 78. 69. 64. 59. 53. 60.\n",
      " 74. 68. 80. 67. 92. 78. 72. 81. 69. 77. 58. 72. 57. 70. 48. 38. 46. 41.\n",
      " 29. 33. 43. 32. 29. 16. 25. 16. 14. 19. 14. 12. 11. 15. 10. 11. 16. 14.\n",
      " 10.  2.  6. 14.  9.  6.  4.  4.  7.  6.  1.  3.  4.  3.  8.  8.  6.  2.\n",
      "  6.  4.  2.  4.  3.  5.  7.  6.  4.  2.  5.  3.]\n",
      "All histograms processed and saved.\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import uproot\n",
    "import hist\n",
    "import os\n",
    "import awkward as ak  # To handle arrays in `TTree` format\n",
    "\n",
    "# Define the list of histogram names you want to process\n",
    "hist_names = [\"h_mass_2idpass_BE\", \"h_mass_1idpass_BE\"]\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Define an output dictionary to store the processed results for each histogram\n",
    "processed_results = {}\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    # Iterate over each histogram name\n",
    "    for hist_name in hist_names:\n",
    "        # Access the histogram data for the current component\n",
    "        uproot_hist = root_file_2[hist_name]\n",
    "        values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "        # Define bin ranges for slicing\n",
    "        x_bin_start4 = 1    # This is the first bin in your selection (second bin in ROOT convention)\n",
    "        x_bin_end4 = 41\n",
    "\n",
    "        x_bin_start5 = 41 # This is the first bin in your second selection (second bin in ROOT convention)\n",
    "        x_bin_end5 = 81\n",
    "        \n",
    "        x_bin_start6 = 81  # This is the first bin in your third selection (second bin in ROOT convention)\n",
    "        x_bin_end6 = 119\n",
    "        \n",
    "#         x_bin_start7 = 94  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "#         x_bin_end7 = 144\n",
    "        \n",
    "#         x_bin_start8 = 105   # This is the first bin in your selection (second bin in ROOT convention)\n",
    "#         x_bin_end8 = 130\n",
    "        \n",
    "\n",
    "        # Slice and project the data based on the bin ranges\n",
    "        sliced_values4 = values[x_bin_start4:x_bin_end4 + 1, :]\n",
    "        sliced_values5 = values[x_bin_start5:x_bin_end5 + 1, :]\n",
    "        sliced_values6 = values[x_bin_start6:x_bin_end6 + 1, :]\n",
    "#         sliced_values7 = values[x_bin_start7:x_bin_end7 + 1, :]\n",
    "#         sliced_values8 = values[x_bin_start8:x_bin_end8 + 1, :]\n",
    "        \n",
    "\n",
    "        projected_values4 = sliced_values4.sum(axis=0)\n",
    "        projected_values5 = sliced_values5.sum(axis=0)\n",
    "        projected_values6 = sliced_values6.sum(axis=0)\n",
    "#         projected_values7 = sliced_values7.sum(axis=0)\n",
    "#         projected_values8 = sliced_values8.sum(axis=0)\n",
    "        \n",
    "\n",
    "        # Define y-axis bin edges, which remain the same\n",
    "        y_bin_edges = edges_mass\n",
    "\n",
    "        # Create a fresh histogram for each `hist_name` to avoid reusing\n",
    "        myHist4 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist4.view()[()] = projected_values4\n",
    "        \n",
    "        myHist5 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist5.view()[()] = projected_values5\n",
    "        \n",
    "        myHist6 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist6.view()[()] = projected_values6\n",
    "        \n",
    "#         myHist7 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "#         myHist7.view()[()] = projected_values7\n",
    "        \n",
    "#         myHist8 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "#         myHist8.view()[()] = projected_values8\n",
    "\n",
    "        # Store processed projections and histograms in the results dictionary\n",
    "        processed_results[hist_name] = {\n",
    "            \"projected_values4\": projected_values4,\n",
    "            \"projected_values5\": projected_values5,\n",
    "            \"projected_values6\": projected_values6,\n",
    "#             \"projected_values7\": projected_values7,\n",
    "#             \"projected_values8\": projected_values8,\n",
    "            \n",
    "            \n",
    "            \"histogram4\": myHist4,\n",
    "            \"histogram5\": myHist5,\n",
    "            \"histogram6\": myHist6,\n",
    "#             \"histogram7\": myHist7,\n",
    "#             \"histogram8\": myHist8,\n",
    "            \n",
    "        }\n",
    "\n",
    "        # Optionally print for each histogram\n",
    "        print(f\"Processed {hist_name}\")\n",
    "        print(\"Projected values 4:\", projected_values4)\n",
    "        print(\"Projected values 5:\", projected_values5)\n",
    "        print(\"Projected values 6:\", projected_values6)\n",
    "#         print(\"Projected values 7:\", projected_values7)\n",
    "#         print(\"Projected values 8:\", projected_values8)\n",
    "        \n",
    "        \n",
    "\n",
    "# Example of saving to a new ROOT file\n",
    "dirOut = \"mass_regionBE.root\"  # Specify your output directory\n",
    "# os.makedirs(dirOut, exist_ok=True)\n",
    "file_path = os.path.join(dirOut)\n",
    "# Write processed histograms and projections to the ROOT file\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    for hist_name, result in processed_results.items():  \n",
    "        # Save each histogram separately\n",
    "        root_file[f\"{hist_name}_hist4\"] = result[\"histogram4\"]\n",
    "        root_file[f\"{hist_name}_hist5\"] = result[\"histogram5\"]\n",
    "        root_file[f\"{hist_name}_hist6\"] = result[\"histogram6\"]\n",
    "#         root_file[f\"{hist_name}_hist7\"] = result[\"histogram7\"]\n",
    "#         root_file[f\"{hist_name}_hist8\"] = result[\"histogram8\"]\n",
    "        \n",
    "    \n",
    "\n",
    "print(\"All histograms processed and saved.\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fdf16e7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed h_mass_2idpass_BB\n",
      "Projected values 9: [ 10.  13.  13.   4.  10.  11.  12.  12.   9.  12.  12.  17.  13.  18.\n",
      "  20.  15.  12.  22.  16.  18.  21.  24.  28.  26.  22.  43.  37.  34.\n",
      "  35.  34.  38.  53.  42.  51.  61.  61.  64.  67.  79.  78.  92. 109.\n",
      "  99. 143. 166. 162. 178. 196. 233. 260. 294. 319. 323. 358. 384. 403.\n",
      " 439. 463. 521. 515. 507. 476. 470. 471. 417. 333. 357. 290. 237. 233.\n",
      " 189. 155. 146. 118. 115. 109.  78.  77.  68.  56.  56.  47.  45.  51.\n",
      "  32.  33.  36.  35.  31.  25.  24.  19.  17.  19.  14.  16.  12.  16.\n",
      "  16.  15.  11.  16.  11.  25.  19.  14.   8.   7.  18.   3.   7.   7.\n",
      "   9.   7.   7.   6.   7.   3.   8.   6.]\n",
      "Projected values 10: [  9.   7.   8.   9.   5.  14.  11.  10.  13.  13.   9.  16.  11.   8.\n",
      "  13.  17.  16.  17.  14.  10.  25.  23.  21.  17.  14.  17.  32.  29.\n",
      "  28.  29.  33.  30.  32.  45.  45.  50.  54.  68.  65.  88.  73.  87.\n",
      " 101. 114. 113. 137. 174. 166. 188. 217. 226. 262. 276. 318. 346. 375.\n",
      " 350. 436. 440. 442. 463. 403. 443. 377. 340. 345. 275. 231. 204. 188.\n",
      " 159. 157. 126. 120.  88.  79.  54.  76.  55.  50.  75.  39.  36.  34.\n",
      "  34.  31.  23.  29.  20.  24.  28.  20.  16.  16.  17.  16.  16.  13.\n",
      "  16.   5.  11.  13.  10.  14.   8.  10.   9.   6.   7.   6.   7.   9.\n",
      "   7.   5.   8.   4.   4.   5.   4.   7.]\n",
      "Projected values 11: [  9.   7.   4.   9.  11.   6.  11.  14.  10.   9.  10.   7.  10.   7.\n",
      "   9.   9.  12.  16.  13.  11.  19.  20.  21.  11.  23.  25.  13.  23.\n",
      "  24.  32.  27.  34.  29.  36.  41.  53.  52.  48.  64.  74.  82.  83.\n",
      "  76.  86. 106. 108. 132. 147. 171. 162. 183. 217. 236. 236. 288. 319.\n",
      " 324. 329. 340. 374. 371. 320. 323. 344. 277. 278. 230. 208. 165. 183.\n",
      " 142. 126.  99.  94.  76.  66.  61.  66.  57.  48.  35.  34.  28.  29.\n",
      "  21.  22.  15.  22.  16.  16.  23.  21.  14.  14.  10.  16.  15.  18.\n",
      "  13.   8.  10.  10.   9.   8.   5.   7.   5.   8.   6.   7.   4.   5.\n",
      "   7.   3.   3.   6.   2.   5.   9.   6.]\n",
      "Processed h_mass_1idpass_BB\n",
      "Projected values 9: [  9.   4.   9.   4.   6.   7.  11.  10.   6.   9.   5.   8.   9.   7.\n",
      "  10.  12.  12.  12.   8.  11.   6.  13.  16.  11.  16.  17.  16.  12.\n",
      "  23.  20.  21.  22.  26.  24.  19.  26.  20.  36.  17.  28.  32.  31.\n",
      "  43.  37.  46.  43.  46.  52.  43.  53.  62.  87.  68.  88. 106.  85.\n",
      " 100. 121. 103.  94.  91.  93.  95.  80. 104.  85.  71.  63.  49.  46.\n",
      "  45.  41.  38.  38.  28.  25.  29.  22.  27.   8.  25.  19.  10.  14.\n",
      "   8.  11.  11.   8.   4.   7.  11.  10.   4.   4.   9.   3.   9.   7.\n",
      "   3.   3.   6.   8.   4.   6.   4.   3.   2.   1.   6.   3.   7.   1.\n",
      "   4.   2.   0.   1.   5.   1.   2.   2.]\n",
      "Projected values 10: [ 3.  6.  5.  7.  2.  1.  8.  4.  7.  8.  9.  8.  4. 14.  6.  7. 11.  8.\n",
      " 11. 14.  9.  8.  7. 11. 16. 14.  9. 15. 16. 22. 23. 17. 22. 17. 29. 19.\n",
      " 18. 21. 29. 24. 32. 29. 34. 40. 39. 33. 43. 41. 55. 41. 57. 77. 54. 68.\n",
      " 60. 79. 86. 74. 81. 83. 84. 76. 75. 59. 72. 55. 62. 51. 46. 39. 35. 32.\n",
      " 27. 27. 28. 19. 24. 16. 12. 12. 10. 13. 14.  9. 18. 13.  8.  7. 13.  3.\n",
      " 12.  7.  7.  3.  9.  6.  1.  5.  8.  4.  4.  5.  2.  2.  2.  3.  7.  3.\n",
      "  2.  3.  2.  5.  7.  5.  2.  2.  1.  1.  3.  1.]\n",
      "Projected values 11: [ 5.  4.  6.  2.  5.  4.  1.  7.  8. 12.  7.  5. 15.  7. 10.  7.  9.  6.\n",
      " 10.  8.  2. 10. 11. 15. 11. 11. 13. 21. 10. 11. 17. 12.  9. 13. 19. 15.\n",
      " 20. 21. 18. 19. 24. 16. 23. 21. 28. 42. 38. 41. 50. 49. 52. 39. 50. 64.\n",
      " 58. 67. 66. 79. 67. 78. 58. 70. 85. 66. 63. 62. 47. 44. 35. 39. 34. 27.\n",
      " 21. 26. 25. 15. 16. 11.  9. 14.  9.  5.  6.  7.  6.  7. 11.  7.  3.  7.\n",
      "  6.  3.  3.  5.  7.  4.  7.  2.  4.  5.  5.  5.  2.  4.  1.  7.  2.  3.\n",
      "  0.  1.  4.  3.  0.  5.  1.  2.  2.  2.  3.  3.]\n",
      "All histograms processed and saved.\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import uproot\n",
    "import hist\n",
    "import os\n",
    "import awkward as ak  # To handle arrays in `TTree` format\n",
    "\n",
    "# Define the list of histogram names you want to process\n",
    "hist_names = [\"h_mass_2idpass_BB\", \"h_mass_1idpass_BB\"]\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Define an output dictionary to store the processed results for each histogram\n",
    "processed_results = {}\n",
    "\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    # Iterate over each histogram name\n",
    "    for hist_name in hist_names:\n",
    "        # Access the histogram data for the current component\n",
    "        uproot_hist = root_file_2[hist_name]\n",
    "        values, edges_lumisec, edges_mass = uproot_hist.to_numpy()\n",
    "\n",
    "        # Define bin ranges for slicing\n",
    "        x_bin_start9 = 1 # This is the first bin in your selection (second bin in ROOT convention)\n",
    "        x_bin_end9 = 41\n",
    "        \n",
    "        x_bin_start10 = 41  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "        x_bin_end10 = 81\n",
    "\n",
    "        x_bin_start11 = 81  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "        x_bin_end11 = 119\n",
    "\n",
    "#         x_bin_start12 = 109  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "#         x_bin_end12 = 144\n",
    "        \n",
    "#         x_bin_start13 = 105  # This is the first bin in your selection (second bin in ROOT convention)\n",
    "#         x_bin_end13 = 130\n",
    "    \n",
    "\n",
    "        # Slice and project the data based on the bin ranges\n",
    "        sliced_values9 = values[x_bin_start9:x_bin_end9 + 1, :]\n",
    "        sliced_values10 = values[x_bin_start10:x_bin_end10 + 1, :]\n",
    "        sliced_values11 = values[x_bin_start11:x_bin_end11 + 1, :]\n",
    "#         sliced_values12 = values[x_bin_start12:x_bin_end12 + 1, :]\n",
    "#         sliced_values13 = values[x_bin_start13:x_bin_end13 + 1, :]\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "        projected_values9 = sliced_values9.sum(axis=0)\n",
    "        projected_values10 = sliced_values10.sum(axis=0)\n",
    "        projected_values11 = sliced_values11.sum(axis=0)\n",
    "#         projected_values12 = sliced_values12.sum(axis=0)\n",
    "#         projected_values13 = sliced_values13.sum(axis=0)\n",
    "        \n",
    "        \n",
    "\n",
    "        # Define y-axis bin edges, which remain the same\n",
    "        y_bin_edges = edges_mass\n",
    "\n",
    "        # Create a fresh histogram for each `hist_name` to avoid reusing\n",
    "        myHist9 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist9.view()[()] = projected_values9\n",
    "        \n",
    "        myHist10 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist10.view()[()] = projected_values10\n",
    "        \n",
    "        myHist11 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "        myHist11.view()[()] = projected_values11\n",
    "        \n",
    "#         myHist12 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "#         myHist12.view()[()] = projected_values12\n",
    "        \n",
    "#         myHist13 = hist.Hist(hist.axis.Regular(120, 76, 106, name=\"mass\"))\n",
    "#         myHist13.view()[()] = projected_values13\n",
    "        \n",
    "\n",
    "        # Store processed projections and histograms in the results dictionary\n",
    "        processed_results[hist_name] = {\n",
    "            \"projected_values9\": projected_values9,\n",
    "            \"projected_values10\": projected_values10,\n",
    "            \"projected_values11\": projected_values11,\n",
    "#             \"projected_values12\": projected_values12,\n",
    "#             \"projected_values13\": projected_values13,\n",
    "            \n",
    "\n",
    "            \n",
    "            \n",
    "            \"histogram9\": myHist9,\n",
    "            \"histogram10\": myHist10,\n",
    "            \"histogram11\": myHist11,\n",
    "#             \"histogram12\": myHist12,\n",
    "#             \"histogram13\": myHist13,\n",
    "            \n",
    "\n",
    "            \n",
    "        }\n",
    "\n",
    "        # Optionally print for each histogram\n",
    "        print(f\"Processed {hist_name}\")\n",
    "        print(\"Projected values 9:\", projected_values9)\n",
    "        print(\"Projected values 10:\", projected_values10)\n",
    "        print(\"Projected values 11:\", projected_values11)\n",
    "#         print(\"Projected values 12:\", projected_values12)\n",
    "#         print(\"Projected values 13:\", projected_values13)\n",
    "        \n",
    "        \n",
    "\n",
    "# Example of saving to a new ROOT file\n",
    "dirOut = \"mass_regionBB.root\"  # Specify your output directory\n",
    "# os.makedirs(dirOut, exist_ok=True)\n",
    "file_path = os.path.join(dirOut)\n",
    "# Write processed histograms and projections to the ROOT file\n",
    "with uproot.recreate(file_path) as root_file:\n",
    "    for hist_name, result in processed_results.items():  \n",
    "        # Save each histogram separately\n",
    "        root_file[f\"{hist_name}_hist9\"] = result[\"histogram9\"]\n",
    "        root_file[f\"{hist_name}_hist10\"] = result[\"histogram10\"]\n",
    "        root_file[f\"{hist_name}_hist11\"] = result[\"histogram11\"]\n",
    "#         root_file[f\"{hist_name}_hist12\"] = result[\"histogram12\"]\n",
    "#         root_file[f\"{hist_name}_hist13\"] = result[\"histogram13\"]\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "print(\"All histograms processed and saved.\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "54dca6ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitted Parameters for h_mass_2idpass_BB_hist7;1:\n",
      "  Mean = 90.78357696605002, Sigma = 2.164704560455021, Signal Amplitude = 352.2061974181264, Background Amplitude = 8.240000000000007\n",
      "  Background Polynomial Coefficients: [43.16466339 -0.29040269]\n",
      "Fitted Parameters for h_mass_2idpass_BB_hist8;1:\n",
      "  Mean = 90.80119450559252, Sigma = 2.11314358635844, Signal Amplitude = 314.6992317158313, Background Amplitude = 183.5\n",
      "  Background Polynomial Coefficients: [37.23168508 -0.24857877]\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "# Step 1: Load the histogram data for multiple categories\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Categories and corresponding histograms\n",
    "categories = [\"h_mass_2idpass_BB_hist7;1\", \"h_mass_2idpass_BB_hist8;1\"]\n",
    "histograms = {}\n",
    "\n",
    "# Load histograms for each category\n",
    "with uproot.open(root_file_path) as root_file:\n",
    "    for category in categories:\n",
    "        hist = root_file[category]\n",
    "        hist_values, hist_edges = hist.to_numpy()\n",
    "        histograms[category] = (hist_values, hist_edges)\n",
    "\n",
    "# Define bin centers\n",
    "bin_centers = {category: (edges[:-1] + edges[1:]) / 2 for category, (values, edges) in histograms.items()}\n",
    "\n",
    "# Signal fraction for each category\n",
    "signal_fraction = {\n",
    "    \"h_mass_2idpass_BB_hist7;1\": 0.98,\n",
    "    \"h_mass_2idpass_BB_hist8;1\": 0.5\n",
    "}\n",
    "\n",
    "# Model function: Gaussian + Polynomial background\n",
    "def model(x, mean, sigma, amplitude_signal, amplitude_background, *polynomial_params):\n",
    "    gaussian = amplitude_signal * np.exp(-(x - mean)**2 / (2 * sigma**2))\n",
    "    background = sum(c * x**i for i, c in enumerate(polynomial_params))\n",
    "    return gaussian + background\n",
    "\n",
    "# Fit each category with its signal fraction\n",
    "fit_results = {}\n",
    "\n",
    "for category, (hist_values, hist_edges) in histograms.items():\n",
    "    mean_guess = 91.2\n",
    "    sigma_guess = 2.5\n",
    "    amplitude_signal_guess = np.max(hist_values) * signal_fraction[category]\n",
    "    amplitude_background_guess = np.max(hist_values) * (1 - signal_fraction[category])\n",
    "    polynomial_guess = [0, 0]\n",
    "\n",
    "    initial_params = [mean_guess, sigma_guess, amplitude_signal_guess, amplitude_background_guess] + polynomial_guess\n",
    "\n",
    "    # Fit the data\n",
    "    params, cov_matrix = curve_fit(model, bin_centers[category], hist_values, p0=initial_params)\n",
    "\n",
    "    # Store fit results\n",
    "    fit_results[category] = params\n",
    "\n",
    "# Function to plot signal, background, and total model for each category\n",
    "def plot_comp_model(model, bin_centers, hist_values, fit_params, category_name=\"Model\"):\n",
    "    # Extract parameters\n",
    "    mean, sigma, amplitude_signal, amplitude_background, *poly_params = fit_params\n",
    "    \n",
    "    # Generate x values for smooth plotting of model and components\n",
    "    x_fit = np.linspace(bin_centers[0], bin_centers[-1], 1000)\n",
    "    \n",
    "    # Calculate individual components\n",
    "    signal = amplitude_signal * np.exp(-(x_fit - mean)**2 / (2 * sigma**2))\n",
    "    background = sum(c * x_fit**i for i, c in enumerate(poly_params))\n",
    "    total_fit = signal + background\n",
    "\n",
    "    # Plot data, fit, and components\n",
    "    plt.hist(bin_centers, bins=len(hist_values), weights=hist_values, histtype='step', label=f\"Data {category_name}\",color=\"black\")\n",
    "    plt.plot(x_fit, total_fit, label=\"Total Fit: Signal + Background\", color='red', linewidth=2)\n",
    "    plt.plot(x_fit, signal, label=\"Signal Component\", color='blue', linestyle='--')\n",
    "    plt.plot(x_fit, background, label=\"Background Component\", color='green', linestyle=':')\n",
    "\n",
    "    # Add labels, title, and legend\n",
    "    plt.xlabel(\"Mass (GeV)\")\n",
    "    plt.ylabel(\"Events\")\n",
    "    plt.title(f\"Fit Model for Category: {category_name}\")\n",
    "    plt.legend(loc='upper left',fontsize=15)\n",
    "    plt.show()\n",
    "\n",
    "# Plot each category with components\n",
    "for category in categories:\n",
    "    hist_values, hist_edges = histograms[category]\n",
    "    fit_params = fit_results[category]\n",
    "    plot_comp_model(model, bin_centers[category], hist_values, fit_params, category_name=category)\n",
    "\n",
    "# Print fitted parameters for each category\n",
    "for category, params in fit_results.items():\n",
    "    mean_fit, sigma_fit, amplitude_signal_fit, amplitude_background_fit = params[:4]\n",
    "    background_params = params[4:]\n",
    "    print(f\"Fitted Parameters for {category}:\")\n",
    "    print(f\"  Mean = {mean_fit}, Sigma = {sigma_fit}, Signal Amplitude = {amplitude_signal_fit}, Background Amplitude = {amplitude_background_fit}\")\n",
    "    print(f\"  Background Polynomial Coefficients: {background_params}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "9e7ebe45",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f551d0aba30>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f551d0ac370>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00014 │               396.01 |  495.9262 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                   value  (rounded)    at limit\n",
      "-------------------  ------------------  ----------\n",
      "frac_ID_pass_0                 0.676903       False\n",
      "mu_ID_pass_0                     90.748       False\n",
      "sigma_ID_pass_0                  2.0257       False\n",
      "bkg_mu_ID_pass_0                89.9999       False\n",
      "bkg_sigma_ID_pass_0             6.69667       False\n",
      "Fit results for ID_fail:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f551d0ae9a0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f551d5c8a60>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00023 │               396.01 |  474.4745 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                   value  (rounded)    at limit\n",
      "-------------------  ------------------  ----------\n",
      "frac_ID_fail_1                 0.677119       False\n",
      "mu_ID_fail_1                    90.7476       False\n",
      "sigma_ID_fail_1                 2.02608       False\n",
      "bkg_mu_ID_fail_1                89.9999       False\n",
      "bkg_sigma_ID_fail_1             6.69925       False\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/binning.py:154: UserWarning: Flow currently not fully supported. Values outside the edges are all 0.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Sample histogram values and bin edges\n",
    "hist_values = np.array([\n",
    "    9, 7, 11, 2, 9, 10, 10, 8, 6, 11, 8, 12, 11, 11, 18, 14, 8, 17, 10, 13,\n",
    "    14, 24, 23, 19, 19, 34, 28, 24, 27, 29, 27, 42, 29, 41, 43, 45, 40, 56,\n",
    "    66, 53, 78, 84, 80, 115, 129, 123, 142, 156, 185, 189, 225, 241, 252, 281,\n",
    "    297, 319, 334, 363, 405, 412, 396, 351, 340, 370, 320, 258, 269, 238, 188,\n",
    "    174, 147, 116, 107, 93, 87, 87, 59, 59, 57, 50, 41, 35, 38, 41, 24, 29,\n",
    "    26, 27, 21, 16, 17, 14, 12, 15, 13, 13, 12, 14, 14, 11, 7, 11, 9, 22, 16,\n",
    "    11, 6, 6, 13, 2, 5, 6, 6, 6, 6, 4, 6, 3, 6, 5\n",
    "])\n",
    "hist_edges = np.linspace(76, 106, len(hist_values) + 1)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98,\n",
    "    \"ID_fail\": 0.5\n",
    "}\n",
    "categories = [\"ID_pass\", \"ID_fail\"]\n",
    "\n",
    "# Define the observation space by setting VariableBinning with the edges and a matching name\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and background with unique parameter names\n",
    "models = {}\n",
    "for idx, category in enumerate(categories):\n",
    "    # Reset any existing parameters (important for fresh execution)\n",
    "    zfit.Parameter._existing_params.clear()  # This clears the global parameter registry\n",
    "    \n",
    "    # Use category name to create unique parameter names\n",
    "    mu = zfit.Parameter(f\"mu_{category}_{idx}\", 90, 80, 100)\n",
    "    sigma = zfit.Parameter(f\"sigma_{category}_{idx}\", 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    bkg_mu = zfit.Parameter(f\"bkg_mu_{category}_{idx}\", 80, 70, 90)\n",
    "    bkg_sigma = zfit.Parameter(f\"bkg_sigma_{category}_{idx}\", 15, 5, 30)\n",
    "    background_model = zfit.pdf.Gauss(obs=obs, mu=bkg_mu, sigma=bkg_sigma)\n",
    "\n",
    "    # Ensure frac parameter is unique for each category\n",
    "    frac_param = zfit.Parameter(f\"frac_{category}_{idx}\", signal_fraction[category], 0, 1)\n",
    "\n",
    "    # Sum the signal and background models\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Wrap the unbinned model into a binned model\n",
    "    from zfit.pdf import BinnedFromUnbinnedPDF\n",
    "    binned_model = BinnedFromUnbinnedPDF(unbinned_model, obs)\n",
    "\n",
    "    models[category] = binned_model\n",
    "\n",
    "# Perform the fit for each category\n",
    "results = {}\n",
    "for category, model in models.items():\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results\n",
    "def plot_comp_model(models, data_dict, edges, categories):\n",
    "    fig, axes = plt.subplots(1, len(categories), figsize=(14, 5))\n",
    "\n",
    "    for i, category in enumerate(categories):\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        \n",
    "        # Generate model predictions for plotting\n",
    "        x_values = np.linspace(edges[0], edges[-1], 200)\n",
    "        y_values = model.pdf(x_values).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        ax = axes[i]\n",
    "        ax.hist(bin_centers, bins=edges, weights=values, alpha=0.6, label=\"Data\")\n",
    "        ax.plot(x_values, y_values, color=\"red\", label=\"Model Fit\")\n",
    "        ax.set_title(f\"Fit for {category}\")\n",
    "        ax.set_xlabel(\"X\")\n",
    "        ax.set_ylabel(\"Counts\")\n",
    "        ax.legend()\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the plotting function\n",
    "plot_comp_model(models, data_dict, hist_edges, categories)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0a861a59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f962831b580>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f96001d7730>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 2.6e-06 │               506.73 |  606.4598 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731660196741                  0.841934       False\n",
      "mu_ID_pass_1731660196741                     90.6831       False\n",
      "sigma_ID_pass_1731660196741                  2.46469       False\n",
      "lambda_bkg_ID_pass_1731660196741          -0.0148381       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Sample histogram values and bin edges\n",
    "hist_values = np.array([\n",
    "    9, 7, 11, 2, 9, 10, 10, 8, 6, 11, 8, 12, 11, 11, 18, 14, 8, 17, 10, 13,\n",
    "    14, 24, 23, 19, 19, 34, 28, 24, 27, 29, 27, 42, 29, 41, 43, 45, 40, 56,\n",
    "    66, 53, 78, 84, 80, 115, 129, 123, 142, 156, 185, 189, 225, 241, 252, 281,\n",
    "    297, 319, 334, 363, 405, 412, 396, 351, 340, 370, 320, 258, 269, 238, 188,\n",
    "    174, 147, 116, 107, 93, 87, 87, 59, 59, 57, 50, 41, 35, 38, 41, 24, 29,\n",
    "    26, 27, 21, 16, 17, 14, 12, 15, 13, 13, 12, 14, 14, 11, 7, 11, 9, 22, 16,\n",
    "    11, 6, 6, 13, 2, 5, 6, 6, 6, 6, 4, 6, 3, 6, 5\n",
    "])\n",
    "hist_edges = np.linspace(76, 106, len(hist_values) + 1)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Define the observation space with VariableBinning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with additional CMS-style annotations\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.hist(bin_centers, bins=edges, weights=values, alpha=0.6, label=\"Data\", color=\"black\", histtype=\"step\")\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "d96f981b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f96786ce0d0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95c411cc10>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 2.6e-06 │               506.73 |  606.4598 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731672705397                  0.841934       False\n",
      "mu_ID_pass_1731672705396                     90.6831       False\n",
      "sigma_ID_pass_1731672705397                  2.46469       False\n",
      "lambda_bkg_ID_pass_1731672705397          -0.0148381       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Sample histogram values and bin edges\n",
    "hist_values = np.array([\n",
    "    9, 7, 11, 2, 9, 10, 10, 8, 6, 11, 8, 12, 11, 11, 18, 14, 8, 17, 10, 13,\n",
    "    14, 24, 23, 19, 19, 34, 28, 24, 27, 29, 27, 42, 29, 41, 43, 45, 40, 56,\n",
    "    66, 53, 78, 84, 80, 115, 129, 123, 142, 156, 185, 189, 225, 241, 252, 281,\n",
    "    297, 319, 334, 363, 405, 412, 396, 351, 340, 370, 320, 258, 269, 238, 188,\n",
    "    174, 147, 116, 107, 93, 87, 87, 59, 59, 57, 50, 41, 35, 38, 41, 24, 29,\n",
    "    26, 27, 21, 16, 17, 14, 12, 15, 13, 13, 12, 14, 14, 11, 7, 11, 9, 22, 16,\n",
    "    11, 6, 6, 13, 2, 5, 6, 6, 6, 6, 4, 6, 3, 6, 5\n",
    "])\n",
    "\n",
    "# Define the binning and reduce number of bins\n",
    "num_bins_x = 120 #educed number of bins\n",
    "hist_edges = np.linspace(76, 106, num_bins_x + 1)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Define the observation space with VariableBinning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b81b4f71",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/__init__.py:63: UserWarning: TensorFlow warnings are by default suppressed by zfit. In order to show them, set the environment variable ZFIT_DISABLE_TF_WARNINGS=0. In order to suppress the TensorFlow warnings AND this warning, set ZFIT_DISABLE_TF_WARNINGS=1.\n",
      "  warnings.warn(\n",
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/_loss/binnedloss.py:434: AdvancedFeatureWarning: Either you're using an advanced feature OR causing unwanted behavior. To turn this warning off, use `zfit.settings.advanced_warnings['extended_in_BinnedNLL'] = False`  or 'all' (use with care) with `zfit.settings.advanced_warnings['all'] = False\n",
      "Extended PDFs ([<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fb8ec9c2910>]) are given to a normal BinnedNLL.  This won't take the yield into account and simply treat the PDFs as non-extended PDFs. To create an extended NLL, use the `ExtendedBinnedNLL`.\n",
      "  warn_advanced_feature(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fb8ec9c2910>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7fb8ec9c2130>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 9.6e-06 │               490.43 |  560.4858 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1732085299345                  0.855536       False\n",
      "mu_ID_pass_1732085299345                     90.2245       False\n",
      "sigma_ID_pass_1732085299345                  3.50051       False\n",
      "lambda_bkg_ID_pass_1732085299345             -0.0314       False\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/binning.py:154: UserWarning: Flow currently not fully supported. Values outside the edges are all 0.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "3b426309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f96d403e730>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95d4236d30>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 3.3e-08 │               461.34 |  541.0467 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731682473806                  0.864151       False\n",
      "mu_ID_pass_1731682473806                     90.2685       False\n",
      "sigma_ID_pass_1731682473806                  3.53943       False\n",
      "lambda_bkg_ID_pass_1731682473806          -0.0326011       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_EE_hist2;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "d89881f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f9600575760>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f96805611f0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 1.9e-07 │                462.43 |  563.689 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731682498877                  0.855162       False\n",
      "mu_ID_pass_1731682498877                     90.2719       False\n",
      "sigma_ID_pass_1731682498877                  3.51311       False\n",
      "lambda_bkg_ID_pass_1731682498877          -0.0253813       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_EE_hist3;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "d0c14d81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95d47aa430>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f977d363a00>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 3.2e-05 │                485.48 |  704.288 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731682543592                   0.97109       False\n",
      "mu_ID_pass_1731682543592                     89.7519       False\n",
      "sigma_ID_pass_1731682543592                  5.38281       False\n",
      "lambda_bkg_ID_pass_1731682543592           -0.382782       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_EE_hist1;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "5f6bd784",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95c41123d0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95c33a4fa0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═══════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │  edm  │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═══════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 7e-05 │               465.85 |  724.6236 │\n",
      "╘═════════╧═════════════╧══════════════════╧═══════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731682590050                  0.977417       False\n",
      "mu_ID_pass_1731682590050                     89.6705       False\n",
      "sigma_ID_pass_1731682590050                  5.50503       False\n",
      "lambda_bkg_ID_pass_1731682590050           -0.504451       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_EE_hist2;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "adab4091",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95c4d3bf10>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f968853c3a0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00033 │                411.45 |  763.342 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731682689722                  0.960985       False\n",
      "mu_ID_pass_1731682689722                     89.9005       False\n",
      "sigma_ID_pass_1731682689722                  5.38015       False\n",
      "lambda_bkg_ID_pass_1731682689722           -0.415699       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_EE_hist3;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "2cb830bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#EE region \n",
    "ID2_HIST1 = 15310.00\n",
    "ID2_HIST2 = 13647.00\n",
    "ID2_HIST3 = 10841.00\n",
    "\n",
    "ID1_HIST1 = 5178.97\n",
    "ID1_HIST2 = 4388.96\n",
    "ID1_HIST3 = 3245.96\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "8019a9c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff_hist1 0.7472313151905635\n",
      "eff_hist2 0.7566550380462144\n",
      "eff_hist3 0.7695769704748221\n",
      "/////////\n"
     ]
    }
   ],
   "source": [
    "eff_hist1 = ID2_HIST1 /(ID2_HIST1 + ID1_HIST1)\n",
    "eff_hist2 = ID2_HIST2/(ID2_HIST2 + ID1_HIST2)\n",
    "eff_hist3 = ID2_HIST3/(ID2_HIST3 + ID1_HIST3 )\n",
    "\n",
    "print(\"eff_hist1\",eff_hist1)\n",
    "print(\"eff_hist2\",eff_hist2)\n",
    "print(\"eff_hist3\",eff_hist3)\n",
    "print(\"/////////\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "2cbf44f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f96800f9910>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f9553eb39d0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 0.00046 │               458.17 |  559.9269 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696569834                  0.869722       False\n",
      "mu_ID_pass_1731696569834                      90.475       False\n",
      "sigma_ID_pass_1731696569834                  3.17108       False\n",
      "lambda_bkg_ID_pass_1731696569834        -4.68292e-06        True\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_BE_hist4;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "624c1128",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95c35e81f0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95c3d5cc70>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 1.3e-07 │               447.49 |  560.9149 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696527823                  0.870193       False\n",
      "mu_ID_pass_1731696527823                       90.49       False\n",
      "sigma_ID_pass_1731696527823                  3.07069       False\n",
      "lambda_bkg_ID_pass_1731696527823        -0.000178697       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_BE_hist5;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "b2f46c21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f9551d381f0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95546683d0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═══════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │  edm  │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═══════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 2e-07 │               445.80 |  569.3333 │\n",
      "╘═════════╧═════════════╧══════════════════╧═══════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696448084                  0.851074       False\n",
      "mu_ID_pass_1731696448084                     90.5627       False\n",
      "sigma_ID_pass_1731696448084                  2.95545       False\n",
      "lambda_bkg_ID_pass_1731696448084        -7.91154e-08        True\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_BE_hist6;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "cd57b333",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f9554678a60>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f9554678610>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 1.9e-06 │               416.63 |  551.2067 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696367611                  0.860359       False\n",
      "mu_ID_pass_1731696367611                     90.5053       False\n",
      "sigma_ID_pass_1731696367611                  3.03613       False\n",
      "lambda_bkg_ID_pass_1731696367611        -9.67611e-09        True\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_BE_hist7;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "3e064670",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95559669a0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f955625b430>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00015 │               354.26 |  615.5991 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696298487                  0.869965       False\n",
      "mu_ID_pass_1731696298487                     90.5163       False\n",
      "sigma_ID_pass_1731696298487                  3.13409       False\n",
      "lambda_bkg_ID_pass_1731696298487         -0.00567796       False\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/binning.py:154: UserWarning: Flow currently not fully supported. Values outside the edges are all 0.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_2idpass_BE_hist8;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "bb0c6c37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f9551ccdfa0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95510f17c0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00033 │               357.66 |  734.9297 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696995645                  0.774674       False\n",
      "mu_ID_pass_1731696995645                     90.1225       False\n",
      "sigma_ID_pass_1731696995645                  3.57318       False\n",
      "lambda_bkg_ID_pass_1731696995645          -0.0122792       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BE_hist4;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "9dbd5853",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95c36ad130>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95511cb0a0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 3.8e-06 │               331.13 |  792.2976 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696915182                  0.765907       False\n",
      "mu_ID_pass_1731696915182                     90.2559       False\n",
      "sigma_ID_pass_1731696915182                  3.53732       False\n",
      "lambda_bkg_ID_pass_1731696915182          -0.0151674       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BE_hist5;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "530257f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95c36ad2b0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f9551d38fd0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00016 │                 329.68 |  806.42 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696817758                  0.718425       False\n",
      "mu_ID_pass_1731696817758                     90.2609       False\n",
      "sigma_ID_pass_1731696817758                  3.18246       False\n",
      "lambda_bkg_ID_pass_1731696817758          -0.0119922       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BE_hist6;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "7501879d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f9554668790>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95546466a0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 7.2e-06 │                326.56 |  868.435 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696740477                  0.779758       False\n",
      "mu_ID_pass_1731696740477                      90.192       False\n",
      "sigma_ID_pass_1731696740477                  3.66482       False\n",
      "lambda_bkg_ID_pass_1731696740477          -0.0248089       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BE_hist7;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "49a0b130",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f955115eee0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f95d4548760>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 1.8e-05 │               278.81 |  1372.368 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731696784764                  0.752468       False\n",
      "mu_ID_pass_1731696784764                     90.0185       False\n",
      "sigma_ID_pass_1731696784764                   3.3159       False\n",
      "lambda_bkg_ID_pass_1731696784764          -0.0172124       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BE_hist8;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 93, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "f0f18b47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#BE region\n",
    "\n",
    "ID2_HIST4 = 10335.00\n",
    "ID2_HIST5 = 9259.00\n",
    "ID2_HIST6 = 8514.00\n",
    "ID2_HIST7 = 7925.00\n",
    "ID2_HIST8 = 4278.00\n",
    "\n",
    "\n",
    "ID1_HIST4 = 3037.00\n",
    "ID1_HIST5 = 2492.00\n",
    "ID1_HIST6 = 2406.00\n",
    "ID1_HIST7 = 2130.00\n",
    "ID1_HIST8 = 1061.00\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "c240b74c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff_hist4 0.772883637451391\n",
      "eff_hist5 0.787932941877287\n",
      "eff_hist6 0.7796703296703297\n",
      "eff_hist7 0.7881650919940328\n",
      "eff_hist8 0.8012736467503278\n",
      "/////////\n"
     ]
    }
   ],
   "source": [
    "eff_hist4 = ID2_HIST4 /(ID2_HIST4 + ID1_HIST4)\n",
    "eff_hist5 = ID2_HIST5/(ID2_HIST5 + ID1_HIST5)\n",
    "eff_hist6 = ID2_HIST6/(ID2_HIST6 + ID1_HIST6 )\n",
    "eff_hist7 = ID2_HIST7/(ID2_HIST7 + ID1_HIST7 )\n",
    "eff_hist8 = ID2_HIST8/(ID2_HIST8 + ID1_HIST8 )\n",
    "\n",
    "\n",
    "print(\"eff_hist4\",eff_hist4)\n",
    "print(\"eff_hist5\",eff_hist5)\n",
    "print(\"eff_hist6\",eff_hist6)\n",
    "print(\"eff_hist7\",eff_hist7)\n",
    "print(\"eff_hist8\",eff_hist8)\n",
    "\n",
    "print(\"/////////\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "d19233da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95d45bac10>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f96887f8e50>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 4.5e-07 │               332.47 |  871.7586 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731698182415                  0.746305       False\n",
      "mu_ID_pass_1731698182415                     90.3915       False\n",
      "sigma_ID_pass_1731698182415                  2.90899       False\n",
      "lambda_bkg_ID_pass_1731698182415          -0.0409212       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BB_hist9;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "0cfe5431",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7f95c41bf910>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7f96805a20d0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  True   │    True     │      False       │ 0.00032 │               317.53 |  927.3941 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731698218765                  0.757529       False\n",
      "mu_ID_pass_1731698218765                     90.5176       False\n",
      "sigma_ID_pass_1731698218765                  3.00059       False\n",
      "lambda_bkg_ID_pass_1731698218765          -0.0329342       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "-+AZimport zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    # Replace 'your_histogram_name' with the actual histogram name from the ROOT file\n",
    "    hist = file[\"h_mass_1idpass_BB_hist10;1\"]\n",
    "\n",
    "    # Extract histogram values and edges (assuming 'your_histogram_name' is a TH1D object)\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning (you can modify the edges if necessary)\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Define Gaussian models for signal and exponential models for background\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Loop over categories and fit only once per category\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    mu_name = generate_unique_name(f\"mu_{category}\")\n",
    "    sigma_name = generate_unique_name(f\"sigma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    mu = zfit.Parameter(mu_name, 90, 80, 100)\n",
    "    sigma = zfit.Parameter(sigma_name, 5, 1, 10)\n",
    "    signal_model = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    # Main plot (top)\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    # Variables for calculating chi-squared\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 2  # Adjust this based on your model (signal + background, for example)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        # Calculate bin centers\n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        # Model prediction at bin centers\n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Check if model has components (e.g., signal + background in a sum model)\n",
    "        if hasattr(model, 'models'):\n",
    "            # Handle models that are sums of components (e.g., signal + background)\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)  # No background component if only signal\n",
    "        else:\n",
    "            # If model doesn't have multiple components, apply signal_fraction manually\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        # Calculate the total yields (integrals over the entire histogram)\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        \n",
    "        # Estimate errors using Poisson statistics (sqrt of counts)\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        # Plot components\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)  # Plot data with error bars\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        # Pull plot (bottom) using scatter to plot dots\n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')  # marker='o' for dots\n",
    "\n",
    "        # Chi-squared calculation for the fit\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal and background yields with errors\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    # Calculate chi-squared per degree of freedom (DOF)\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "\n",
    "    # Add Chi-squared per DOF to the plot\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    # Add some layout improvements\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with your existing data and model information\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a01672e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fd07f695ee0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7fd07f69bb50>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═══════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │  edm  │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═══════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 2e-06 │               641.61 |  693.7282 │\n",
      "╘═════════╧═════════════╧══════════════════╧═══════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731740671034                         1        True\n",
      "M_ID_pass_1731740671034                      90.2367       False\n",
      "Gamma_ID_pass_1731740671034                   6.1055       False\n",
      "lambda_bkg_ID_pass_1731740671034           -0.476168       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Define the Breit-Wigner function\n",
    "class BreitWignerPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['M', 'Gamma']\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        M = self.params['M']  # Resonance mass\n",
    "        Gamma = self.params['Gamma']  # Width\n",
    "        x = zfit.z.unstack_x(x)  # Extract the independent variable\n",
    "        numerator = Gamma / 2\n",
    "        denominator = (x - M)**2 + (Gamma / 2)**2\n",
    "        return numerator / denominator\n",
    "\n",
    "# Define models for each category\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    M_name = generate_unique_name(f\"M_{category}\")\n",
    "    Gamma_name = generate_unique_name(f\"Gamma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    M = zfit.Parameter(M_name, 90, 80, 100)  # Mean resonance mass\n",
    "    Gamma = zfit.Parameter(Gamma_name, 2.5, 0.1, 10)  # Width\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)  # Exponential slope\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        if hasattr(model, 'models'):\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)\n",
    "        else:\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9d88c047",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fd0a96e7e80>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7fd07f751b80>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═══════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │  edm  │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═══════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 2e-06 │               641.61 |  693.7282 │\n",
      "╘═════════╧═════════════╧══════════════════╧═══════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731740942869                         1        True\n",
      "M_ID_pass_1731740942869                      90.2367       False\n",
      "Gamma_ID_pass_1731740942869                   6.1055       False\n",
      "lambda_bkg_ID_pass_1731740942869           -0.476168       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Define the Breit-Wigner function\n",
    "class BreitWignerPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['M', 'Gamma']\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        M = self.params['M']  # Resonance mass\n",
    "        Gamma = self.params['Gamma']  # Width\n",
    "        x = zfit.z.unstack_x(x)  # Extract the independent variable\n",
    "        numerator = Gamma / 2\n",
    "        denominator = (x - M)**2 + (Gamma / 2)**2\n",
    "        return numerator / denominator\n",
    "\n",
    "# Define models for each category\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    M_name = generate_unique_name(f\"M_{category}\")\n",
    "    Gamma_name = generate_unique_name(f\"Gamma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names\n",
    "    M = zfit.Parameter(M_name, 90, 80, 100)  # Mean resonance mass\n",
    "    Gamma = zfit.Parameter(Gamma_name, 2.5, 0.1, 10)  # Width\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1, 0)  # Exponential slope\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0, 1)\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 3  # Number of free parameters (e.g., M, Gamma, lambda)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        if hasattr(model, 'models'):\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)\n",
    "        else:\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        N_sig = np.sum(signal_component)  # Signal yield\n",
    "        N_bkg = np.sum(background_component)  # Background yield\n",
    "        N_sig_error = np.sqrt(N_sig)\n",
    "        N_bkg_error = np.sqrt(N_bkg)\n",
    "\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=\"Data\", color=\"black\", zorder=5)\n",
    "        main_ax.plot(bin_centers, y_total, label=\"Total Model\", color=\"blue\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=\"Signal Component\", color=\"green\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=\"Background Component\", color=\"red\", linestyle=\"--\")\n",
    "        \n",
    "        pull = (values - y_total) / errors\n",
    "        pull_ax.scatter(bin_centers, pull, label=category, marker='o')\n",
    "\n",
    "        chi_squared += np.sum(((values - y_total) ** 2) / (errors ** 2))\n",
    "        n_bins += len(values)\n",
    "\n",
    "        main_ax.annotate(f\"N_sig = {N_sig:.2f} ± {N_sig_error:.2f}\", \n",
    "                         xy=(0.05, 0.85), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"green\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "        main_ax.annotate(f\"N_bkg = {N_bkg:.2f} ± {N_bkg_error:.2f}\", \n",
    "                         xy=(0.05, 0.75), xycoords=\"axes fraction\", \n",
    "                         fontsize=12, color=\"red\", \n",
    "                         horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    dof = n_bins - n_parameters\n",
    "    chi_squared_per_dof = chi_squared / dof if dof != 0 else np.nan\n",
    "    main_ax.annotate(f\"Chi²/DOF = {chi_squared_per_dof:.2f}\", \n",
    "                     xy=(0.05, 0.65), xycoords=\"axes fraction\", \n",
    "                     fontsize=12, color=\"black\", \n",
    "                     horizontalalignment=\"left\", verticalalignment=\"top\")\n",
    "\n",
    "    main_ax.legend()\n",
    "    pull_ax.legend()\n",
    "    main_ax.set_xlabel(\"Observable\")\n",
    "    main_ax.set_ylabel(\"Counts\")\n",
    "    main_ax.set_title(\"Fit results\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d732bd99",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fd07c6063a0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7fd07c6066a0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═════════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │   edm   │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═════════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 5.4e-05 │               641.61 |  693.7282 │\n",
      "╘═════════╧═════════════╧══════════════════╧═════════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731744515413                         1        True\n",
      "M_ID_pass_1731744515413                      90.2364       False\n",
      "Gamma_ID_pass_1731744515413                  6.10592       False\n",
      "alpha_ID_pass_1731744515413                  1.04069       False\n",
      "lambda_bkg_ID_pass_1731744515413          -0.0425331       False\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_105a_swan/x86_64-el9-gcc13-opt/lib/python3.9/site-packages/zfit/core/binning.py:154: UserWarning: Flow currently not fully supported. Values outside the edges are all 0.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "58cc8452",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fd0a8e00340>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7fd080793cd0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═══════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │  edm  │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═══════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 2e-06 │               641.61 |  693.7282 │\n",
      "╘═════════╧═════════════╧══════════════════╧═══════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731744982954                         1        True\n",
      "M_ID_pass_1731744982954                      90.2367       False\n",
      "Gamma_ID_pass_1731744982954                   6.1055       False\n",
      "lambda_bkg_ID_pass_1731744982954           -0.476168       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Define the Breit-Wigner function (keep numeric values consistent)\n",
    "class BreitWignerPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['M', 'Gamma']\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        M = self.params['M']  # Resonance mass\n",
    "        Gamma = self.params['Gamma']  # Width\n",
    "        x = zfit.z.unstack_x(x)  # Extract the independent variable\n",
    "        numerator = Gamma / 2\n",
    "        denominator = (x - M)**2 + (Gamma / 2)**2\n",
    "        return numerator / denominator\n",
    "\n",
    "# Define the Gaussian kernel PDF (ensure numeric parameters)\n",
    "class GaussianPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['mu', 'sigma']  # Define the parameters for the Gaussian PDF\n",
    "\n",
    "    def __init__(self, mu, sigma, obs):\n",
    "        self.mu = mu\n",
    "        self.sigma = sigma\n",
    "        self.obs = obs\n",
    "        super().__init__(obs=obs)  # Call the parent constructor\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        return np.exp(-(x - self.mu)**2 / (2 * self.sigma**2))\n",
    "\n",
    "# Define models for each category\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    M_name = generate_unique_name(f\"M_{category}\")\n",
    "    Gamma_name = generate_unique_name(f\"Gamma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names (ensure these are floats, not strings)\n",
    "    M = zfit.Parameter(M_name, 90.0, 80.0, 100.0)  # Mean resonance mass (ensure it's a float)\n",
    "    Gamma = zfit.Parameter(Gamma_name, 2.5, 0.1, 10.0)  # Width (ensure it's a float)\n",
    "    \n",
    "    # Signal model\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "    # Background model (exponential)\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1.0, 0.0)  # Exponential slope (ensure float)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    # Fraction parameter for signal\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0.0, 1.0)  # Fraction between 0 and 1\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0.0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 3  # Number of free parameters (e.g., M, Gamma, lambda)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        if hasattr(model, 'models'):\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)\n",
    "        else:\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        N_sig = np.sum(signal_component)  # Total signal in the bin\n",
    "        N_bkg = np.sum(background_component)  # Total background in the bin\n",
    "        total = N_sig + N_bkg  # Total in the bin\n",
    "\n",
    "        residual = (values - total) / errors\n",
    "        pull_ax.errorbar(bin_centers, residual, yerr=errors, fmt='o', color=\"red\", markersize=6, label=f\"Category {category}\")\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=f\"Data ({category})\")\n",
    "        main_ax.plot(bin_centers, y_total, label=f\"Total fit ({category})\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=f\"Signal fit ({category})\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=f\"Background fit ({category})\", linestyle=\"--\")\n",
    "\n",
    "    pull_ax.set_xlabel(\"Observable\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "    main_ax.set_ylabel(\"Events\")\n",
    "    main_ax.set_xlabel(\"Mass\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Example: Plot the fit results for the category \"ID_pass\"\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "77aa15db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results for ID_pass:\n",
      "FitResult of\n",
      "<BinnedNLL model=[<zfit.models.tobinned.BinnedFromUnbinnedPDF object at 0x7fd0a81f3ac0>] data=[<zfit._data.binneddatav1.BinnedData object at 0x7fd1e42b40d0>] constraints=[]> \n",
      "with\n",
      "<Minuit Minuit tol=0.001>\n",
      "\n",
      "╒═════════╤═════════════╤══════════════════╤═══════╤══════════════════════════════════╕\n",
      "│  valid  │  converged  │  param at limit  │  edm  │   approx. fmin (full | internal) │\n",
      "╞═════════╪═════════════╪══════════════════╪═══════╪══════════════════════════════════╡\n",
      "│  False  │    True     │       True       │ 2e-06 │               641.61 |  693.7282 │\n",
      "╘═════════╧═════════════╧══════════════════╧═══════╧══════════════════════════════════╛\n",
      "\n",
      "Parameters\n",
      "name                                value  (rounded)    at limit\n",
      "--------------------------------  ------------------  ----------\n",
      "frac_ID_pass_1731745101930                         1        True\n",
      "M_ID_pass_1731745101930                      90.2367       False\n",
      "Gamma_ID_pass_1731745101930                   6.1055       False\n",
      "lambda_bkg_ID_pass_1731745101930           -0.476168       False\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import zfit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import uproot\n",
    "import time  # To add a timestamp for uniqueness\n",
    "\n",
    "# Define ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Define the number of bins (if you want to reduce the number of bins, adjust this)\n",
    "num_bins_x = 120  # Reduced number of bins\n",
    "\n",
    "# Adjust binning\n",
    "binning = zfit.binned.VariableBinning(hist_edges, name=\"x\")  # 'x' to match the observable's name\n",
    "obs = zfit.Space(\"x\", limits=(hist_edges[0], hist_edges[-1]), binning=binning)\n",
    "\n",
    "# Define categories and signal fractions\n",
    "signal_fraction = {\n",
    "    \"ID_pass\": 0.98\n",
    "}\n",
    "categories = [\"ID_pass\"]\n",
    "\n",
    "# Create BinnedData objects for each category\n",
    "data_dict = {\n",
    "    category: zfit.data.BinnedData.from_tensor(space=obs, values=hist_values)\n",
    "    for category in categories\n",
    "}\n",
    "\n",
    "# Global set to track used parameter names to avoid conflicts\n",
    "used_names = set()\n",
    "\n",
    "# Function to generate a unique parameter name using timestamp\n",
    "def generate_unique_name(base_name):\n",
    "    timestamp = int(time.time() * 1000)  # Get current time in milliseconds\n",
    "    unique_name = f\"{base_name}_{timestamp}\"\n",
    "    while unique_name in used_names:\n",
    "        timestamp += 1  # Increment timestamp until we find a unique one\n",
    "        unique_name = f\"{base_name}_{timestamp}\"\n",
    "    used_names.add(unique_name)\n",
    "    return unique_name\n",
    "\n",
    "# Define the Breit-Wigner function (keep numeric values consistent)\n",
    "class BreitWignerPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['M', 'Gamma']\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        M = self.params['M']  # Resonance mass\n",
    "        Gamma = self.params['Gamma']  # Width\n",
    "        x = zfit.z.unstack_x(x)  # Extract the independent variable\n",
    "        numerator = Gamma / 2\n",
    "        denominator = (x - M)**2 + (Gamma / 2)**2\n",
    "        return numerator / denominator\n",
    "\n",
    "# Define the Gaussian kernel PDF (ensure numeric parameters)\n",
    "class GaussianPDF(zfit.pdf.ZPDF):\n",
    "    _PARAMS = ['mu', 'sigma']  # Define the parameters for the Gaussian PDF\n",
    "\n",
    "    def __init__(self, mu, sigma, obs):\n",
    "        self.mu = mu\n",
    "        self.sigma = sigma\n",
    "        self.obs = obs\n",
    "        super().__init__(obs=obs)  # Call the parent constructor\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        return np.exp(-(x - self.mu)**2 / (2 * self.sigma**2))\n",
    "\n",
    "# Define models for each category\n",
    "models = {}\n",
    "results = {}\n",
    "\n",
    "for category in categories:\n",
    "    # Generate unique names for the parameters\n",
    "    M_name = generate_unique_name(f\"M_{category}\")\n",
    "    Gamma_name = generate_unique_name(f\"Gamma_{category}\")\n",
    "    lambda_bkg_name = generate_unique_name(f\"lambda_bkg_{category}\")\n",
    "    frac_name = generate_unique_name(f\"frac_{category}\")\n",
    "    yield_name = generate_unique_name(f\"yield_{category}\")\n",
    "    \n",
    "    # Create parameters with unique names (ensure these are floats, not strings)\n",
    "    M = zfit.Parameter(M_name, 90.0, 80.0, 100.0)  # Mean resonance mass (ensure it's a float)\n",
    "    Gamma = zfit.Parameter(Gamma_name, 2.5, 0.1, 10.0)  # Width (ensure it's a float)\n",
    "    \n",
    "    # Signal model\n",
    "    signal_model = BreitWignerPDF(obs=obs, M=M, Gamma=Gamma)\n",
    "\n",
    "    # Background model (exponential)\n",
    "    lambda_bkg = zfit.Parameter(lambda_bkg_name, -0.1, -1.0, 0.0)  # Exponential slope (ensure float)\n",
    "    background_model = zfit.pdf.Exponential(lambda_=lambda_bkg, obs=obs)\n",
    "\n",
    "    # Fraction parameter for signal\n",
    "    frac_param = zfit.Parameter(frac_name, signal_fraction[category], 0.0, 1.0)  # Fraction between 0 and 1\n",
    "    unbinned_model = zfit.pdf.SumPDF([signal_model, background_model], fracs=frac_param)\n",
    "\n",
    "    # Define the yield (total number of events) for the extended PDF\n",
    "    yield_param = zfit.Parameter(yield_name, np.sum(hist_values), 0.0, np.inf)\n",
    "    binned_model = zfit.pdf.BinnedFromUnbinnedPDF(unbinned_model, obs, extended=yield_param)\n",
    "\n",
    "    # Store the model\n",
    "    models[category] = binned_model\n",
    "\n",
    "    # Fit the model\n",
    "    data = data_dict[category]\n",
    "    nll = zfit.loss.BinnedNLL(model=binned_model, data=data)\n",
    "    minimizer = zfit.minimize.Minuit()\n",
    "    result = minimizer.minimize(nll)\n",
    "    results[category] = result\n",
    "\n",
    "    print(f\"Fit results for {category}:\")\n",
    "    print(result)\n",
    "\n",
    "# Plotting the fit results with data points (scatter plot) and error bars\n",
    "def plot_fit_with_pull(models, data_dict, edges, categories, results):\n",
    "    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "\n",
    "    main_ax = axes[0]\n",
    "    pull_ax = axes[1]\n",
    "    pull_ax.axhline(0, color=\"gray\", linestyle=\"--\")\n",
    "\n",
    "    chi_squared = 0\n",
    "    n_bins = 0\n",
    "    n_parameters = 3  # Number of free parameters (e.g., M, Gamma, lambda)\n",
    "\n",
    "    for category in categories:\n",
    "        model = models[category]\n",
    "        data = data_dict[category]\n",
    "        \n",
    "        bin_centers = (edges[:-1] + edges[1:]) / 2\n",
    "        values = data.values()\n",
    "        errors = np.sqrt(values)  # Poisson errors\n",
    "        \n",
    "        y_total = model.pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        if hasattr(model, 'models'):\n",
    "            if len(model.models) > 1:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = model.models[1].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "            else:\n",
    "                signal_component = model.models[0].pdf(bin_centers).numpy() * np.sum(values) * (edges[1] - edges[0])\n",
    "                background_component = np.zeros_like(signal_component)\n",
    "        else:\n",
    "            signal_component = model.pdf(bin_centers).numpy() * signal_fraction[category] * np.sum(values) * (edges[1] - edges[0])\n",
    "            background_component = model.pdf(bin_centers).numpy() * (1 - signal_fraction[category]) * np.sum(values) * (edges[1] - edges[0])\n",
    "\n",
    "        N_sig = np.sum(signal_component)  # Total signal in the bin\n",
    "        N_bkg = np.sum(background_component)  # Total background in the bin\n",
    "        total = N_sig + N_bkg  # Total in the bin\n",
    "\n",
    "        residual = (values - total) / errors\n",
    "        pull_ax.errorbar(bin_centers, residual, yerr=errors, fmt='o', color=\"red\", markersize=6, label=f\"Category {category}\")\n",
    "        main_ax.errorbar(bin_centers, values, yerr=errors, fmt='o', label=f\"Data ({category})\")\n",
    "        main_ax.plot(bin_centers, y_total, label=f\"Total fit ({category})\")\n",
    "        main_ax.plot(bin_centers, signal_component, label=f\"Signal fit ({category})\", linestyle=\"--\")\n",
    "        main_ax.plot(bin_centers, background_component, label=f\"Background fit ({category})\", linestyle=\"--\")\n",
    "\n",
    "        # Calculate chi-squared\n",
    "        chi_squared += np.sum(((values - total) ** 2) / errors ** 2)\n",
    "        n_bins += len(values)\n",
    "\n",
    "        # Add annotations for signal, background, and chi²/DOF\n",
    "        dof = n_bins - n_parameters\n",
    "        chi2_dof = chi_squared / dof\n",
    "        main_ax.text(0.05, 0.9, f\"N_signal: {N_sig:.2f}\\nN_bkg: {N_bkg:.2f}\\nχ²/DOF: {chi2_dof:.2f}\",\n",
    "                     transform=main_ax.transAxes, fontsize=12, verticalalignment='top', color='black')\n",
    "\n",
    "    pull_ax.set_xlabel(\"Observable\")\n",
    "    pull_ax.set_ylabel(\"Pull\")\n",
    "    main_ax.set_ylabel(\"Events\")\n",
    "    main_ax.set_xlabel(\"Mass\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Example: Plot the fit results for the category \"ID_pass\"\n",
    "plot_fit_with_pull(models, data_dict, hist_edges, categories, results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f42347f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "0c265759",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import zfit\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the ROOT file path\n",
    "root_file_path = \"mass_regionEE.root\"\n",
    "\n",
    "# Open the ROOT file and extract the histogram\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2idpass_EE_hist1;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()  # Extract values and edges\n",
    "\n",
    "# Now, hist_values are your y-values (histogram counts), and hist_edges are the x-values (bin edges).\n",
    "# You can use hist_edges to define the x-axis values.\n",
    "\n",
    "# Convert hist_edges to center of bins for x_vals\n",
    "x_vals = (hist_edges[:-1] + hist_edges[1:]) / 2  # Take the average of the bin edges to get the center\n",
    "\n",
    "# Define the observable variable for the PDF\n",
    "x = zfit.Space(\"x\", limits=(70, 110))  # Example range for the mass\n",
    "\n",
    "# Create a zfit Data object for the x values\n",
    "x_vals_data = zfit.Data.from_numpy(array=x_vals, obs=x)  # Pass both the data array and observable\n",
    "\n",
    "# Define the Breit-Wigner function as a custom zfit PDF\n",
    "class BreitWigner(zfit.pdf.BasePDF):\n",
    "    def __init__(self, mass, width, name=\"BreitWigner\", obs=None):\n",
    "        super().__init__(obs=obs, name=name)\n",
    "        self.mass = mass  # Peak mass (mean of Breit-Wigner)\n",
    "        self.width = width  # Width of the Breit-Wigner (Gamma)\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        \"\"\" Return the unnormalized Breit-Wigner function \"\"\"\n",
    "        x_val = x.value()  # Extract the values from the zfit.Data object\n",
    "        return 1 / (np.pi * self.width * (1 + ((x_val - self.mass) / self.width) ** 2))\n",
    "\n",
    "    def _pdf(self, x, norm=True):\n",
    "        \"\"\" Implement the PDF function correctly for zfit with norm handling \"\"\"\n",
    "        unnorm_pdf = self._unnormalized_pdf(x)\n",
    "\n",
    "        if norm:\n",
    "            # Optional: Return the normalized PDF (for now, assume it's already normalized)\n",
    "            return unnorm_pdf\n",
    "        else:\n",
    "            return unnorm_pdf\n",
    "\n",
    "# Define the mass and width for the Breit-Wigner distribution\n",
    "mu = 91.1876  # Mass of the Z boson in GeV\n",
    "sigma = 2.495  # Width of the Z boson in GeV\n",
    "\n",
    "# Create the signal model (Breit-Wigner)\n",
    "signal_model = BreitWigner(mass=mu, width=sigma, obs=x, name=\"SignalModel\")\n",
    "\n",
    "# Define a safe PDF evaluation function with checks for NaN or Inf\n",
    "def safe_pdf_eval(pdf, x_vals_data):\n",
    "    \"\"\" Safely evaluate the PDF with checks for NaN or Inf \"\"\"\n",
    "    result = pdf.pdf(x_vals_data)\n",
    "\n",
    "    if np.any(np.isnan(result)) or np.any(np.isinf(result)):\n",
    "        raise ValueError(f\"NaN or Inf encountered in the PDF evaluation for x_vals={x_vals_data}\")\n",
    "\n",
    "    return result\n",
    "\n",
    "# Evaluate the signal model using safe_pdf_eval\n",
    "signal_model_vals = safe_pdf_eval(signal_model, x_vals_data)\n",
    "\n",
    "# Now you can plot the results or use them for further analysis\n",
    "plt.plot(x_vals, signal_model_vals, label=\"Breit-Wigner Model\")\n",
    "plt.xlabel(\"Mass (GeV)\")\n",
    "plt.ylabel(\"PDF Value\")\n",
    "plt.title(\"Breit-Wigner PDF\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# If needed, you can also define a convolution kernel or perform any other operations\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "99df2302",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'zfit.models' has no attribute 'Gaussian'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_440/2241724170.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;31m# Use a Gaussian model for convolution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m \u001b[0mgaussian_kernel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGaussian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmu\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0mgaussian_vals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msafe_pdf_eval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgaussian_kernel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_vals_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'zfit.models' has no attribute 'Gaussian'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import zfit\n",
    "\n",
    "# Define your signal model class\n",
    "class BreitWignerSignal(zfit.pdf.BasePDF):\n",
    "    def __init__(self, M, Gamma, obs):\n",
    "        # Pass the observables to the parent class\n",
    "        super().__init__(obs=obs)\n",
    "        \n",
    "        # Set the mass (M) and width (Gamma)\n",
    "        self.M = M  # Mass\n",
    "        self.Gamma = Gamma  # Width\n",
    "\n",
    "    def _unnormalized_pdf(self, x):\n",
    "        # Ensure x is cast to float32\n",
    "        x_val = tf.cast(x.value(), dtype=tf.float32)  # Casting x to float32\n",
    "        \n",
    "        # Ensure Gamma is not too small to prevent instability\n",
    "        Gamma_safe = np.maximum(self.Gamma, 1e-10)\n",
    "\n",
    "        # Explicitly cast np.pi to float32\n",
    "        pi = tf.constant(np.pi, dtype=tf.float32)\n",
    "        \n",
    "        # Calculate the Breit-Wigner function\n",
    "        return 1 / (pi * Gamma_safe * (1 + ((x_val - self.M) / Gamma_safe) ** 2))\n",
    "\n",
    "    def _pdf(self, x, norm=True):\n",
    "        \"\"\" Implement the PDF function correctly for zfit with norm handling \"\"\"\n",
    "        unnorm_pdf = self._unnormalized_pdf(x)\n",
    "        if norm:\n",
    "            return unnorm_pdf\n",
    "        return unnorm_pdf  # In this case, not normalizing the pdf\n",
    "\n",
    "# Set up observables\n",
    "x_vals_data = np.linspace(76, 106, 100).reshape(-1, 1)  # x values for the convolution\n",
    "obs = zfit.Space(\"x\", limits=(70, 110))  # Observables with limits\n",
    "\n",
    "# Create a signal model with parameters\n",
    "M_value = 90.0\n",
    "Gamma_value = 2.5\n",
    "signal_model = BreitWignerSignal(M=M_value, Gamma=Gamma_value, obs=obs)\n",
    "\n",
    "# Function to safely evaluate the PDF and handle NaN or Inf\n",
    "def safe_pdf_eval(pdf, x_vals_data):\n",
    "    \"\"\" Safely evaluate the PDF with checks for NaN or Inf \"\"\"\n",
    "    result = pdf.pdf(x_vals_data)\n",
    "    if np.any(np.isnan(result)) or np.any(np.isinf(result)):\n",
    "        print(\"Error: NaN or Inf detected in the PDF evaluation!\")\n",
    "        return np.nan * np.ones_like(result)\n",
    "    return result\n",
    "\n",
    "# Evaluate the signal model\n",
    "signal_model_vals = safe_pdf_eval(signal_model, x_vals_data)\n",
    "\n",
    "# Use a Gaussian model for convolution\n",
    "gaussian_kernel = zfit.models.Gaussian(mu=0, sigma=1, obs=obs)\n",
    "gaussian_vals = safe_pdf_eval(gaussian_kernel, x_vals_data)\n",
    "\n",
    "# Convolve the signal with the Gaussian kernel\n",
    "convolution_result = signal_model_vals * gaussian_vals  # This is a basic point-wise multiplication\n",
    "\n",
    "# Plot the convolution result\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(x_vals_data, convolution_result, label='Signal Convolution', color='blue')\n",
    "plt.xlabel('x values')\n",
    "plt.ylabel('Signal Convolution')\n",
    "plt.title('Signal Convolution')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6ce01ee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_441/2252889241.py:34: RuntimeWarning: overflow encountered in exp\n",
      "  background = amplitude_background * np.exp(-lambda_background * x)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitted Parameters for h_mass_2idpass_BB_hist9;1:\n",
      "  Mean = 90.67, Sigma = 2.52\n",
      "  Signal Count = 1744.3, Background Count = 221.6\n",
      "  Lambda (Background decay) = 0.02\n",
      "  Chi²/DOF = 3.20\n",
      "\n",
      "Fitted Parameters for h_mass_2idpass_BB_hist10;1:\n",
      "  Mean = 90.70, Sigma = 2.37\n",
      "  Signal Count = 1504.8, Background Count = 234.7\n",
      "  Lambda (Background decay) = 0.01\n",
      "  Chi²/DOF = 2.44\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "# Step 1: Load the histogram data for multiple categories\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Categories and corresponding histograms\n",
    "categories = [\"h_mass_2idpass_BB_hist9;1\", \"h_mass_2idpass_BB_hist10;1\"]\n",
    "histograms = {}\n",
    "\n",
    "# Load histograms for each category\n",
    "with uproot.open(root_file_path) as root_file:\n",
    "    for category in categories:\n",
    "        hist = root_file[category]\n",
    "        hist_values, hist_edges = hist.to_numpy()\n",
    "        histograms[category] = (hist_values, hist_edges)\n",
    "\n",
    "# Define bin centers\n",
    "bin_centers = {category: (edges[:-1] + edges[1:]) / 2 for category, (values, edges) in histograms.items()}\n",
    "\n",
    "# Signal fraction for each category\n",
    "signal_fraction = {\n",
    "    \"h_mass_2idpass_BB_hist9;1\": 0.98,\n",
    "    \"h_mass_2idpass_BB_hist10;1\": 0.98\n",
    "}\n",
    "\n",
    "# Model function: Gaussian signal + Exponential background\n",
    "def model(x, mean, sigma, amplitude_signal, amplitude_background, lambda_background):\n",
    "    # Gaussian signal\n",
    "    gaussian = amplitude_signal * np.exp(-(x - mean)**2 / (2 * sigma**2))\n",
    "    # Exponential background\n",
    "    background = amplitude_background * np.exp(-lambda_background * x)\n",
    "    return gaussian + background\n",
    "\n",
    "# Fit each category with its signal fraction\n",
    "fit_results = {}\n",
    "chi_squared_dof = {}\n",
    "\n",
    "for category, (hist_values, hist_edges) in histograms.items():\n",
    "    bin_width = hist_edges[1] - hist_edges[0]  # Assume uniform binning\n",
    "    bin_errors = np.sqrt(hist_values)  # Poisson errors\n",
    "    \n",
    "    # Initial guesses\n",
    "    mean_guess = 91.2\n",
    "    sigma_guess = 2.5\n",
    "    amplitude_signal_guess = np.max(hist_values) * signal_fraction[category]\n",
    "    amplitude_background_guess = np.max(hist_values) * (1 - signal_fraction[category])\n",
    "    lambda_background_guess = 0.1  # An initial guess for the exponential decay constant\n",
    "\n",
    "    initial_params = [mean_guess, sigma_guess, amplitude_signal_guess, amplitude_background_guess, lambda_background_guess]\n",
    "\n",
    "    # Perform the fit\n",
    "    params, cov_matrix = curve_fit(\n",
    "        model,\n",
    "        bin_centers[category],\n",
    "        hist_values,\n",
    "        p0=initial_params,\n",
    "        sigma=bin_errors,\n",
    "        absolute_sigma=True\n",
    "    )\n",
    "\n",
    "    # Compute chi-squared\n",
    "    expected = model(bin_centers[category], *params)\n",
    "    residuals = hist_values - expected\n",
    "    chi_squared = np.sum((residuals / bin_errors) ** 2)\n",
    "    dof = len(hist_values) - len(params)  # Degrees of freedom\n",
    "    chi_squared_per_dof = chi_squared / dof\n",
    "\n",
    "    # Store results\n",
    "    fit_results[category] = params\n",
    "    chi_squared_dof[category] = chi_squared_per_dof\n",
    "\n",
    "# Function to calculate signal and background counts\n",
    "def calculate_counts(fit_params, hist_edges):\n",
    "    mean, sigma, amplitude_signal, amplitude_background, lambda_background = fit_params\n",
    "\n",
    "    # Integrate the signal (Gaussian)\n",
    "    signal_count = amplitude_signal * np.sqrt(2 * np.pi) * sigma\n",
    "\n",
    "    # Integrate the background (Exponential)\n",
    "    x_range = np.linspace(hist_edges[0], hist_edges[-1], 1000)\n",
    "    dx = x_range[1] - x_range[0]\n",
    "    background = amplitude_background * np.exp(-lambda_background * x_range)\n",
    "    background_count = np.sum(background * dx)\n",
    "\n",
    "    return signal_count, background_count\n",
    "\n",
    "# Function to plot signal, background, and total model for each category\n",
    "def plot_comp_model(model, bin_centers, hist_values, hist_edges, fit_params, category_name=\"Model\"):\n",
    "    # Extract parameters\n",
    "    mean, sigma, amplitude_signal, amplitude_background, lambda_background = fit_params\n",
    "    \n",
    "    # Generate x values for smooth plotting of model and components\n",
    "    x_fit = np.linspace(bin_centers[0], bin_centers[-1], 1000)\n",
    "    \n",
    "    # Calculate individual components\n",
    "    signal = amplitude_signal * np.exp(-(x_fit - mean)**2 / (2 * sigma**2))\n",
    "    background = amplitude_background * np.exp(-lambda_background * x_fit)\n",
    "    total_fit = signal + background\n",
    "\n",
    "    # Calculate counts\n",
    "    signal_count, background_count = calculate_counts(fit_params, hist_edges)\n",
    "\n",
    "    # Plot data, fit, and components\n",
    "    plt.hist(bin_centers, bins=len(hist_values), weights=hist_values, histtype='step', label=f\"Data {category_name}\", color=\"black\")\n",
    "    plt.plot(x_fit, total_fit, label=f\"Total Fit: Signal + Background\\n$\\\\chi^2$/DOF = {chi_squared_dof[category_name]:.2f}\", color='red', linewidth=2)\n",
    "    plt.plot(x_fit, signal, label=f\"Signal Component\\nCount: {signal_count:.1f}\", color='blue', linestyle='--')\n",
    "    plt.plot(x_fit, background, label=f\"Background Component\\nCount: {background_count:.1f}\", color='green', linestyle=':')\n",
    "\n",
    "    # Add labels, title, and legend\n",
    "    plt.xlabel(\"Mass (GeV)\")\n",
    "    plt.ylabel(\"Events\")\n",
    "    plt.title(f\"Fit Model for Category: {category_name}\")\n",
    "    plt.legend(loc='upper left', fontsize=10)\n",
    "    plt.show()\n",
    "\n",
    "# Plot each category with components\n",
    "for category in categories:\n",
    "    hist_values, hist_edges = histograms[category]\n",
    "    fit_params = fit_results[category]\n",
    "    plot_comp_model(model, bin_centers[category], hist_values, hist_edges, fit_params, category_name=category)\n",
    "\n",
    "# Print fitted parameters for each category\n",
    "for category, params in fit_results.items():\n",
    "    mean_fit, sigma_fit, amplitude_signal_fit, amplitude_background_fit, lambda_background_fit = params\n",
    "    signal_count, background_count = calculate_counts(params, histograms[category][1])\n",
    "\n",
    "    print(f\"Fitted Parameters for {category}:\")\n",
    "    print(f\"  Mean = {mean_fit:.2f}, Sigma = {sigma_fit:.2f}\")\n",
    "    print(f\"  Signal Count = {signal_count:.1f}, Background Count = {background_count:.1f}\")\n",
    "    print(f\"  Lambda (Background decay) = {lambda_background_fit:.2f}\")\n",
    "    print(f\"  Chi²/DOF = {chi_squared_dof[category]:.2f}\")\n",
    "    print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "861334e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitted Parameters for h_mass_2idpass_BB_hist9;1:\n",
      "  Mean = 90.674 ± 0.032\n",
      "  Sigma = 2.520 ± 0.028\n",
      "  Signal Amplitude = 276.195 ± 4.395\n",
      "  Background Amplitude = 31.980 ± 10.744\n",
      "  Lambda (Background decay) = 0.016 ± 0.004\n",
      "\n",
      "Fitted Parameters for h_mass_2idpass_BB_hist10;1:\n",
      "  Mean = 90.698 ± 0.033\n",
      "  Sigma = 2.369 ± 0.029\n",
      "  Signal Amplitude = 253.390 ± 4.352\n",
      "  Background Amplitude = 21.415 ± 7.047\n",
      "  Lambda (Background decay) = 0.011 ± 0.004\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "# Load the histogram data for multiple categories\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Categories and corresponding histograms\n",
    "categories = [\"h_mass_2idpass_BB_hist9;1\", \"h_mass_2idpass_BB_hist10;1\"]\n",
    "histograms = {}\n",
    "\n",
    "# Load histograms for each category\n",
    "with uproot.open(root_file_path) as root_file:\n",
    "    for category in categories:\n",
    "        hist = root_file[category]\n",
    "        hist_values, hist_edges = hist.to_numpy()\n",
    "        histograms[category] = (hist_values, hist_edges)\n",
    "\n",
    "# Define bin centers and errors\n",
    "bin_centers = {category: (edges[:-1] + edges[1:]) / 2 for category, (values, edges) in histograms.items()}\n",
    "bin_errors = {category: np.sqrt(values) for category, (values, edges) in histograms.items()}\n",
    "\n",
    "# Model function: Gaussian + Exponential background\n",
    "def model(x, mean, sigma, amplitude_signal, amplitude_background, lambda_background):\n",
    "    gaussian = amplitude_signal * np.exp(-(x - mean)**2 / (2 * sigma**2))\n",
    "    background = amplitude_background * np.exp(-lambda_background * x)\n",
    "    return gaussian + background\n",
    "\n",
    "# Fit each category with initial parameter guesses and handle potential issues\n",
    "fit_results = {}\n",
    "\n",
    "for category, (hist_values, hist_edges) in histograms.items():\n",
    "    # Define initial guesses\n",
    "    mean_guess = 91.2\n",
    "    sigma_guess = 2.5\n",
    "    amplitude_signal_guess = np.max(hist_values) * 0.5\n",
    "    amplitude_background_guess = np.max(hist_values) * 0.5\n",
    "    lambda_background_guess = 0.1  # An initial guess for the exponential decay constant\n",
    "\n",
    "    initial_params = [mean_guess, sigma_guess, amplitude_signal_guess, amplitude_background_guess, lambda_background_guess]\n",
    "\n",
    "    # Define bounds for the parameters\n",
    "    lower_bounds = [90, 0.1, 0, 0, 0]  # Lower bounds for parameters\n",
    "    upper_bounds = [92, 5, np.inf, np.inf, np.inf]  # Upper bounds for parameters\n",
    "\n",
    "    try:\n",
    "        # Perform the fit with improved settings\n",
    "        params, cov_matrix = curve_fit(\n",
    "            model,\n",
    "            bin_centers[category],\n",
    "            hist_values,\n",
    "            p0=initial_params,\n",
    "            sigma=bin_errors[category],\n",
    "            absolute_sigma=True,\n",
    "            maxfev=10000,  # Allow more function evaluations\n",
    "            bounds=(lower_bounds, upper_bounds)  # Apply parameter bounds\n",
    "        )\n",
    "        fit_results[category] = (params, cov_matrix)\n",
    "    except RuntimeError as e:\n",
    "        print(f\"Fit did not converge for category {category}: {e}\")\n",
    "        continue\n",
    "\n",
    "# Function to plot signal, background, and total model for each category\n",
    "def plot_comp_model(model, bin_centers, hist_values, bin_errors, fit_params, category_name=\"Model\"):\n",
    "    # Extract parameters\n",
    "    mean, sigma, amplitude_signal, amplitude_background, lambda_background = fit_params\n",
    "    \n",
    "    # Generate x values for smooth plotting of model and components\n",
    "    x_fit = np.linspace(bin_centers[0], bin_centers[-1], 1000)\n",
    "    \n",
    "    # Calculate individual components\n",
    "    signal = amplitude_signal * np.exp(-(x_fit - mean)**2 / (2 * sigma**2))\n",
    "    background = amplitude_background * np.exp(-lambda_background * x_fit)\n",
    "    total_fit = signal + background\n",
    "\n",
    "    # Plot data with error bars\n",
    "    plt.errorbar(bin_centers, hist_values, yerr=bin_errors, fmt='o', label=f\"Data {category_name}\", color=\"black\")\n",
    "    plt.plot(x_fit, total_fit, label=\"Total Fit: Signal + Background\", color='red', linewidth=2)\n",
    "    plt.plot(x_fit, signal, label=\"Signal Component\", color='blue', linestyle='--')\n",
    "    plt.plot(x_fit, background, label=\"Background Component\", color='green', linestyle=':')\n",
    "\n",
    "    # Add labels, title, and legend\n",
    "    plt.xlabel(\"Mass (GeV)\")\n",
    "    plt.ylabel(\"Events\")\n",
    "    plt.title(f\"Fit Model for Category: {category_name}\")\n",
    "    plt.legend(loc='upper left', fontsize=15)\n",
    "    plt.show()\n",
    "\n",
    "# Plot each category with components\n",
    "for category in categories:\n",
    "    hist_values, hist_edges = histograms[category]\n",
    "    bin_error = bin_errors[category]\n",
    "    if category in fit_results:\n",
    "        fit_params, cov_matrix = fit_results[category]\n",
    "        plot_comp_model(model, bin_centers[category], hist_values, bin_error, fit_params, category_name=category)\n",
    "\n",
    "# Print fitted parameters and errors for each category\n",
    "for category, (params, cov_matrix) in fit_results.items():\n",
    "    mean_fit, sigma_fit, amplitude_signal_fit, amplitude_background_fit, lambda_background_fit = params\n",
    "    # Calculate parameter errors from covariance matrix\n",
    "    errors = np.sqrt(np.diag(cov_matrix))\n",
    "    mean_err, sigma_err, signal_err, background_err, lambda_err = errors\n",
    "\n",
    "    print(f\"Fitted Parameters for {category}:\")\n",
    "    print(f\"  Mean = {mean_fit:.3f} ± {mean_err:.3f}\")\n",
    "    print(f\"  Sigma = {sigma_fit:.3f} ± {sigma_err:.3f}\")\n",
    "    print(f\"  Signal Amplitude = {amplitude_signal_fit:.3f} ± {signal_err:.3f}\")\n",
    "    print(f\"  Background Amplitude = {amplitude_background_fit:.3f} ± {background_err:.3f}\")\n",
    "    print(f\"  Lambda (Background decay) = {lambda_background_fit:.3f} ± {lambda_err:.3f}\")\n",
    "    print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f2ff647a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitted Parameters for h_mass_2idpass_BB_hist9;1:\n",
      "  Mean = 91.996 ± 0.000\n",
      "  Sigma = 4.976 ± 0.000\n",
      "  Gamma = 1.514 ± 0.000\n",
      "  Signal Amplitude = 119.239 ± 0.000\n",
      "  Background Amplitude = 42.436 ± 8.352\n",
      "  Lambda (Background decay) = 0.013 ± 0.002\n",
      "\n",
      "Fitted Parameters for h_mass_2idpass_BB_hist10;1:\n",
      "  Mean = 91.990 ± 0.000\n",
      "  Sigma = 4.976 ± 0.000\n",
      "  Gamma = 0.332 ± 0.000\n",
      "  Signal Amplitude = 6.722 ± 0.000\n",
      "  Background Amplitude = 29.446 ± 5.979\n",
      "  Lambda (Background decay) = 0.009 ± 0.002\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.integrate import quad\n",
    "\n",
    "# Load the histogram data for multiple categories\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Categories and corresponding histograms\n",
    "categories = [\"h_mass_2idpass_BB_hist9;1\", \"h_mass_2idpass_BB_hist10;1\"]\n",
    "histograms = {}\n",
    "\n",
    "# Load histograms for each category\n",
    "with uproot.open(root_file_path) as root_file:\n",
    "    for category in categories:\n",
    "        hist = root_file[category]\n",
    "        hist_values, hist_edges = hist.to_numpy()\n",
    "        histograms[category] = (hist_values, hist_edges)\n",
    "\n",
    "# Define bin centers and errors\n",
    "bin_centers = {category: (edges[:-1] + edges[1:]) / 2 for category, (values, edges) in histograms.items()}\n",
    "bin_errors = {category: np.sqrt(values) for category, (values, edges) in histograms.items()}\n",
    "\n",
    "# Define Gaussian and Breit-Wigner distributions\n",
    "def gaussian(x, mean, sigma):\n",
    "    return (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-(x - mean) ** 2 / (2 * sigma ** 2))\n",
    "\n",
    "def breit_wigner(x, gamma, x0):\n",
    "    return (1 / np.pi) * (gamma / 2) / ((x - x0) ** 2 + (gamma / 2) ** 2)\n",
    "\n",
    "# Define convolution of Gaussian and Breit-Wigner\n",
    "def convolve_gaussian_breitwigner(x, mean, sigma, gamma, x0):\n",
    "    def integrand(y, x, mean, sigma, gamma, x0):\n",
    "        return gaussian(y, mean, sigma) * breit_wigner(x - y, gamma, x0)\n",
    "    return np.array([quad(integrand, -np.inf, np.inf, args=(xi, mean, sigma, gamma, x0))[0] for xi in x])\n",
    "\n",
    "# Model function: Convolution + Exponential background\n",
    "def model(x, mean, sigma, gamma, amplitude_signal, amplitude_background, lambda_background):\n",
    "    signal = amplitude_signal * convolve_gaussian_breitwigner(x, mean, sigma, gamma, mean)\n",
    "    background = amplitude_background * np.exp(-lambda_background * x)\n",
    "    return signal + background\n",
    "\n",
    "# Fit each category with initial parameter guesses and handle potential issues\n",
    "fit_results = {}\n",
    "\n",
    "for category, (hist_values, hist_edges) in histograms.items():\n",
    "    # Define initial guesses\n",
    "    mean_guess = 91.2\n",
    "    sigma_guess = 2.5\n",
    "    gamma_guess = 2.5  # Initial guess for Breit-Wigner width\n",
    "    amplitude_signal_guess = np.max(hist_values) * 0.5\n",
    "    amplitude_background_guess = np.max(hist_values) * 0.5\n",
    "    lambda_background_guess = 0.1  # An initial guess for the exponential decay constant\n",
    "\n",
    "    initial_params = [mean_guess, sigma_guess, gamma_guess, amplitude_signal_guess, amplitude_background_guess, lambda_background_guess]\n",
    "\n",
    "    # Define bounds for the parameters\n",
    "    lower_bounds = [90, 0.1, 0.1, 0, 0, 0]  # Lower bounds for parameters\n",
    "    upper_bounds = [92, 5, 10, np.inf, np.inf, np.inf]  # Upper bounds for parameters\n",
    "\n",
    "    try:\n",
    "        # Perform the fit\n",
    "        params, cov_matrix = curve_fit(\n",
    "            model,\n",
    "            bin_centers[category],\n",
    "            hist_values,\n",
    "            p0=initial_params,\n",
    "            sigma=bin_errors[category],\n",
    "            absolute_sigma=True,\n",
    "            maxfev=10000,  # Allow more function evaluations\n",
    "            bounds=(lower_bounds, upper_bounds)  # Apply parameter bounds\n",
    "        )\n",
    "        fit_results[category] = (params, cov_matrix)\n",
    "    except RuntimeError as e:\n",
    "        print(f\"Fit did not converge for category {category}: {e}\")\n",
    "        continue\n",
    "\n",
    "# Function to plot signal, background, and total model for each category\n",
    "def plot_comp_model(model, bin_centers, hist_values, bin_errors, fit_params, category_name=\"Model\"):\n",
    "    # Extract parameters\n",
    "    mean, sigma, gamma, amplitude_signal, amplitude_background, lambda_background = fit_params\n",
    "    \n",
    "    # Generate x values for smooth plotting of model and components\n",
    "    x_fit = np.linspace(bin_centers[0], bin_centers[-1], 1000)\n",
    "    \n",
    "    # Calculate individual components\n",
    "    signal = amplitude_signal * convolve_gaussian_breitwigner(x_fit, mean, sigma, gamma, mean)\n",
    "    background = amplitude_background * np.exp(-lambda_background * x_fit)\n",
    "    total_fit = signal + background\n",
    "\n",
    "    # Plot data with error bars\n",
    "    plt.errorbar(bin_centers, hist_values, yerr=bin_errors, fmt='o', label=f\"Data {category_name}\", color=\"black\")\n",
    "    plt.plot(x_fit, total_fit, label=\"Total Fit: Signal + Background\", color='red', linewidth=2)\n",
    "    plt.plot(x_fit, signal, label=\"Signal Component\", color='blue', linestyle='--')\n",
    "    plt.plot(x_fit, background, label=\"Background Component\", color='green', linestyle=':')\n",
    "\n",
    "    # Add labels, title, and legend\n",
    "    plt.xlabel(\"Mass (GeV)\")\n",
    "    plt.ylabel(\"Events\")\n",
    "    plt.title(f\"Fit Model for Category: {category_name}\")\n",
    "    plt.legend(loc='upper left', fontsize=5)\n",
    "    plt.show()\n",
    "\n",
    "# Plot each category with components\n",
    "for category in categories:\n",
    "    hist_values, hist_edges = histograms[category]\n",
    "    bin_error = bin_errors[category]\n",
    "    if category in fit_results:\n",
    "        fit_params, cov_matrix = fit_results[category]\n",
    "        plot_comp_model(model, bin_centers[category], hist_values, bin_error, fit_params, category_name=category)\n",
    "\n",
    "# Print fitted parameters and errors for each category\n",
    "for category, (params, cov_matrix) in fit_results.items():\n",
    "    mean_fit, sigma_fit, gamma_fit, amplitude_signal_fit, amplitude_background_fit, lambda_background_fit = params\n",
    "    # Calculate parameter errors from covariance matrix\n",
    "    errors = np.sqrt(np.diag(cov_matrix))\n",
    "    mean_err, sigma_err, gamma_err, signal_err, background_err, lambda_err = errors\n",
    "\n",
    "    print(f\"Fitted Parameters for {category}:\")\n",
    "    print(f\"  Mean = {mean_fit:.3f} ± {mean_err:.3f}\")\n",
    "    print(f\"  Sigma = {sigma_fit:.3f} ± {sigma_err:.3f}\")\n",
    "    print(f\"  Gamma = {gamma_fit:.3f} ± {gamma_err:.3f}\")\n",
    "    print(f\"  Signal Amplitude = {amplitude_signal_fit:.3f} ± {signal_err:.3f}\")\n",
    "    print(f\"  Background Amplitude = {amplitude_background_fit:.3f} ± {background_err:.3f}\")\n",
    "    print(f\"  Lambda (Background decay) = {lambda_background_fit:.3f} ± {lambda_err:.3f}\")\n",
    "    print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1b744e88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitted Parameters for h_mass_2idpass_BB_hist9;1:\n",
      "  Mean = 90.674 ± 0.032\n",
      "  Sigma = 2.520 ± 0.028\n",
      "  Signal Amplitude = 276.197 ± 4.395\n",
      "  Background Amplitude = 31.980 ± 10.744\n",
      "  Lambda (Background decay) = 0.016 ± 0.004\n",
      "\n",
      "Fitted Parameters for h_mass_2idpass_BB_hist10;1:\n",
      "  Mean = 90.698 ± 0.033\n",
      "  Sigma = 2.369 ± 0.029\n",
      "  Signal Amplitude = 253.391 ± 4.352\n",
      "  Background Amplitude = 21.415 ± 7.047\n",
      "  Lambda (Background decay) = 0.011 ± 0.004\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "# Load the histogram data for multiple categories\n",
    "root_file_path = \"mass_regionBB.root\"\n",
    "\n",
    "# Categories and corresponding histograms\n",
    "categories = [\"h_mass_2idpass_BB_hist9;1\", \"h_mass_2idpass_BB_hist10;1\"]\n",
    "histograms = {}\n",
    "\n",
    "# Load histograms for each category\n",
    "with uproot.open(root_file_path) as root_file:\n",
    "    for category in categories:\n",
    "        hist = root_file[category]\n",
    "        hist_values, hist_edges = hist.to_numpy()\n",
    "        histograms[category] = (hist_values, hist_edges)\n",
    "\n",
    "# Define bin centers and errors\n",
    "bin_centers = {category: (edges[:-1] + edges[1:]) / 2 for category, (values, edges) in histograms.items()}\n",
    "bin_errors = {category: np.sqrt(values) for category, (values, edges) in histograms.items()}\n",
    "\n",
    "# Define Gaussian + Exponential model function\n",
    "def model(x, mean, sigma, amplitude_signal, amplitude_background, lambda_background):\n",
    "    gaussian = amplitude_signal * np.exp(-(x - mean)**2 / (2 * sigma**2))\n",
    "    background = amplitude_background * np.exp(-lambda_background * x)\n",
    "    return gaussian + background\n",
    "\n",
    "# Function to compute integrals of signal and background with uncertainties\n",
    "def calculate_integrals_with_errors(fit_params, cov_matrix, bin_edges):\n",
    "    mean, sigma, amplitude_signal, amplitude_background, lambda_background = fit_params\n",
    "\n",
    "    # Signal integral (Gaussian): amplitude is already the total integral of the Gaussian\n",
    "    signal_integral = amplitude_signal\n",
    "    signal_err = np.sqrt(cov_matrix[2, 2])  # Error directly from amplitude_signal\n",
    "\n",
    "    # Background integral (Exponential): integral of the exponential background\n",
    "    background_integral = amplitude_background / lambda_background * (\n",
    "        np.exp(-lambda_background * bin_edges[0]) - np.exp(-lambda_background * bin_edges[-1])\n",
    "    )\n",
    "    # Propagate errors using the covariance matrix\n",
    "    amplitude_bg_err = np.sqrt(cov_matrix[3, 3])\n",
    "    lambda_bg_err = np.sqrt(cov_matrix[4, 4])\n",
    "    background_err = np.sqrt(\n",
    "        (1 / lambda_background * (np.exp(-lambda_background * bin_edges[0]) - np.exp(-lambda_background * bin_edges[-1]))) ** 2 * amplitude_bg_err ** 2 +\n",
    "        (amplitude_background / lambda_background ** 2 *\n",
    "         (bin_edges[-1] * np.exp(-lambda_background * bin_edges[-1]) - bin_edges[0] * np.exp(-lambda_background * bin_edges[0]))) ** 2 * lambda_bg_err ** 2\n",
    "    )\n",
    "\n",
    "    return signal_integral, signal_err, background_integral, background_err\n",
    "\n",
    "# Function to compute chi^2 and pulls\n",
    "def calculate_chi2_pulls(model, bin_centers, hist_values, bin_errors, fit_params):\n",
    "    model_values = model(bin_centers, *fit_params)\n",
    "    pulls = (hist_values - model_values) / bin_errors\n",
    "    chi2 = np.sum(pulls ** 2)\n",
    "    return chi2, pulls\n",
    "\n",
    "# Fit each category with initial parameter guesses and handle potential issues\n",
    "fit_results = {}\n",
    "\n",
    "for category, (hist_values, hist_edges) in histograms.items():\n",
    "    # Define initial guesses based on the histogram shape\n",
    "    mean_guess = 91.2\n",
    "    sigma_guess = 2.5\n",
    "    amplitude_signal_guess = np.max(hist_values) * 0.8  # Adjust closer to observed peak\n",
    "    amplitude_background_guess = np.max(hist_values) * 0.2\n",
    "    lambda_background_guess = 0.02  # A smaller decay constant for broader exponential\n",
    "\n",
    "    initial_params = [mean_guess, sigma_guess, amplitude_signal_guess, amplitude_background_guess, lambda_background_guess]\n",
    "\n",
    "    # Define bounds for the parameters\n",
    "    lower_bounds = [90, 0.1, 0, 0, 0]\n",
    "    upper_bounds = [92, 5, np.inf, np.inf, np.inf]\n",
    "\n",
    "    try:\n",
    "        # Perform the fit with numerical stability\n",
    "        params, cov_matrix = curve_fit(\n",
    "            model,\n",
    "            bin_centers[category],\n",
    "            hist_values,\n",
    "            p0=initial_params,\n",
    "            sigma=bin_errors[category],\n",
    "            absolute_sigma=True,\n",
    "            maxfev=20000,  # Increased evaluations\n",
    "            bounds=(lower_bounds, upper_bounds)\n",
    "        )\n",
    "        fit_results[category] = (params, cov_matrix)\n",
    "    except RuntimeError as e:\n",
    "        print(f\"Fit did not converge for category {category}: {e}\")\n",
    "        continue\n",
    "\n",
    "# Update the plotting function\n",
    "def plot_comp_model(model, bin_centers, hist_values, bin_errors, fit_params, bin_edges, category_name=\"Model\"):\n",
    "    mean, sigma, amplitude_signal, amplitude_background, lambda_background = fit_params\n",
    "\n",
    "    x_fit = np.linspace(bin_edges[0], bin_edges[-1], 1000)\n",
    "    signal = amplitude_signal * np.exp(-(x_fit - mean)**2 / (2 * sigma**2))\n",
    "    background = amplitude_background * np.exp(-lambda_background * x_fit)\n",
    "    total_fit = signal + background\n",
    "\n",
    "    signal_integral, signal_err, background_integral, background_err = calculate_integrals_with_errors(\n",
    "        fit_params, fit_results[category_name][1], bin_edges)\n",
    "\n",
    "    chi2, pulls = calculate_chi2_pulls(model, bin_centers, hist_values, bin_errors, fit_params)\n",
    "    dof = len(bin_centers) - len(fit_params)\n",
    "\n",
    "    fig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 8))\n",
    "    ax1.errorbar(bin_centers, hist_values, yerr=bin_errors, fmt='o', label=f\"Data {category_name}\", color=\"black\")\n",
    "    ax1.plot(x_fit, total_fit, label=\"Total Fit: Signal + Background\", color='red', linewidth=2)\n",
    "    ax1.plot(x_fit, signal, label=\"Signal Component\", color='blue', linestyle='--')\n",
    "    ax1.plot(x_fit, background, label=\"Background Component\", color='green', linestyle=':')\n",
    "\n",
    "    ax1.set_xlabel(\"Mass (GeV)\")\n",
    "    ax1.set_ylabel(\"Events\")\n",
    "    ax1.set_title(f\"Fit Model for Category: {category_name}\")\n",
    "    ax1.legend(loc='upper left', fontsize=10)\n",
    "\n",
    "    # Annotate with chi^2 and event numbers\n",
    "    ax1.text(0.7, 0.7, f\"Signal: {signal_integral:.1f} ± {signal_err:.1f}\\n\"\n",
    "                       f\"Background: {background_integral:.1f} ± {background_err:.1f}\\n\"\n",
    "                       f\"Chi^2/DoF: {chi2/dof:.2f}\",\n",
    "             transform=ax1.transAxes, fontsize=12, bbox=dict(facecolor='white', alpha=0.8))\n",
    "\n",
    "    # Plot pulls\n",
    "    ax2.bar(bin_centers, pulls, width=bin_edges[1] - bin_edges[0], color='gray', alpha=0.7)\n",
    "    ax2.axhline(0, color='black', linewidth=1)\n",
    "    ax2.set_xlabel(\"Mass (GeV)\")\n",
    "    ax2.set_ylabel(\"Pulls\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Plot each category\n",
    "for category in categories:\n",
    "    hist_values, hist_edges = histograms[category]\n",
    "    bin_error = bin_errors[category]\n",
    "    if category in fit_results:\n",
    "        fit_params, cov_matrix = fit_results[category]\n",
    "        plot_comp_model(model, bin_centers[category], hist_values, bin_error, fit_params, histograms[category][1], category_name=category)\n",
    "\n",
    "# Print fitted parameters and errors for each category\n",
    "for category, (params, cov_matrix) in fit_results.items():\n",
    "    mean_fit, sigma_fit, amplitude_signal_fit, amplitude_background_fit, lambda_background_fit = params\n",
    "    # Calculate parameter errors from covariance matrix\n",
    "    errors = np.sqrt(np.diag(cov_matrix))\n",
    "    mean_err, sigma_err, signal_err, background_err, lambda_err = errors\n",
    "\n",
    "    print(f\"Fitted Parameters for {category}:\")\n",
    "    print(f\"  Mean = {mean_fit:.3f} ± {mean_err:.3f}\")\n",
    "    print(f\"  Sigma = {sigma_fit:.3f} ± {sigma_err:.3f}\")\n",
    "    print(f\"  Signal Amplitude = {amplitude_signal_fit:.3f} ± {signal_err:.3f}\")\n",
    "    print(f\"  Background Amplitude = {amplitude_background_fit:.3f} ± {background_err:.3f}\")\n",
    "    print(f\"  Lambda (Background decay) = {lambda_background_fit:.3f} ± {lambda_err:.3f}\")\n",
    "    print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3214837c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lumisec Bin Edges: [5.00000000e-01 1.13333333e+01 2.21666667e+01 3.30000000e+01\n",
      " 4.38333333e+01 5.46666667e+01 6.55000000e+01 7.63333333e+01\n",
      " 8.71666667e+01 9.80000000e+01 1.08833333e+02 1.19666667e+02\n",
      " 1.30500000e+02 1.41333333e+02 1.52166667e+02 1.63000000e+02\n",
      " 1.73833333e+02 1.84666667e+02 1.95500000e+02 2.06333333e+02\n",
      " 2.17166667e+02 2.28000000e+02 2.38833333e+02 2.49666667e+02\n",
      " 2.60500000e+02 2.71333333e+02 2.82166667e+02 2.93000000e+02\n",
      " 3.03833333e+02 3.14666667e+02 3.25500000e+02 3.36333333e+02\n",
      " 3.47166667e+02 3.58000000e+02 3.68833333e+02 3.79666667e+02\n",
      " 3.90500000e+02 4.01333333e+02 4.12166667e+02 4.23000000e+02\n",
      " 4.33833333e+02 4.44666667e+02 4.55500000e+02 4.66333333e+02\n",
      " 4.77166667e+02 4.88000000e+02 4.98833333e+02 5.09666667e+02\n",
      " 5.20500000e+02 5.31333333e+02 5.42166667e+02 5.53000000e+02\n",
      " 5.63833333e+02 5.74666667e+02 5.85500000e+02 5.96333333e+02\n",
      " 6.07166667e+02 6.18000000e+02 6.28833333e+02 6.39666667e+02\n",
      " 6.50500000e+02 6.61333333e+02 6.72166667e+02 6.83000000e+02\n",
      " 6.93833333e+02 7.04666667e+02 7.15500000e+02 7.26333333e+02\n",
      " 7.37166667e+02 7.48000000e+02 7.58833333e+02 7.69666667e+02\n",
      " 7.80500000e+02 7.91333333e+02 8.02166667e+02 8.13000000e+02\n",
      " 8.23833333e+02 8.34666667e+02 8.45500000e+02 8.56333333e+02\n",
      " 8.67166667e+02 8.78000000e+02 8.88833333e+02 8.99666667e+02\n",
      " 9.10500000e+02 9.21333333e+02 9.32166667e+02 9.43000000e+02\n",
      " 9.53833333e+02 9.64666667e+02 9.75500000e+02 9.86333333e+02\n",
      " 9.97166667e+02 1.00800000e+03 1.01883333e+03 1.02966667e+03\n",
      " 1.04050000e+03 1.05133333e+03 1.06216667e+03 1.07300000e+03\n",
      " 1.08383333e+03 1.09466667e+03 1.10550000e+03 1.11633333e+03\n",
      " 1.12716667e+03 1.13800000e+03 1.14883333e+03 1.15966667e+03\n",
      " 1.17050000e+03 1.18133333e+03 1.19216667e+03 1.20300000e+03\n",
      " 1.21383333e+03 1.22466667e+03 1.23550000e+03 1.24633333e+03\n",
      " 1.25716667e+03 1.26800000e+03 1.27883333e+03 1.28966667e+03\n",
      " 1.30050000e+03]\n",
      "Lumisec Bin Centers: [   5.91666667   16.75         27.58333333   38.41666667   49.25\n",
      "   60.08333333   70.91666667   81.75         92.58333333  103.41666667\n",
      "  114.25        125.08333333  135.91666667  146.75        157.58333333\n",
      "  168.41666667  179.25        190.08333333  200.91666667  211.75\n",
      "  222.58333333  233.41666667  244.25        255.08333333  265.91666667\n",
      "  276.75        287.58333333  298.41666667  309.25        320.08333333\n",
      "  330.91666667  341.75        352.58333333  363.41666667  374.25\n",
      "  385.08333333  395.91666667  406.75        417.58333333  428.41666667\n",
      "  439.25        450.08333333  460.91666667  471.75        482.58333333\n",
      "  493.41666667  504.25        515.08333333  525.91666667  536.75\n",
      "  547.58333333  558.41666667  569.25        580.08333333  590.91666667\n",
      "  601.75        612.58333333  623.41666667  634.25        645.08333333\n",
      "  655.91666667  666.75        677.58333333  688.41666667  699.25\n",
      "  710.08333333  720.91666667  731.75        742.58333333  753.41666667\n",
      "  764.25        775.08333333  785.91666667  796.75        807.58333333\n",
      "  818.41666667  829.25        840.08333333  850.91666667  861.75\n",
      "  872.58333333  883.41666667  894.25        905.08333333  915.91666667\n",
      "  926.75        937.58333333  948.41666667  959.25        970.08333333\n",
      "  980.91666667  991.75       1002.58333333 1013.41666667 1024.25\n",
      " 1035.08333333 1045.91666667 1056.75       1067.58333333 1078.41666667\n",
      " 1089.25       1100.08333333 1110.91666667 1121.75       1132.58333333\n",
      " 1143.41666667 1154.25       1165.08333333 1175.91666667 1186.75\n",
      " 1197.58333333 1208.41666667 1219.25       1230.08333333 1240.91666667\n",
      " 1251.75       1262.58333333 1273.41666667 1284.25       1295.08333333]\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "\n",
    "# Define the histogram name to process (example for 2id)\n",
    "hist_2id = \"h_mass_2idpass_EE\"\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Extract lumisec bin edges and save them\n",
    "with uproot.open(demo_file) as root_file_2:\n",
    "    # Access the histogram\n",
    "    hist_2id_data = root_file_2[hist_2id]\n",
    "    \n",
    "    # Get the bin edges for lumisec\n",
    "    _, edges_lumisec, _ = hist_2id_data.to_numpy()\n",
    "    \n",
    "    # Calculate bin centers for lumisec\n",
    "    lumisec_bin_centers = (edges_lumisec[:-1] + edges_lumisec[1:]) / 2\n",
    "\n",
    "# Save the lumisec bins (edges and centers) to a file\n",
    "output_data = {\n",
    "    \"lumisec_edges\": edges_lumisec,\n",
    "    \"lumisec_centers\": lumisec_bin_centers\n",
    "}\n",
    "np.savez(\"lumisec_bins.npz\", **output_data)\n",
    "\n",
    "# Print the saved data\n",
    "print(\"Lumisec Bin Edges:\", edges_lumisec)\n",
    "print(\"Lumisec Bin Centers:\", lumisec_bin_centers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24db33f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lumisec Bin Edges: [5.00000000e-01 1.13333333e+01 2.21666667e+01 3.30000000e+01\n",
      " 4.38333333e+01 5.46666667e+01 6.55000000e+01 7.63333333e+01\n",
      " 8.71666667e+01 9.80000000e+01 1.08833333e+02 1.19666667e+02\n",
      " 1.30500000e+02 1.41333333e+02 1.52166667e+02 1.63000000e+02\n",
      " 1.73833333e+02 1.84666667e+02 1.95500000e+02 2.06333333e+02\n",
      " 2.17166667e+02 2.28000000e+02 2.38833333e+02 2.49666667e+02\n",
      " 2.60500000e+02 2.71333333e+02 2.82166667e+02 2.93000000e+02\n",
      " 3.03833333e+02 3.14666667e+02 3.25500000e+02 3.36333333e+02\n",
      " 3.47166667e+02 3.58000000e+02 3.68833333e+02 3.79666667e+02\n",
      " 3.90500000e+02 4.01333333e+02 4.12166667e+02 4.23000000e+02\n",
      " 4.33833333e+02 4.44666667e+02 4.55500000e+02 4.66333333e+02\n",
      " 4.77166667e+02 4.88000000e+02 4.98833333e+02 5.09666667e+02\n",
      " 5.20500000e+02 5.31333333e+02 5.42166667e+02 5.53000000e+02\n",
      " 5.63833333e+02 5.74666667e+02 5.85500000e+02 5.96333333e+02\n",
      " 6.07166667e+02 6.18000000e+02 6.28833333e+02 6.39666667e+02\n",
      " 6.50500000e+02 6.61333333e+02 6.72166667e+02 6.83000000e+02\n",
      " 6.93833333e+02 7.04666667e+02 7.15500000e+02 7.26333333e+02\n",
      " 7.37166667e+02 7.48000000e+02 7.58833333e+02 7.69666667e+02\n",
      " 7.80500000e+02 7.91333333e+02 8.02166667e+02 8.13000000e+02\n",
      " 8.23833333e+02 8.34666667e+02 8.45500000e+02 8.56333333e+02\n",
      " 8.67166667e+02 8.78000000e+02 8.88833333e+02 8.99666667e+02\n",
      " 9.10500000e+02 9.21333333e+02 9.32166667e+02 9.43000000e+02\n",
      " 9.53833333e+02 9.64666667e+02 9.75500000e+02 9.86333333e+02\n",
      " 9.97166667e+02 1.00800000e+03 1.01883333e+03 1.02966667e+03\n",
      " 1.04050000e+03 1.05133333e+03 1.06216667e+03 1.07300000e+03\n",
      " 1.08383333e+03 1.09466667e+03 1.10550000e+03 1.11633333e+03\n",
      " 1.12716667e+03 1.13800000e+03 1.14883333e+03 1.15966667e+03\n",
      " 1.17050000e+03 1.18133333e+03 1.19216667e+03 1.20300000e+03\n",
      " 1.21383333e+03 1.22466667e+03 1.23550000e+03 1.24633333e+03\n",
      " 1.25716667e+03 1.26800000e+03 1.27883333e+03 1.28966667e+03\n",
      " 1.30050000e+03]\n",
      "Lumisec Bin Centers: [   5.91666667   16.75         27.58333333   38.41666667   49.25\n",
      "   60.08333333   70.91666667   81.75         92.58333333  103.41666667\n",
      "  114.25        125.08333333  135.91666667  146.75        157.58333333\n",
      "  168.41666667  179.25        190.08333333  200.91666667  211.75\n",
      "  222.58333333  233.41666667  244.25        255.08333333  265.91666667\n",
      "  276.75        287.58333333  298.41666667  309.25        320.08333333\n",
      "  330.91666667  341.75        352.58333333  363.41666667  374.25\n",
      "  385.08333333  395.91666667  406.75        417.58333333  428.41666667\n",
      "  439.25        450.08333333  460.91666667  471.75        482.58333333\n",
      "  493.41666667  504.25        515.08333333  525.91666667  536.75\n",
      "  547.58333333  558.41666667  569.25        580.08333333  590.91666667\n",
      "  601.75        612.58333333  623.41666667  634.25        645.08333333\n",
      "  655.91666667  666.75        677.58333333  688.41666667  699.25\n",
      "  710.08333333  720.91666667  731.75        742.58333333  753.41666667\n",
      "  764.25        775.08333333  785.91666667  796.75        807.58333333\n",
      "  818.41666667  829.25        840.08333333  850.91666667  861.75\n",
      "  872.58333333  883.41666667  894.25        905.08333333  915.91666667\n",
      "  926.75        937.58333333  948.41666667  959.25        970.08333333\n",
      "  980.91666667  991.75       1002.58333333 1013.41666667 1024.25\n",
      " 1035.08333333 1045.91666667 1056.75       1067.58333333 1078.41666667\n",
      " 1089.25       1100.08333333 1110.91666667 1121.75       1132.58333333\n",
      " 1143.41666667 1154.25       1165.08333333 1175.91666667 1186.75\n",
      " 1197.58333333 1208.41666667 1219.25       1230.08333333 1240.91666667\n",
      " 1251.75       1262.58333333 1273.41666667 1284.25       1295.08333333]\n"
     ]
    }
   ],
   "source": [
    "import uproot\n",
    "import numpy as np\n",
    "\n",
    "# Define the histogram name to process (example for 2id)\n",
    "hist_1id = \"h_mass_1idpass_EE\"\n",
    "\n",
    "# Open the ROOT file\n",
    "demo_file = \"output_results.root\"\n",
    "\n",
    "# Extract lumisec bin edges and save them\n",
    "with uproot.open(demo_file) as root_file_1:\n",
    "    # Access the histogram\n",
    "    hist_1id_data = root_file_1[hist_1id]\n",
    "    \n",
    "    # Get the bin edges for lumisec\n",
    "    _, edges_lumisec, _ = hist_1id_data.to_numpy()\n",
    "    \n",
    "    # Calculate bin centers for lumisec\n",
    "    lumisec_bin_centers = (edges_lumisec[:-1] + edges_lumisec[1:]) / 2\n",
    "\n",
    "# Save the lumisec bins (edges and centers) to a file\n",
    "output_data = {\n",
    "    \"lumisec_edges1\": edges_lumisec,\n",
    "    \"lumisec_centers1\": lumisec_bin_centers\n",
    "}\n",
    "np.savez(\"lumisec_bins.npz1\", **output_data)\n",
    "\n",
    "# Print the saved data\n",
    "print(\"Lumisec Bin Edges:\", edges_lumisec)\n",
    "print(\"Lumisec Bin Centers:\", lumisec_bin_centers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6777590",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
