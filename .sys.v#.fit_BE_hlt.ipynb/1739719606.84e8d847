{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "49a22a4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 10692.75 ± 149.67\n",
      "Background Yield: 2.33 ± 1.53\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 150.66\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.33\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbe4.txt\n",
      "value saved to N_2hbe4.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BE_hist4;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbe4.txt\")\n",
    "with open(\"N_2hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbe4.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c9987cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 9046.66 ± 126.35\n",
      "Background Yield: 1.46 ± 0.88\n",
      "Background Slope: 0.02 ± 0.01\n",
      "Chi-squared: 126.95\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.12\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbe5.txt\n",
      "value saved to N_2hbe5.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BE_hist5;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbe5.txt\")\n",
    "with open(\"N_2hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbe5.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "65b5aed1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 7807.83 ± 120.42\n",
      "Background Yield: 0.57 ± 0.50\n",
      "Background Slope: 0.02 ± 0.01\n",
      "Chi-squared: 131.56\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.16\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbe6.txt\n",
      "value saved to N_2hbe6.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BE_hist6;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbe6.txt\")\n",
    "with open(\"N_2hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbe6.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5abdb84c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 3561.70 ± 84.11\n",
      "Background Yield: 5.57 ± 5.10\n",
      "Background Slope: 0.00 ± 0.01\n",
      "Chi-squared: 66.19\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.25\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbe4.txt\n",
      "value saved to N_1hbe4.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BE_hist4;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.5, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbe4.txt\")\n",
    "with open(\"N_1hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbe4.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9553147",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 3153.22 ± 79.97\n",
      "Background Yield: 1.98 ± 2.31\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 65.10\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.23\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbe5.txt\n",
      "value saved to N_1hbe5.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BE_hist5;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbe5.txt\")\n",
    "with open(\"N_1hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbe5.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "45dac361",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2649.42 ± 60.82\n",
      "Background Yield: 2.85 ± 2.08\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 52.23\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 0.99\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbe6.txt\n",
      "value saved to N_1hbe6.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BE_hist6;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbe6.txt\")\n",
    "with open(\"N_1hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbe6.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e3315f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BE_hlt_hist4: 0.8567 ± 0.0112\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BE_hlt_hist4 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 3578.23 \n",
    "Nsig1_error = 75.98\n",
    "Nsig2 = 10692.75\n",
    "Nsig2_error = 149.67\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BE_hlt_hist4: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d3d8bb3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BE_hlt_hist5: 0.8536 ± 0.0115\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BE_hlt_hist5 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 =  3182.52 \n",
    "Nsig1_error = 69.31\n",
    "Nsig2 = 9275.25 \n",
    "Nsig2_error = 133.06\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BE_hlt_hist5: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b4a30b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BE_hlt_hist6: 0.8540 ± 0.0126\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BE_hlt_hist6 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2508.75 \n",
    "Nsig1_error = 57.06\n",
    "Nsig2 = 7337.99 \n",
    "Nsig2_error = 116.85\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency =(2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BE_hlt_hist6: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7516da92",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
