{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "49a22a4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 10692.75 ± 149.67\n",
      "Background Yield: 2.33 ± 1.53\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 150.66\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.33\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbe4.txt\n",
      "value saved to N_2hbe4.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BE_hist4;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_2hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbe4.txt\")\n",
    "with open(\"N_2hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbe4.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c9987cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 9046.66 ± 126.35\n",
      "Background Yield: 1.46 ± 0.88\n",
      "Background Slope: 0.02 ± 0.01\n",
      "Chi-squared: 126.95\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.12\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbe5.txt\n",
      "value saved to N_2hbe5.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BE_hist5;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_2hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbe5.txt\")\n",
    "with open(\"N_2hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbe5.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "65b5aed1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 7807.83 ± 120.42\n",
      "Background Yield: 0.57 ± 0.50\n",
      "Background Slope: 0.02 ± 0.01\n",
      "Chi-squared: 131.56\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.16\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAGDCAYAAADd8eLzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAAsTAAALEwEAmpwYAABoP0lEQVR4nO3dd3wUdfrA8c+z6aEnQKgpKIigEBURFSUK9l7uRCPKWWL3LHeeyp09d57lvLP/gg1N7F1E7xQFRUUFRaUpAgnVUEJPSNvn98dMwibZTTaQZJPN83699pXdmdnZZycz8+z3O9/5fkVVMcYYY0zb5gl1AMYYY4zZc5bQjTHGmDBgCd0YY4wJA5bQjTHGmDBgCd0YY4wJA5bQjTHGmDBgCd2HiGSKyP9a4HMyRGRVc3+O+1nPicg9LfFZPp+ZKiIqIpEt+blNwY1770a+Z4GIZDRDLNtFZEA98/NFZFxTf+6eaqnjKFw19H/3WS4kx1kozilNQUTuEJHc3XzvDBG5pKljamrtLqGLyGgR+VJEtohIkYh8ISIHA6hqnqoeG+oYW4qITBSRSvcEsl1ElonIFaGOq7VyD+qdPttru4gcqqpDVXWGu8xunzRqU9WOqrrMXe9un0RF5FAR2SEinfzM+15Ert7TWH0153Hk/ogpqfU/eLQ5Pqsl+EsUvv/3PVy377baJCLvi0j/PV1vuBKRW0Vkubu9VonIK6GOqbHaVUIXkc7AVOARIAHoC9wJlIYyrhD7yj2BdATOBu4TkQNCHVSVVljKv7pqe7mPr0IdUEPcGFcBZ/lOF5H9gCHAS41ZXyv4n5xS63/QpD9Iwswp7rHdGyjEOfe1Cq1gP6omIhcCE4Bx7vYaAUwPbVSN164SOjAIQFVfUtVKVS1R1f+p6o9QXWKdVbWwiBwrIj+7pfnHRWRm1a/pqmVF5AH31+9yETnB571/EJFFIrLNLfleFmyQIvIfEVkpIltFZK6IHOEz7w4ReVVEnnfXvUBERvjMP0BEvnPnvQLEBvu5qvodsAjY12d9r4nIb+42+ExEhvrMixORB0WkwJ0/S0Ti/Hyfs9zSwn7u6wvc92wUkb+JT9Wx+/1eF5FcEdkKTBSRPiLyrluj8quIXOqz7holV6l1OcNd959E5Ec3xldEJNZn/p9FZK2IrBGRi4LdVrW+X76IjBOR44FbgXPcX/k/+Fn2DyLyns/rX0XkVZ/XK0Uk3X2uIrK3iGQBmcBN7nrf81lleqDvVssU4IJa0y4A3lfVjUHsc77/k5tFpFhEEn2WOUhE1otIlJ/jSEXkchFZ4h4rj4mIuPMi3H1og3sMXS27WY0sIk+IyOs+r/8pItPFkSFOqetW97PyRSTTZ9ku7jG13t03/yoiHndeQ8d6FxF52t2PVovIPSIS0dB7RSQbOAJ4VHxqGsTnso+InCROLcpW9/9zR2O3C4Cq7gRex/kBVxV3veuWXbWZm935E/1s804i8qmIPOxu50QRec9d57futqi9L1wlIkuAJe60S93joEic47yPO73OJQXxqdEI4v+SJs45e5uIfAR0r2cTHQz8V1WXutvrN1XN8begiHjc/aNARNa5+02XWjFniXNOWSsiN9Z6780islSc89+rIpJQT1yNo6rt5gF0BjbinNxOALrVmj8RmOU+7w5sBc4EIoE/AuXAJT7LlgOXAhHAFcAaQNz5JwF7AQKMAYqBA915GcCqeuI8H0h0P/dG4Dcg1p13B7ATONH93H8As9150UABcD0QhVPiLgfuCfA51d/XfX0wsBkY5DPtIqATEAP8G5jnM+8xYAZOTUcEcJi7XCqgbvx/AH4F9nbfMwTYDox2433AjXGcz/crB07H+cEZB8wEHsf5cZIOrAfGuss/5/v9am9bIB/4BuiDUyuzCLjcnXc8TqllP6AD8KIb994BtteMqv9/ren5teLPred/O8Ddxh6cUlMBsNpn3ibA476ujqX292zou/n53P7udk12X3twSu2nB7nP1f6fTAOu8Fn/Q8AjAfYrxakZ6woku/+/4915lwMLgX5AN+Bjd/nIAN+jelv7mRcP/OJ+/hHABqCfz35RAfwLZx8dA+wA9nHnPw+8g7Ovp7rruTjIY/1t4P9w9qGe7v/ksiDfO4Na+1St/3sGsL+73Yfh7K9V/7PUYLeVu22mAM/XOlYCrTsZ2Aaci3MuSQTSffdFd9o31Dz+XnYf8TjH+ko/+8JHOPtrHHC0+3860P2/PAJ8Fuj7+W6vILbtVz7/7yPd7+P32MTZ/4uAP+OUziMCHfs458RfcY7XjsCbwAu1Yn7J3R/2x9nfq/4P1wGzcfb3GJz95qX68lZjHiFPsi39wCl9PodzMqsA3gWSfHaQqoR+AU51dNX7xN05fXemX2udTBToFeBz3wb+6HMgBUzoft67CRjuPr8D+Nhn3hCgxH1+pO8O7U77kvoTegVOgtnuxv+I7/trLd/VXaYLzkmgpCquWstV7dR/wj1Z+8y7zXcHdrdbGTUT4mc+8/sDlUAnn2n/AJ5znz9Hwwn9fJ/X9wFPus+fAe71mTeIhhN6sbu9NgPf+XxGUAndXWYlzglsPJCDc1IcjPPj512f5YJJ6H6/W4DP/Ri41X1+DM6JNCrIfe6zWvPPAb5wn0fg/AAYWfs48vkeo31evwrc7D7/BDf5ua/H0XCS2u7zP9gMXOozfyTOibkAOLfWflEBdKgVx9/c+EuBIT7zLgNmNHSsA0nue+N85p8LfBrMeYIGErqf7/9v4KFax1kw26oC59ywfz37h++6bwHeCrDcczjHznzgzz7TI3AS7D4+0+7xsy8c7fP6aeA+n9cd3XWk+vt+1E3ogf4vyX7+3y9S/4/tTJxjZAdOwe/mAJ87HbjSZ94+bsyRPjEPrnVcPu0+X4RbGHFf9656b33njGAf7a3KHVVdpKoTVbUfTsmsD86OXFsfnBNv1fsU50eAr9985he7TzsCiMgJIjLbrUbajFOirq/Kp5qI3ChOdf0W971dar33N5/nxUCsWy3VB6e0pz7zCxr4uNmq2lWd60a9gKHA3904IkTkXrd6aCvOCQI3lu44Jeal9az7z8Bjquq73Wpv12Kcg8fXylrLF6nqtlrfqW8D38tX7e3V0V8sNLytAK51t1dXVT2wETH4momTYI50n8/AKTGOcV83RqDv5o9vtfsE4EVVLYeg9rmV1PQOMESc1tjHAFtU9ZvdiLP2/6D25/hzus//oKuqTq6a4cawDOcH+Ku13rdJVXf4vC5wP787u2q3fOf57mOBjvUUnBLsWrdqejNOqatnEO9tkIgc4lZprxeRLTg1GkGdR1ynq2pXnNLg1cBMEekVxLr7U/+xfRJOCftJn2k9cJJaQ//P2sd39XZX1e0454Ngj+9A27YP/v/fAanTmHMcTsHlcuAuETnOz6I1YnafR+L8uKtS+7zSx32eArzls68swimw+L53t7W7hO5LVRfj/Nrcz8/stTjVIgCIiPi+ro+IxABv4FQnJ7kH1DSck0xD7z0C+Avwe5xLAl2BLcG81425rxtrleRgYgZQ1UI37lPcSecBp+GUmrrg/PrEjWUDTtX/XvWs8ljgryLi2xir9naNw6m6qxGKz/M1QILUbKGdDKx2n+/A+WVepVc98dS2FufE5bvePaUNL1Kd0I9wn8+k4YQezHob8ibO/nEUzqWk5yHofa7G56tzTfZVnFLNBOCF3Yypxv5Azf9Ho4nIVTjJaw1wU63Z3USkg8/rZHe5DTilpJRa81bTsJU4JfTuPj8wOqvq0Ibe6Gro//oiTi1if1XtgpNAgzkX1PwQp83QmzjJY3QQ615J/cf2ZOBDYJrPNl2PUypu6P9Z+/iu3u7uuhJxtn1VMt6d43st/v/fDVLVclV9DfgR/7mhRszsqg0o9JlW+7yyxn2+Ejih1g/SWFUNZl9rULtK6CIy2C2J9HNf98epHpvtZ/H3gf1F5HS39HsVwe9M0TgnlfVAhdtQI9jbeDrh7BzrgUgRuQ3n2n8wvnLfe62IRIrImThVkEERp5HTGcACn1hKcX4xx+OW3AFU1YtT7fYvcRqtRYhze1SMzyoX4FynfkxETnWnvQ6cIiKHiUg0zl0GAU9QqroS57LBP0QkVkSGARcDee4i84ATRSTBLXlcF+z3xUlIE0VkiIjEA7c34r2BFAKp4jaoCmAmcBRONe0q4HOc7ZQIfF/Pehu8N7k+bmnldeBZoEBV57izdnefex6n2vNUYHdv1XsV+KOI9BWRrjg/LHaLiAzCqeI9H+dHxk3iNjD0caeIRLs/Yk4GXlPVSjeObHEaeaUANxDEd1LVtcD/gAdFpLPb6GkvERkTZNgN/V874dRQ7RSRkTg/shtNHKfhtFNYFMS684BxIvJ791yS6GdbXg38DEwVkTh3O74J3CEi8SIymLoNMWt7EfiDiKS7546/A1+rar6qrsdJ7Oe755eLqP9HRjVVLQDmsOv/PZpdBZU6xGlgd5L7//e45+yhwNd+Fn8JuF6cRncd3ZhfUdUKn2X+5m6DoTiX0qpugXsSZz9LcT+3h/t/aRLtKqHjNIo4BPhaRHbgJPL5OI2AalDVDcDvcK5/bMS5Vj2HIG5xc6uHr8U5SWzCOVDeDTLG/wIf4DTKKcApBQdTDYmqluGUvCa6n3sOzgFWn0PFvZ8X50BfD1zjznvejWE1zrXw2j98/gT8BHyLc93yn9Tap1T1B5wT52QROUFVF7jrfxnnV/Q2YB31b9dzcWoH1gBvAber6kfuvBeAH3AuB/yPXQdOg1T1A5zLLZ/gNHL5JNj31uM19+9GEfkuwOf+gnNt83P39VacauIv3JOiP0/jVHFvFpG39yC+KTili+d9pu3WPqeqXwBenLYE+bsZz2Sc/9uPOD9mpuH8uAi0HQDek5r3ob/l/ujOBf6pqj+o6hKcOw5e8PmR+RvOcbEGJ2Fd7tbSgbNP7sD5P8zCSTTPBPkdLsD5Eb/QXf/rONdGg/Ef4GxxWmk/7Gf+lThVv9tw2p/UvozQkPfcY3srkA1c6B6D9a5bVVfgXCa8EefYngcM912xe2kvC2dfeUecOyyuxqnN+w3n2HyJeo5tVZ2O047hDZzzwV44bUuqXIpz6W4jToL9shHf/Tyc830Rzo/15+tZdivO/rICp83BfTiNPmf5WfYZnO/2GbAc53i5ptYyM3HOKdOBB1S1qqOl/+Dkgv+52322G2OTqGoNaBrglrhWAZmq+mmo4wkX7i/czcBAVV0e4nBMI4nIJzjX4p9qovWdgNOwL6XBhRu33gycBlFBXTYzTUNE/onTAPDCUMfSEkQkFSfJR9UqsbeI9lZCbxQROU5Eurq/8G/FqRr2Vz1vGkFETnGrozrgtDP4iV0N7kwbIU4PiwfSiFoRP+uIE5ET3WrdvjglqbeaKkbTstzLmsPcKv6ROJfH7P/ZQiyh1+9QnJaeG3Cuv5yuqiWhDSksnIZT7bkGGAiMV6sqalNEZArOLT7X1boDodGrwmlHsQmnyn0RTvWvaZs64Vzm24FThf8gzh0RpgVYlbsxxhgTBqyEbowxxoQBS+jGGGNMGGg1o93sju7du2tqamqowzDGGGNazNy5czeoao/a09t0Qk9NTWXOnDkNL2iMMcaECRHx242tVbkbY4wxYcASujHGGBMGLKEbY4wxYaBNX0M3xhjTvMrLy1m1ahU7d+4MdSjtTmxsLP369SMqKiqo5S2hG2OMCWjVqlV06tSJ1NRURBo9cqvZTarKxo0bWbVqFWlpaUG9x6rcjTHGBLRz504SExMtmbcwESExMbFRNSOW0I0xxtTLknloNHa7W0I3xhjTqkVERJCenl79yM/P57DDDgMgPz+fF198McQRtg52Dd0YY0yrFhcXx7x582pM+/LLL4FdCf28884LQWSti5XQjTHGtDkdO3YE4Oabb+bzzz8nPT2dhx56KMRRhZaV0I0xxgTnuuugVkl5j6Wnw7//Xe8iJSUlpKenA5CWlsZbb71VPe/ee+/lgQceYOrUqU0bVxtkCd0YY0yr5q/K3dRlCd0Ys1syMjIAmDFjRkjjMC2ogZK0CS27hm6MMabN6tSpE9u2bQt1GK2CJXRjjDFt1rBhw4iMjGT48OHWKC7UARhjjDH12b59e8BpUVFRTJ8+vaVDapWshG6MMcaEAUvoxhhjTBiwhG6MMcaEAUvoxhhjTBiwhG6MMcaEAUvoxhhjTBiwhG6MMabVy87OZujQoQwbNoz09HS+/vprLrnkEhYuXNjkn1U18EtbY/ehG2OMadW++uorpk6dynfffUdMTAwbNmygrKyMp556KtShtSpWQjfGGNOqrV27lu7duxMTEwNA9+7d6dOnDxkZGcyZMweAp59+mkGDBpGRkcGll17K1VdfDcDEiRO59tprOeywwxgwYACvv/464HRMM3bsWA488ED2339/3nnnndB8uSZkJXRjTKPl5eUxe/ZsSktLSU1NJTs7m8zMzFCHZVqAOyZPDb//PVx5JRQXw4kn1p0/caLz2LABzj675rxgxvY59thjueuuuxg0aBDjxo3jnHPOYcyYMdXz16xZw9133813331Hp06dOProoxk+fHj1/LVr1zJr1iwWL17Mqaeeytlnn01sbCxvvfUWnTt3ZsOGDYwaNYpTTz0VEQlmM7RKVkI3xjRKXl4eWVlZlJaWAlBQUEBWVhZ5eXkhjsyEq44dOzJ37lxycnLo0aMH55xzDs8991z1/G+++YYxY8aQkJBAVFQUv/vd72q8//TTT8fj8TBkyBAKCwsBUFVuvfVWhg0bxrhx41i9enX1vLbKSujGmEaZNGkSxcXFNaYVFxczadIkK6W3A/WVqOPj65/fvXtwJXJ/IiIiyMjIICMjg/33358pU6ZUz1PVet9bVVXvu2xeXh7r169n7ty5REVFkZqays6dO3cvuFbCSujGmEZZsWJFo6Ybs6d+/vlnlixZUv163rx5pKSkVL8eOXIkM2fOZNOmTVRUVPDGG280uM4tW7bQs2dPoqKi+PTTTykoKGiW2FuSldCNMY2SnJzs9+SXnJwcgmhMe7B9+3auueYaNm/eTGRkJHvvvTc5OTmc7V6Q79u3L7feeiuHHHIIffr0YciQIXTp0qXedWZmZnLKKacwYsQI0tPTGTx4cEt8lWYlDVVVtGYjRozQqhaOxpiWUXUN3bfaPT4+npycHKtyD0OLFi1i3333DXUYDdq+fTsdO3akoqKCM844g4suuogzzjgj1GHtMX/bX0TmquqI2stalbsxplEyMzPJycmpvi6ZkpJiydyE3B133EF6ejr77bcfaWlpnH766aEOqcVZlbsxptEyMzOZPHkyADN2t5WTMU3ogQceCHUIIddsJXQRiRWRb0TkBxFZICJ3utMTROQjEVni/u3m855bRORXEflZRI5rrtiMMcaYcNOcVe6lwNGqOhxIB44XkVHAzcB0VR0ITHdfIyJDgPHAUOB44HERiWjG+Iwxxpiw0WwJXR3b3ZdR7kOB04CqGwinAKe7z08DXlbVUlVdDvwKjGyu+Iwxxphw0qyN4kQkQkTmAeuAj1T1ayBJVdcCuH97uov3BVb6vH2VO80YY4wxDWjWhK6qlaqaDvQDRorIfvUs7q8D3Tr31IlIlojMEZE569evb6JIjTHGtFYRERGkp6czfPhwDjzwQL788svdWs/EiROrB2dpTWbMmMHJJ5+8x+tpkdvWVHUzMAPn2nihiPQGcP+ucxdbBfT3eVs/YI2fdeWo6ghVHdGjR4/mDNsYY0wrEBcXx7x58/jhhx/4xz/+wS233NLiMVRUVLT4ZzZWc7Zy7yEiXd3nccA4YDHwLnChu9iFQNWYde8C40UkRkTSgIHAN80VnzHGmLZn69atdOvm3BxV3xCozz//PMOGDWP48OFMmDChznr+9re/MXHiRLxeL9OmTWPw4MGMHj2aa6+9trq0fMcdd5CVlcWxxx7LBRdcQEFBAWPHjmXYsGGMHTu2urvj2iX/jh07Ak7JOyMjg7PPPpvBgweTmZlZ3Zf8hx9+WP2Zb775ZpNsm+a8D703MMVtqe4BXlXVqSLyFfCqiFwMrAB+B6CqC0TkVWAhUAFcpaqVzRifMcaYRsp4LqPOtN8P/T1XHnwlxeXFnJhXd/zUiekTmZg+kQ3FGzj71Zrjp86YOKPBzywpKSE9PZ2dO3eydu1aPvnkE4CAQ6AuXLiQ7OxsvvjiC7p3705RUVGN9d10001s2bKFZ599ltLSUi677DI+++wz0tLSOPfcc2ssO3fuXGbNmkVcXBynnHIKF1xwARdeeCHPPPMM1157LW+//Xa9sX///fcsWLCAPn36cPjhh/PFF18wYsQILr30Uj755BP23ntvzjnnnAa3QTCas5X7j6p6gKoOU9X9VPUud/pGVR2rqgPdv0U+78lW1b1UdR9V/aC5YjPGBFY1opUxrUVVlfvixYv58MMPueCCC1DVgEOgfvLJJ5x99tl0794dgISEhOp13X333WzevJn/+7//Q0RYvHgxAwYMIC0tDaBOQj/11FOJi4sD4KuvvuK8884DYMKECcyaNavB2EeOHEm/fv3weDykp6eTn5/P4sWLSUtLY+DAgYgI559/fpNsJ+spzhhjTNDqK1HHR8XXO797fPegSuT1OfTQQ9mwYQPr169n2rRpfodAVVVE/LWzhoMPPpi5c+dSVFREQkJCg0OvdujQIeC8qs+IjIzE6/UCzvCsZWVl1cv4Dt0aERFRfS0+UHx7wvpyN8YY02YsXryYyspKEhMTAw6BOnbsWF599VU2btwIUKPK/fjjj+fmm2/mpJNOYtu2bQwePJhly5aRn58PwCuvvBLwsw877DBefvllwBmkaPTo0QCkpqYyd+5cAN555x3Ky8vr/Q6DBw9m+fLlLF26FICXXnppN7ZEXVZCN8bsFuvD3bSUqmvo4JSAp0yZQkRERMAhUIcOHcqkSZMYM2YMERERHHDAATz33HPV6/vd737Htm3bOPXUU5k2bRqPP/44xx9/PN27d2fkyMD9mT388MNcdNFF3H///fTo0YNnn30WgEsvvZTTTjuNkSNHMnbs2HpL9eBc+8/JyeGkk06ie/fujB49mvnz5+/ZRsKGTzXG1FJ1/dwStoG2M3zqnqgaelVVueqqqxg4cCDXX399qMMCbPhUY4wxJmiTJ08mPT2doUOHsmXLFi677LJQh7RbrMrdGGNMu3b99de3mhL5nrASujHGGBMGLKEbY4wxYcASujHGGBMGLKEbY4xpUtbbYGhYQjfGGNOqVQ2fOnToUIYPH86//vWv6p7ZAsnPz+fFF19soQhbB0voxphqeXl5zJ49m5kzZ5KamkpeXl6oQzJtTHPsQ1V9uS9YsICPPvqIadOmceedd9b7Hkvoxph2Ky8vj6ysLEpLSwEoKCggKyvLkroJWkvsQz179iQnJ4dHH30UVSU/P58jjjiCAw88kAMPPJAvv/wSgJtvvpnPP/+c9PR0HnrooYDLhZWqEWva4uOggw5SY8yeGzNmjMbExChQ55GSkhL0OsaMGdOscZqWt3DhwqCXTUlJ2aN9KJAOHTrUmda1a1f97bffdMeOHVpSUqKqqr/88otW5YVPP/1UTzrppOrlAy3X2vnb/sAc9ZMTrWMZYwxAdamqthUrVrRwJKatCrSvNMc+pG635eXl5Vx99dXMmzePiIgIfvnlF7/LB7tcW2YJ3RgDOMM8+kvq0dHRIYjGtEXJycnVI57Vnt6Uli1bRkREBD179uTOO+8kKSmJH374Aa/XS2xsrN/3PPTQQ0Et15bZNXRjDABpaWnEx8fXmObxeEhLSwtRRKatyc7OrrMPxcfHk52d3WSfsX79ei6//HKuvvpqRIQtW7bQu3dvPB4PL7zwApWVlQB06tSJbdu2Vb8v0HLhxBK6MQaApKQkcnJyiImJASAlJYVBgwaRlJTU6HXZfcjtU2ZmZp19KCcnh8zMzD1ab9XwqUOHDmXcuHEce+yx3H777QBceeWVTJkyhVGjRvHLL79UD106bNgwIiMjGT58OA899FDA5cKJVbkb004EMyxqZmYmkydPrl6uOimvXg15efDaa9C/P1xyCRx3HERENG/Qps2pvQ81hfpK0wMHDuTHH3+sfv2Pf/wDgKioKKZPn15jWX/LhRNL6MaYgPoWF3Pdr786SVwVDj4YZs2Ct95ypl17Ldx4I4iEOlTTijRVIjeNY1Xuxhj/Vq3iwR9/ZNC2bXDbbbBkCXzzDaxa5ZTUBw6EP/8Z7r031JEaY7ASujHGj87l5XDccXSqqOC64cOZfMcdu2ZGR8PZZ8NZZ8H558Ott4I1nDMm5KyEboypIa6ignt/+gmWLuXW/fZjSadONeYXF7tPROCZZ2D0aJg4kf22bGn5YE2LqLrn27Ssxm53S+jGmBpu+fln9tm2DV59lR+6dqW0NJFff3XmLV0KSUlOm7hvvwWNjoG334bkZLLnz6dXSUlIYzdNLzY2lo0bN1pSb2GqysaNGxt1v7xVuRvTzlUNplFaWkpqUhLZGzbwVFoal516Kmv//DO//HIDt94Kr77qNGo/5xx46SV4+mk44giYOjWRztOmEb3PPly2fHmov45pYv369WPVqlWsX78+1KG0O7GxsfTr1y/o5S2hG9OO1RlMY906LgXSoqPp9ir88suNdOs2h7vvHglAaio89RT861/w3HNOA/fx4yEz82v+KELR+vUk9+5NXNeuu3X/uml9oqKirHOhNsISujHt2KRJkyiuvijuKAGWLFvL+edD587zGTr0b+yzz39rLNO5s3PHWseO8P33zo+CYvde4YLffsOzbl1LfQVjjMuuoRvTjgUaNKO8fBu9e+dRWjqKWbP+F3Bc64sugvfeq/ujwOv1styq341pUVZCN6YdquoBLtBgGhERkaxfn0VpqdPIrWpca6BON56BfhQEGr3NGNM8rIRuTDuWnZ1NfK1WtHFx8XTt2pmSkpql7uLiYiZNmlRnHfWNpBWoZG+MaXqW0I1pB6pass+cOZPU1FQKCwsBdzCNUaPoX71kCocfnkNRUZHf9fgrjfsbYatKVcnekroxzc8SujFhrk5L9oICfvnlFyepr19P5ldf8Wjv3nTvPpMOHfJ57rnMgKXu6OjoOqOo1R5hq7ZAJXtjTNOyhG5MmPPXkr260dqTT0JpKY90OoMNG47k1luhb9/A41oHun0pMzOTUaNGBYwh0HV2Y0zTsYRuTBjxNw55vY3WHnuMiuNO4stVfyI2djU33ODMCzSudUP3lgcqpfuW+G2sdGOahyV0Y8JcoOrzrpGRUFjI+ol/JiZmPXvt9QS+7eOqSt1jxowhPz+/Tut2f9LS0uqW7KOjyc7O3qPvYIxpmCV0Y8Kcv+pzj8fD3zwe2G8/ep9zJMOG3UT37rP2+LOSkpLIyckhIiIREJIjI8kZMCCoHwPGmD1jCd2YMOev+vyYvn25oayMJefexoqV0uSft88+VwFenjw/j8zFi+GXX5r0M4wxdTVbQheR/iLyqYgsEpEFIvJHd/odIrJaROa5jxN93nOLiPwqIj+LyHHNFZsx7U3t6vObS0rYHBXFX74+k4MPBq83okk/LzHxC6KiNvP0+lOcEV2eecbvcnY93Zim05wl9ArgRlXdFxgFXCUiQ9x5D6lquvuYBuDOGw8MBY4HHheRpj3LGGOgqIjDNm4kN+Fg3n4vgosvBo+nskk/wuOpICnpv7zz3zje67w3Gx96CMrLm/QzjDE1NVtCV9W1qvqd+3wbsAjoW89bTgNeVtVSVV0O/AqMbK74jGmv8m68kUGqXFP4Jaqp9OnTPJ2+9Oo1jYoK+Hf0JSSWlcHHHzfL5xhjHC1yDV1EUoEDgK/dSVeLyI8i8oyIdHOn9QVW+rxtFX5+AIhIlojMEZE5Nj6vMY1TWFhI1vPPs6v39gL+8pes6p7jmlKHDgW8+CJUpM1gR0QEvPVWk3+GMWaXZk/oItIReAO4TlW3Ak8AewHpwFrgwapF/bxd60xQzVHVEao6okePHs0TtDFhauWyZRR7vTWmFRcXN9vIaOeeCxKzndkJCfD221DZtFX7xphdmjWhi0gUTjLPU9U3AVS1UFUrVdULTGZXtfoq8OlSGvoBa5ozPmPamx1lZX6nl5WVMWPGjHrfW7s/+GD7Zy8sHMs/5C+wfj188UVjQzbGBKk5W7kL8DSwSFX/5TO9t89iZwDz3efvAuNFJEZE0oCBwDfNFZ8x7Y2o0i/AvPpGTAP//cHXHnRlxowZfn8UbN58ADM2XMnW6O7w5pu7G74xpgHNWUI/HJgAHF3rFrX7ROQnEfkROAq4HkBVFwCvAguBD4GrVNXq54wJUkMl6AM2b+ZeINJTc7jU+Pj4Bnty89cffLCDrvTq9SGV3jimDv0LeS+84HfUN2PMnotsrhWr6iz8XxefVs97sgHrI9KYRgpUggaqe2k7rrCQEZ44YuIm4y25Aa93HSkpKWRnZwfsya2qxO3x+P/tH8ygK507LyA6egP/3hzJgqIiSt3pBQUFAddrjGk8Ua3T7qzNGDFihM6ZMyfUYRgTcqmpqRQUFNSZHhMTw86dO6G4mJJOnbir80Tu3fw0++9/EwkJ3zR43byh9aekpJCfn1/vezMyMliy5DrWrv0jqnV/AFTHaIwJiojMVdURtafbz2NjwkC9I6oBfPABcV4vC4fcS+/e0K1b434IBxpONdhBV7p3/wzVlX7nVcdojNkjltCNCQOBGrVVD2f62musTxzMtG+6c/75IOL1u3wggYZTDXbQlW7dviMlJXDDu8a0mjfG+Nds19CNMS0nOzubrKysGg3XPB4PaWlpUFICU6cS8/tLeDBdOO44+GY37h/JzMxk8uTJAEFX1Vc11CstLSUxMZHoqCjK/HQB6++avzGmcayEbkwY8FeCHjRoEElJSfDhh7BjB53PO5lrr4V99mmZmGo31Nu4cSNl5dCRKL/LB9tq3hjjnyV0Y8JE7RHVkpKSnBmvvUZ+13SezT+K7dtbLh5/t7pBOeXS2e/tLxBcq3ljjH+W0I0JY9FeL7z3Hrl73c5Fl0awZUvLfXbAhnpaVKNLSF8NdXBjjAnMEroxYezgoiLYvp3XisZy+OHQt77xDptY4OSczHkyiPiImqMjN6bVvDGmLkvoxoSxjPXr+aXLwfy4vBO/+13Lfra/W93i4uKBu1geew05nTrtdqt5Y0xd1srdmDAV5fVy2MaN/Cf9cZgLZ53Vsp9flZwvvvhiSktLq3uly85eSt/ir8gs2MzHI0awvEOHoFvNG2MCs4RuTJgasWkTHSorWdDpUA49FPr5jMzSUgnU361ukydnsKK0FApgZFERyzt0aJFYjAl3VuVuTBjKy8vj6YUL8QBfLDuUSy5pPZ22qHpYuPUYZqVNcK7xG2OahCV0Y8JMYWEhWVlZrPd6UaBgxQquuSarFfXE5uXXX6/h4agbGbZlC7GVNqiiMU3BEroxYWb58uW7PdRpSxCBhIRv+XjtEDzqIX3zZr/LZWRkkJGR0aKxGdOW2TV0Y8JMoMFOmqLTlqa69t6t27cs+u1EZskhHLyp7ihuxpjGsxK6MW2cb0l2xowZpKSk+F2utXTaMmPGDD7//HY8Hngh5lRG2nV0Y5qEJXRjwkz21VcTX2taa+u0JTERDj4YvvEcRP+SEmhgTHVjTMMsoRsTZjK9Xh6gE+CUyFtrpy0ffAAH7nuL8+LTT0MbjDFhwBK6MeHm3Xc5a+gIkpPvYcSIC8nPz291yRygWzco6BBPUVQUfPJJqMMxps2zhG5MOFm3Dr78kp5nH0la2tN06JAf6ojqlX7ATO7d6w0noauGOhxj2jRL6MaEk6lTKdZYPux+Pl6v/3HHW9qMGTMCto5fuxZy1x6NrlkDv/zSsoEZE2YsoRsTTt59l4+6n8sJ1+zNli3DQh1Ng449FtZu6cBiBlu1uzF7yBK6MeGipAQ++oh3ul9Cly7Qpcu8UEfUoKOPdv5+0vUsaxhnzB6yhG5MuJgxg8rinUxdeyAnnggeT+vvUjUtDVJT4ZPOpzsJ3esNdUjGtFmW0I0JF++/z1cxR7F+SwynnRbqYIJ3wQWwz7AY2LAB5s8HnMFlZs+ezcyZM0lNTW1F/dAb03pZQjcmHKjC1Kn8L+VSoqLghBNCHVDw7rwT/v54V+fFJ5+Ql5dHVlZWdRe2BQUFZGW1psFljGmdLKEb04ZVl2Q/+4zUggIGHf4RP/wAnTuHOrLGqezTnw0DRsInnzBp0qRWPbiMMa2VJXRj2qg6JVngspdf5Lvv2l5J9vDD4cKKp2DmzICDyDTF4DLGhDPRNtyZw4gRI3TOnDmhDsOYkEhNTaWgoO5IZcnJKRQU5Ld8QHvgyivhhWfLKdoZz8Be3Sn47bc6y6SkpJBvfb4bg4jMVdURtadbCd2YNqZqdLVAJdaVK9teSfaoo2D7zijmchBjKyqIj685vExrG1zGmNbIEroxbVSg4VBbyzCpjeGO/srrUceRVVlJTk4OMTExQOsdXMaY1sYSujFtVHZ2dp2SbExM2yzJ9ugBw4bBxzKW/bduJfOccxg1ahRjxoxptYPLGNPaWEI3po3KzMwk58kn6Q+A4PGkMHly2y3J3nMPDO/1HPGVlfD996EOx5g2xxK6MW1YZkoKK4BDE5/immvymTChbSZzgFNOgW19FzsvZs4MbTDGtEGW0I1py6ZNo1yEroOf4d//DnUwe25Z8UG8En2sJXRjdoMldGPasvffZ2anAeyIiAx1JE1i6dKryeY2+PxzPG34llpjQqHZErqI9BeRT0VkkYgsEJE/utMTROQjEVni/u3m855bRORXEflZRI5rrtiMCQsrVsD8+Uzc+S6LFt0e6miaRJcuP7Co/CBKt5QwYPv2UIdjTJvSnCX0CuBGVd0XGAVcJSJDgJuB6ao6EJjuvsadNx4YChwPPC4iEc0YnzFt27RprKQfq8uG0KnT4lBH0yS6dv2RCo3lWw4mfcuWUIdjTJvSbAldVdeq6nfu823AIqAvcBowxV1sCnC6+/w04GVVLVXV5cCvwMjmis+YNu/995nW/UIAEhJmhziYptGly48AzOx2BsM3bw5tMMa0MS1y4U1EUoEDgK+BJFVdC07SF5Ge7mJ9Ad+z0ip3Wu11ZQFZ0DY70DBmT1QNxlJaWkqqCAmJhxMbu5b4+LpdwLY1eXl5zJ37P8BD9tZeJHmLEJ/r6Blu7zMzZswISXzGtHbNntBFpCPwBnCdqm4VkYCL+plWp1WMquYAOeD05d5UcRrT2tUZjEWVgg1307VrIYEPq7ah9ncrqVzLH4GctjQOrDEh1qyt3EUkCieZ56nqm+7kQhHp7c7vDaxzp68Ct48MRz9gTXPGZ0xb4m9YUSimuHhySOJpSn6HTAUm3XdfaAIypg1qzlbuAjwNLFLVf/nMehe40H1+IfCOz/TxIhIjImnAQOCb5orPmLYm0GAs5eXFbb4aOuCQqZs2tXAkxrRdzVlCPxyYABwtIvPcx4nAvcAxIrIEOMZ9jaouAF4FFgIfAlepamUzxmdMmxJOg7HUFvC7eTxg96MbE5TmbOU+S1VFVYeparr7mKaqG1V1rKoOdP8W+bwnW1X3UtV9VPWD5orNmLbI32As0dFtczCW2vx9N4jnbq8XfvklJDEZ09ZYT3HGtAEZGRlMnjyZnJwcelW3gEvh/vvb7mAsvjIzM2sMmdq9ewqQwxAOhM8+C21wxrQRltCNaUMyTz6ZlcDQmFnst18+117b9pN5lczMzOohU+fNywcymdnxZEvoxgTJEroxbclHH1GsHVlUOpKTTgp1MM2nb1849FCoSBtoCd2YIFlCN6Ytef99voo4EBUN64QO8OWXcFPWZlixgrz//IfZs2czc+ZMUlNTycvLC3V4xrQ6ltCNaSNEFT74gKiEhRx++GkcdlioI2oBRx5JLpB10027OtQpKCArK8uSujG1WEI3po0YtH07FBbyVWIiERElRIT50EWbNsHeZ+7PtdKJ4rKyGvOKi4uZNGlSiCIzpnWyhG5MGzFq40bmchAPrnqN7dvTQh1Os+vaFUpLhU3qfxjVQJ3RGNNeWUI3po0YVVTE1H6XsWn7EKKjixp+QxsnAkceCR7p53d+OHSoY0xTsoRuTBvQrayMfbdtY6qeRKdOi4iObh9jhR95JHj1H8TWGrspPj48OtQxpilZQjemDTikqIjfSGLO6j4kJobH2OfBOPJIgEzOjzia7m6jgZSUFHJywqNDHWOakiV0Y1q5vLw8HlqyhN4UAqlccklsmx+MJZAZM2bU+G6DB8PVV8OFB+zPV7GxjBkzhvz8fEvmxvjR7OOhG2MaLyMjA4BLL72UrKwsir1ed04Bf/97FqmptIukJgKPPALck4h3zg46lZeHOiRjWi0roRvTivkdJ7yd3bKlCguTj2cbndl/S/toO2DM7mh0QheRbiIyrDmCMcbUFHCc8HZ0y9a8eTD0whG8y0kMt4RuTEBBJXQRmSEinUUkAfgBeFZE/tW8oRljwnkM9GANGwadOsG70WMZZgndmICCLaF3UdWtwJnAs6p6EDCu+cIyxgBkX3MNdUYJb2e3bEVEwOjR8KUewaBt22DbtlCHZEyrFGxCjxSR3sDvganNGI8xxkcmcA89gBSg/d6ydcQRsKZ8EEV0d0ZtMcbUEWxCvxP4L/Crqn4rIgOAJc0XljEGgKlTkd5/AvIZOXJ8u71ly7kfHWZwJMycGdpgjGmlgr1tba2qVjeEU9Vldg3dmObVsaICZs9mav/JxMcvJy5ubahDCpmDD4ahQyfRv+Br+Kww1OEY0yoFW0J/JMhpxpgmMrKoCCoreeZfW9hnn/tDHU5IRUfD/PnZjLoyE775BmrdymeMaaCELiKHAocBPUTkBp9ZnYEwH7zRmNDIy8tj9uzZfFZayjMeD9nbF9K588JQhxVyBQXwUuEfuLz8/+j69ddw1FGhDsmYVqWhEno00BEn8XfyeWwFzm7e0Ixpf/Ly8sjKyqK0tBQFCrxeLrrkcgoLrZp52TK4ZcpgvpAj7Dq6MX7UW0JX1ZnATBF5TlULWigmY9otfz3DlZUVs3z5cpKSkkIUVeswahRERcHMbmdz0sznQh2OMa1OsI3iYkQkB0j1fY+qHt0cQRnTXgXqAa60tLSFI2l94uJg5Ej4bGkGzL4cSkshJibUYRnTagTbKO414Hvgr8CffR7GmCYUqAe4GEtcgHP72px1/dm+MwK+/TbU4RjTqgSb0CtU9QlV/UZV51Y9mjUyY9qZjIwM4uLiiI+NrTE9Pj6ep59+OmyHTG2MMWMgIlJYyBD47LNQh2NMqxJsQn9PRK4Ukd4iklD1aNbIjGmHkpKSyDntNPojgNCtW/vsGS6Qo4+GLVuEkfvvBPuBY0wNwV5Dv9D961vNrsCApg3HGJO5YgUjOnbgsoMO4pNPZuCxQY6rRUU5DzIy4OmnoazMuUndGBNcCV1V0/w8LJkb08S6lZXB7Nl8ltATwJK5H9OmwZEf38bO4kqYMyfU4RjTagQ7fGq8iPzVbemOiAwUkZObNzRj2p/DNm5kk3bh6tXzKCw8JtThtEqVlfD5ou58w0j49NNQh2NMqxHs7/9ngTKcXuMAVgH3NEtExrRjh2/YwLTECyir7ERc3OpQh9MqjR4N4OXNqGPsOroxPoJN6Hup6n1AOYCqlgDSbFEZ0w7FVlZy0ObNvNNtItHRG+nUaVGoQ2qVunWDDh2W8YknA774wrkf3RgTdEIvE5E4nIZwiMhegB1FxjShEZs2gTeSD1bvT2Lil4hoqENqtbp2nceishGUllTa/ejGuIJN6HcAHwL9RSQPmA7c1FxBGdPe5OXlMXnRIuIoY3vJ3kRE5IQ6pFYtIeEbErrOpYhEq3Y3xhXUbWuq+j8RmQuMwqlq/6OqbmjWyIxpJ6oGZCn2et0pBRQVrefeey2pB5KQ8A0JCd/Qe0sScx98kBs//tg63jHtXrCt3N8FjgVmqOpUS+bGNB1/A7IUFxczadKkEEXUdmw99Dj227qVqOofQ8a0X8FWuT8IHAEsFJHXRORsEYmt7w0i8oyIrBOR+T7T7hCR1SIyz32c6DPvFhH5VUR+FpHjduvbGNMGBRqQJdB041ix4jx6PX0PeCPZd+vWUIdjTMgF27HMTFW9EqdnuBzg98C6Bt72HHC8n+kPqWq6+5gGICJDgPHAUPc9j4tIRHBfwZi2Lbl/f//TAwzU0t7l5eUxe/Zsli+/jJKyvbmbNNI3bw51WMaEXND9ULmt3M8CLgcOBqbUt7yqfgYUBbn604CXVbVUVZcDvwIjg43NmLYs+6KLiK81LT4+nuzs7JDE05pVtTfYNZxsAf9kGWvXNVS+MCb8BXsN/RVgEXA08BjOfenX7OZnXi0iP7pV8t3caX2BlT7LrHKnGRO2MjIyyMjIILO4mLukN5ACQEqKDcgSiL/2BhWUk1NSAjt3higqY1qHxvQUt5eqXq6qn6jq7rZAeQLYC0gH1uJcmwf/ndT4vQlXRLJEZI6IzFm/fv1uhmFMK6EKb7xBxd53A/kccsjvyM/Pt2QeQKB2BSsBvvyyRWMxprWpN6GLyE0AqvohcGateX9v7IepaqGqVro/CCazq1p9FeB7IbEfsCbAOnJUdYSqjujRo0djQzCmVRmwYwcsXcpnMcfQqdMiYmOt6rg+gdoV9EPg449bOBpjWpeGSujjfZ7fUmuevwZv9RKR3j4vzwCqWsC/C4wXkRgRSQMGAt80dv3GtDVHbtgAIrz3vxiGDrXb1BqSnZ1NfHztFgewEiX1wQfJy8sLQVTGtA4NdSwjAZ77e11zpshLQAbQXURWAbcDGSKSjlOdng9cBqCqC0TkVWAhUAFcpaqVwX0FY9quIzZsgNGj8fROIiYm2Dak7VfVpYiLL76Y0tJSRARV5+pcQVkZWZdeWmM5Y9qThkroGuC5v9c1Z6qeq6q9VTVKVfup6tOqOkFV91fVYap6qqqu9Vk+W1X3UtV9VPWDRn4PY9qcvsXF7LVjB+dun8z994c6mrYjMzOTUaNGERMTU53MqxSXlFiHPKbdaqiEPlxEtuKUxuPc57iv6+1YxhhTvzEbNlBIT16ZN4hBp4Q6mranNMAoa9Yhj2mv6i2hq2qEqnZW1U6qGuk+r3od1VJBGtOWVd2eVtvR69bxeOx4VIUzz6z7PlO/mJgYv9Ojo6P9bm9jwl1Qg7MYY5pW3gMPMGnHDgp4hMjId5g/P9sGF2mktLQ0VqxYUeO+9HhgaL9+oQvKmBAKuqc4Y0zTyMvLI+vWWykAQKmoKCArK8taaDdSUlISOTk5PiX1ZP5DDKdHWjnFtE+W0I1pYZMmTaK4vLzGNBtdbfdUNZA79NDT+G3Nci7p0ZmDrF93005ZQjemhdnoak0vOnozSb09cPTRHLhpk9MDnzHtjCV0Y1pYcufO/qfb6GpBmzFjRp02B+++C1f8djs9yspIdq+r126QGKiBojHhwBK6MS0su0MHoqXmTSI2utqeW7IEnpy5L6vpY9Xupl2yhG5MM6oau3vmzJmkpqaS989/krlmDfv0foCqAQVtdLWmMXYsQB77s4Xrf/2V1NRUCgsLQx2WMS3GmoMa00xqj91dUFBA1t/+xnY6srDwGvr3T2TAgMl2u1oTmT8/D8hiE051e0FBAR6PlVlM+2F7uzHNxN/Y3cXl5dwaGUllpdCz56chiiw8/fWvk4Ca29vr9bJ8+fLQBGRMC7MSujHNJFCr9aKKLQwcCB06/NrCEYWnqhqOQKXxQF3EGhNurIRuTDMJ1Go9NjqGt94CqXe8QtNYgbZ3oC5ijQk3ltCNaSb+xu6OAVIHpDJ0aGhiCmf+tneEx0NaWlqIIjKmZVlCN6aZZGZm1uiaNAVIir8G1QtDG1iYqtrekZHdACEB5wfU4sWLSU1N5corr6x5x4F1tWvCjCV0Y5pRVdek/+vZk5md92dF8cOUlvYIdVhhKzMzk332uQx4gR1EUOz1Ak6L9yeeeKLmHQfWf74JM5bQjWlmcZWVjN6wgZcG3wFAz54fA/57OzN7rlu3ecCtlFJZ73LWf74JN5bQjWlitbsXPXzDBmK9XnLXH0fnzj8RF7c2dMG1AxERJcDKoJa1/vNNOLGEbkwzG7duHZ9GjWDB8g4kJX0U6nDahYiIbkEtZ/3nm3BiCd2Y5lRYyMFFRXyV0JPhw/NYseKv1iirBSQnDyYqKr7eZaz/fBNuLKEb05xyc4kAPohfxJIlWZSWlgDWKKu5JSdH8eyzOSRERCBASr9+XHHFFbvuOLD+800Ysp7ijGkuqvDss3zUYSjfrl5GWVlJjdlVjbIsqTSPU07J5NnU7/jv0n8TcccdcPHFLFy4EMAaI5qwZCV0Y5rLnDmwYAEvD3+dsrKdfhexRllNr+rugWnTYPrSB/lv1GHOYOnGhDlL6MY0l2efpSSmK6/P34cOHfw3vrJGWc3nmGMAvDwfexp89BGUlDT0FmPaNEvoxjShGuOfP/kkf0o+ja1bhWuvrdstqTXKal6JidCp02I+qzjGSeaffBLqkIxpVpbQjWkidcY/V+XJX1+le/c87rmnVjew1iirRSQkfMPakv1Z3yEV3nsv1OEY06wsoRvTRPyNf+7VEsrLJ+Hx7OoGdsyYMeTn51sybwGJiV8CHqYPvRamTnUaKhoTpqyVuzFNJFADt61breFbqMyZk8OCBTB0TgL8YTUz3n0XDjww1GEZ0yyshG5MEwnUwM0avoWOCOy3H8hJJzovrLW7CWOW0I1pIv7G446Ls4Zvofbbb/CHm3rw2ZDLa1xHr93nvjFtnSV0Y5pIZmYmOVdcQQoAgkgKjz1mDd9CrUsXeOUVeK3zxfDdd7B6dahDMqZZWEI3pgll/vwzM6IS8XiKycrK5w9/sGQeanFxMG4cvFewPwrw9tshjsiY5mEJ3ZimUlAA77/PXZ0uxuuN5Q9/qLuIjYEeGqecAgVropmfdiq88UaowzGmWVhCN6apPPUUAG+XTqRDh2WMHBnieEy1k092/r6Xeg3MnAnr14c2IGOagSV0Y5rA2COPZMN991F5wsl0S/qE5ORcREIdlanSuzeceSbEjxgCXq9Vu5uwZAndmCZw2MaNdC8rI+KKLPr3f42ePa2b0dbmjTfgun/2hoEDyXv44V1d9NrY9CZMWMcyxjSBU9euZUl0D75cfyIffHAycXGhjsj4U+kVcgYM50//fZ1Sd1rV2PSA3ZFg2rRmK6GLyDMisk5E5vtMSxCRj0Rkifu3m8+8W0TkVxH5WUSOa664jGlyixZx8KZN3NHxCiZe5GHBglAHZAI54gi4YcbXFNeaXjU2vTFtWXNWuT8HHF9r2s3AdFUdCEx3XyMiQ4DxwFD3PY+LSEQzxmZM03n4YUoR3iu5kBEjYMSIUAdkAhk9GnaWrvI7z8amN21dsyV0Vf0MKKo1+TRgivt8CnC6z/SXVbVUVZcDvwLWRti0fps2wfPP83DCKWwrGcDll4c6IFOfs88GsC56TXhq6UZxSaq6FsD929Od3hdY6bPcKndaHSKSJSJzRGTOerv1xLQgv12FPvUUecXF3Lr5K8DDnXdaA6vW7OCDISEhmwhPzUYONja9CQetpZW7vxt8/I5zqKo5qjpCVUf06NGjmcMyph4VFeTdey9ZHg8V3vWAsnKl08DKknrrJAIXXJAJMpk+eBBsbHoTPlo6oReKSG8A9+86d/oqoL/Pcv2ANS0cmzGN8/bbTCoqotjrrTHZGli1bpdfDtOmZfLPvv0pEyF/zhxL5iYstHRCfxe40H1+IfCOz/TxIhIjImnAQOCbFo7NmMb5z38I1IzKGli1XvvsA8ceC5/06k6kKrz2WqhDMqZJNOdtay8BXwH7iMgqEbkYuBc4RkSWAMe4r1HVBcCrwELgQ+AqVa1srtiM2WNz5sCsWSTE9/Q72xpYtW7LlsHH667jp/gekJsb6nCMaRLN1rGMqp4bYNbYAMtnA9YqxbRKeXl5zJ49m9LSUlJTU8nu1YvzOnWmQ5cHKCq5HNVddzZbA6vWb8UKWLnyfB7p+RU5Xz7uZPgBA0IdljF7pLU0ijOmVfDXkj0vL4+srCxKS52+xQoKCsj6+mtu2+8sVqyawEUX5RATEwNYA6u24ogjICpqEx9UnOFMsEaMJgyIqt/G5G3CiBEjdM6cOaEOw4SRqmTuO8RpamoqBQUFdZaNi+1PfIcVrFwJJ5xQ932mdevb9y1+++0ENh92Jp3WLYXFi/E3oo6/fcKYUBKRuapapwsrK6Eb04BADdxKdq7issuwftvbqNdfPwOvN5a3Bv0FfvnFaRdhTBtmCd2YBgRq4Na7dzLXXtvCwZgmM2oU7L8//JY8EmJirHGcafMsoRvTgOzsbOLj42tMi4+P5/77s0lKClFQZo+JwLx5cNPtcczo1IlNTzwB5eWhDsuY3WYJ3ZgGZGZmkpOTQ0JEBAJ06diX9PQcxo+3hm9tncc9A77bfS+6lZfDBx+ENiBj9oAldGNcVbemzZw5k9TUmn2yZ552Gks9Hj7umoxErqJXr0wifMYDnDFjhjWaaqMuuACeWjWFDdHRkJMT6nCM2W2W0I0hwK1pvn2yP/YYXcvL+Wv8dWzeDMuXX1Z3oBbTJh14IGzbvg9PJY52Suirdg2vWt+PPGNaG0voxgCTJk2iuLi4xrTqPtm3bYP77+ezbr2Yu2ECY8dC584/hyhS09TGjweo5AXJBK8XnnkGCOJHnjGtjCV0Ywh8a9qKFSvg0Udh40b+1vFKysq6c/PNLRycaVbTp+fh8fRj4ZpLSImNJe8//4HKyvp/5BnTCllCN4bAt6Yl9+sH998PJ51EWd8fGDDgccb67bzYtEVVpXCv9zdAWbFzJ1lFRZwcoDMhsIF3TOtlCd0YAt+aln3IIbBpE9x5J1999TpLl17przMx00b5LYUDc9asqe7OtzYbeMe0VpbQjWHXrWk1+mT/97/J/Phjyk4+k/H3H8Q37oC+1lAqfAQqba/zetm/Xz//P/Js4B3TSllCN8aVmZnJqFGjGDNmDPn5+WQuXQpbtvBc+r955RUoKrKGUuEm4KUW4LLKyro/8mzgHdOK2eAsxvioHojjhRdg0CBKzzyXgZ8/Q79+8MUXkJbm/9pqSkoK+fn5LRus2WNVP9B8q91F4rkjFq6orKDH9u1kHHMMYIOzmNbDBmcxxuVviNQ6brsNVHl63/tZuRLuvNPpKrTe1vCmzal9qSUhIQXVC/lnOSSVlZHapw+FhYUhjtKY4FhCN6aWAdu3w5Qp7LzyBv7+ZCKjR8O4cc68gFW01lCqzfK91HLffdnAFIorilGgYMMGfvnlF0vqpk2whG6MjxkzZvBMjx7QtSty05+JiXmcbduuqW7ZHrA1vDWUCgt33z0Jp537Ll6vl+XLl4cmIGMaITLUARjTqnz8MXz4ITz4IDG9utG//6s1Zlc1iLr44ospLS0lJSWF7OxsaygVJgJdOikrK2vhSIxpPCuhm3al3lvOysvh+ushNZV/llzLiy/6X0ed1vCWzMNGwEsqffq0cCTGNJ4ldNNuNHjL2eOPw/z5LLs5h7/dGcknn4QwWBMSfi+pANnDh4cmIGMawarcTbsRqG/uiy++mNcfe4y3FiyA445j0oxxREZCenoeubmzKS0tJTU11arWw1jtW9KcSyplxMYmk3NAHzJnzYLNm6Fr11CEZ0xQrIRu2o1A10dLS0u5dPlyKCnh20v+j5dfFo47Lo+//MU6kGmPqi6ppKZOZufOfA666RnYuhUefjjUoRlTL+tYxrQbqQEG3OgYFcW28nK8f/4Lo2fdy9KlEBOTysqV1oFMe5WRkUFZWVe+++5tLroIHl9zOnz2GeTnQ+fOoQ7PtHPWsYxp9wLdcna7x8P66Gjkr5P405+cS+mrVlkHMu1ddPRmMjNhyhQouvYOZ5Cexx4LrmMiY0LAErppN/wNwHLh8OE8WlpKz7Iy0obtT0lJHmedZR3IGMcf/wilpTBjczqceCI8+CBxlZWhDssYv6zK3bQ7VaWrS087jawbbqjRjUh8fDw5OTkAdfr4rppnDePal99+g169gNmz4dBDeWLAAF7p358ZM2bs6vvf+nk3Lciq3I3xpcqkW2+t1SeY0+p90qRJ/odTtWTeLvXq5fzdNnQUHHMM56xcSYyV0k0rZAndtEvHFxayYudOv/OqrpNbBzKmyi23wAEHwAsHj+LA8nL+N2sWqamp1se7aVUsoZuwEWxjpYSyMq5cupRkt/Rdm10nN7WNGgVLl+ZxyQMPUnXvQ0FBgQ3cYloVS+imfVHlzYQEOkdEcNvf7sHpB2wXG2jF+HPqqRAVNYmysroDtyxevLhuN8LGhIAldNO+5OTA++/Dffdx0aQ/cdddOURHO0ndrpObQESgoiLwLYvW8ZBpDayVuwkbDbY4/uUX50Lo4Yez6aUP6ZboCe59xgApKamsWFG3s6Gay1jHQ6b5WSt3E9bqHUUNnJHUzj8fYmMpemgK+w71cP/9oYnVtE1//3s2sbHx9S5jHQ+ZULLBWUybF2gUNdg1fjl33w3ffou++hpX3NWbjRvhmGNCFbFpi6r2JWfgllK/y1iDShNKVuVu2rxAfbTHxMQwatQoZkyaBMcdBxdeyAtHP8sFF0B2Ntx6awiCNW3e4Yefwty5Y/B6b6e83DoeMi0vUJV7SEroIpIPbAMqgQpVHSEiCcArQCqQD/xeVTeFIj7TttQ3ilqP0lI47zwYMoT8Pz/GVaNg9Gj4y19aOEgTNiIjtxEbOw6vtzcezyWUle4k2eMh+1//smRuQiqU19CPUtV0n18ZNwPTVXUgMN19bUyDAlVzxsTEcNvChbBzJ7zxBvOXxdOpE7zwAkREtHCQJmyIwIABT7JtWya9ej3BhQcdRL4ImY2oLbQBXkxzaE2N4k4DprjPpwCnhy4U05b4G0UtKiqK6PJyhm/dSmpsLPuefjoPPJDB0qWQmhqaOE14mDFjBt999yTnnAMrV57D4qhkuOEGeOop+OKLUIdn2rFQJXQF/icic0Uky52WpKprAdy/PUMUm2ljave7npiYiKiyzetFgYING/j556UUFhYSGxvaWE34yM4G1UjWrDkDbr8dkpPh8sudOyqMCYFQJfTDVfVA4ATgKhE5Mtg3ikiWiMwRkTnr169vvghNm1BVdenb73rHqCjKKipqLKdazvLl+aEJ0oSlvfaCjz+OYsmSCdChAzz6KMyfD3fdBQSuVm/wFktjdlNIErqqrnH/rgPeAkYChSLSG8D9uy7Ae3NUdYSqjujRo0dLhWzaiB6lpaz47Te/80pLd9oJ1DSpo4+G6GjYtg0qTjgFJk6Ev/8dvvrK7/KBbrG0fdI0hRZP6CLSQUQ6VT0HjgXmA+8CF7qLXQi809KxmbYttrKSe+bPJ1kk4DJ2AjVNbc0a2HdfePxx4D//gf79YcIE4vwMsTpp0iSKi2v2B181ZK8xeyoUJfQkYJaI/AB8A7yvqh8C9wLHiMgS4Bj3tTEB1ai6TElhQnEx+xQXk33jjfX26GUnUNOUeveG/faDv/4V1mzvDM8/T97Spcz98ss61eqBbrG0HuZMU2jx+9BVdRkw3M/0jcDYlo7HtC1V1yQvvfTSmlWXK1aQtWIFXHghmfffD+np/OEPV1JevtXveuwEapqKiHP5fNCgMtLTZ/HQQ2vJioyk2G3H4dtzYXJyst9OkKyHOdMUWtNta8YEzW/VJfCXj2cwa5bT8v2www6obvlem51ATVPae29ITs5l/fqjuf76SdXJvEpVrZC/WyxtyF7TVCyhmzYpUAl79eoVnHEGbN/uvE5LS7MTqGkRyckv0aHDr6xf73/fLCgoqHOLpQ3Za5qSDc5iWj3favbZs2dTWlpKREQElX4aHUEyzz8PHTs6r5KSkvjrX/9aPaBGSkoK2dnZdgI1TSovL49vvvmc0tKBAffNqiSemZnJ5MmTARuy1zQtS+imTSgsLKxxzdx/Mo9n4sRsTjjBeeV7srQTqGkutW9F87dvCs7YAqmpqVY7ZJqNJXTTqlW1ZA80XOUuKZx1VjbPPmslb9Oy/LXncEQAlYgIVaNaVjWQs2p20xxs+FTTalWVfPyfLHc58sgMrrvuU04/3WlxbExL8ng8+D+PCiK9cHu0riElJYX8/Pxmj82Ep0DDp1qjONNqBS757BIdHY+IcsYZlsxNaAS6YyIysjOq/nst9G3UaSOvmaZiCd20Cv5Oag3fKx7PUUfl2HVxE1KBbkV77rnH6NTJf7JPjoiAdX57tzZmt1lCN61W/feKpzBqVA5Tp9p1SBNa9d2K9uij2URF1Ur2MTFki8DYseQ98YQN1GKajqq22cdBBx2kpu3Lzc3VmJgYBTQlJUVzc3Od6f/+t8aLKM5wuwqoSLRCro4fr1peHuLAjfExZswYHTNmTJ3pvvt3v37u/j19uuZGRdXZv+Pj46v3//rWado3YI76yYnWKM60mKoqdd8qcn8N3+Lj4zm8e3deWbuWaZGRXFFRwbbycvr3TyEqKpsjjsjkqacg0u7RMG3EmDFH8f33jzF06BCmT4f4eEjt1YuCwsI6y/o2mPN3zPgT7HImPARqFGenRBNSgUaf+nnFCnbExZH53Xf8X9a1qEbw+ecfsG2b02mMNYAzbYmIkpz8Il9/fQ/nnQdvvAErAlxDr2o74nvLZmpqKnFxcSQlJVnSNoH5K7a3lYdVubcdgarVpVaVY+1Hv34pGhf3d+3W7Wv1ekP8JYzZQ488ogqqV16pmpyc4nefrzo+4uPja0z3eDw6ePDgOusMdGyZ8EWAKveQJ+U9eVhC33MtcY3O38mp6lphSor/k1rNR7xedZWdpEx4uOkm58x7/vl+jgvQM/v0qfe4qNHOpJ5jy4QvS+imjpb6ZR/o5JSSkqK5zz+v8VFRDSb1lJSUZonNmJZWWan617+qrlxZ8xhM7NZNu4JKgz9wG/5BbMdLeAuU0K1RXDsVqDHa7nRJ2VCDnEA9aYkI3kMOIW/2bG7weFjn9Qb8DBHBW898Y9qiykoYNuw2KitfY+XKFQ12pOQrJSWFFStWBD627HgJW9ZTnKkhUGO0SZMmVb8OpgerqoY7ge6jzcjIIDo62u97+6mybc4cMl98kX1Hj2bUqDNITk7xu6yNX27C0fPPw8KFd7F2bUmjkjk4jecCHRdNcbxYD3ZtkL9ie1t5WJX77gvUGE1EVDW46viGGu74rqP250WBdnGnpaSk6I035mr37qqnnmrXBE37UVmpmpWlCvU3DvX3CNR4rimOF2to17ph19CNr3qvawd5kqiv4U5iYqJGR0f7nyei0ZGRdRq+9e+fq4sX28nEtC9er2qXLv6PpdiYGL2yWzeND3ANXXXPjhd/jWKtoV3rZwnd1LA7Lc99G9qMGTOm0SUKQFM6d9aU/v39zktOTgkYrzHhLDc3V6OjAyfR3Dvu0L4iKqApcXGa+9BD9a4vmLtXAv0QsIZ2rZ8ldFNHY+8N91cd39iHiDS4fmPaI+e4iqs+Hu+9t1aJuKRE9e67VePjVWNinKby27YFWM+u43rw4MGNKoXb8dn6WUI3fvn7JR/oF3pMTIzfE0FjHgkJKdqxo5UAjPGn6nh86y3n7DxpkmpFRa2FVq5UPe88Z4Hu3VXvu091+3ZV9Z+ofY+vYErh9R3/pnWwhG6CVt9JISIiYreTuUi8Qq7uu69dozOmPsXFqhdf7JyhjzhC9ddf/Sw0e7bqccc5C/XsqXrffQEvZwVbCgeC/lHgjw0m0zIsoZtGqa+FesCTRa3XUVFRGhkZrU4L3hRNSMjV3FynEZA1fDOmYVOmqHburNqhg+qzzwZY6IsvVMeNUyW4Tmka+mGekpKiV1xxRYPHf+3jNthj2o79PWcJ3eyW4LpmRVM6dNDcf/yj+kBNTnYO1HXrVPv3V733XqfUYYxpnBUrVI89VvWVVxpYcO5cTenQYbdr0PyV5Bs6/quWC7ZlvN1m1zQsobdTe7qjB1M6j4+Lq17vTz+pnn++6iGHaPVgKmVlTf2tjGlffAcmevBB1T/9SXXr1rrL5ebmanxcXJMk9ZSUlKCO//quu9duF9McLejb4212ltDboT3e0b1eTend2+8BKD4HYm5urn78serxxzt7VHy8c8LZubN5v58x7dG11zrHWe/eqpMn1/3BXONyWQPJuKG7ToKpoatvHdQ6TzRHC/r2eJudJfRWqjmqihq6razeHb2sTHX6dNXrrlPday/Npe618do/Cl57zdmTkpJU77lHdcOGPf4Kxph6fP216qhRznG3116qH33kf7kGzwUxMZrSpUu9Sbihu1rqK6HXPm8kJiYGlfgbY09+JDTF+TcU1f2W0FuhpqoqqjFiUz09tPnd0b1e1SVLNHfiRE3yeJyOK0BzIyJUTzhBNSdHc594orr6LTk5RW+7LVcvuUT1iSecVezYofrMM85tssaYluH1qr73nmp6uupXXznTNmzw31bF77kmMlJz+/Xz/6M9JkZzH35Y1eutcS29dvKs7xq6v0diYmLQt70Gmxx3t4TeFOffUFX3W0JvhZqiqmh37guvri6Pj9fchAT/B7TPdXFV1cWLVW+/XXXAAGeviY93XhtjWp7vj/iqBqiqqpdeqtqjh3Nsrl4d+D01kuX69Zr7xz9qSqdOu37Qg3Ogd++uOnas6g03qD7zjObefrvGBSiNViX++qrfRaRGHA3dBltfcqzvTpxgkmp9tQrN/WNiT1lCb4Wa4npSsK3QAx4wERGaGKBlbJ8+KdWfc9xxqiLOsT1liv8GOcaY5ldfqXDmTNWTT3bO7BERqqeeqvrf/zbyA0pKnCL/ww87N8OPGKEaG+ustOrRo4fqqFGae+ihmugm5ZSePTX3n/9U3bJFU5KTg0p0wd4SWzvJ7sm98sF+djA/CkLVq54l9CbS1Ndc6tvpa3+W772hDTUy8feIaHTCF12zxol5/nzVVauacEMaY3ZLMKXCJUtUb75ZtVcv1SuvdKZVVqrOmuX8bbSKCqd3m6lTVR94QPWSSzR3yBCNr10yxind50ZF1Z0XGam5556r+vTTqm++qfrppwEb3TaUZBtTMq59STLSHRgqmE6yAp2LQ93vvSX0JrC710sac427sdekgjoIYmI09+mnG5X8wemmdfPmFtq4xpigNKZUWFamummT8/yLL5wzfu/eTtX8O+9U9xi7WwIms65dVW+8UXMPPVRTYmJUQBPdR+0qfX+X+xpMsvHxAVvvC+jzZ56uCZFOsk6Mi9PoPendEvSuCSdrTFTN0SFjoyI1d8IEzc3M1Jgo/+tP6dJFc886SxfccaXq2rW7v6H9CJTQxZnXNo0YMULnzJnTJOvKy8tj0qRJrFixguTkZLKzs8nMzCQvL4+LL76Y0tJSIiIiqKys9Pv+lJQUTjzxRKZNm1ZjHQBZWVkUFxc3GENKUhInpqfz8vTpbKqo2O3vEhUVRefOnSkqKqqO47zzMunfP5XVqwvqLJ+YmEhxcQklJbtijI+PJycnh8zMzN2Ow5j2RFWp1Eq86sWrXiIkgqiIKCq9lWzeuRmvemvM7xrblY7RHdlZsZMVW1ZQ6a2ssUxyl2QS4hLYWrqV+evmV8///eG/Z92adXU+v0fvHjzx8RNUaiWV3kqOTjuapI5JLNu0jE+Xf0pJqZfvf6jk+++9LFxcSenc3xNTkcRzH84jP/JDSnZ68URUgjgxXHvItXSP787M/Jm8+/O7NWKr9Fbyf6f+H37zh8CZL59J7hm5xEXFcck9l/Ds3c/iLfNWL+KJEp7/081kjhzJ797I5p33vqd8i/9zq1+CkzZriwMqgPLgVxVwXUHMTwEKh8POfGBL4Lem9O5N9v33N9n5VETmquqIOtMtoTvJvHbSjY+P58ILL2TKlClBJWN/4mNiiIuKYuP27Q0uK8ALQBawe5/mSElJ4a67sjn44Ex++AG6d4dx46CoCBIT8+p8QmxsPE89lQPg9weNaXqquuuk74nAIx7KK8vZWbGzenrVo1tcNyI9kWwv216dFHwfqV1TifREsm7HOgq3F9aYpygH9DqACE8EyzctZ9XWVXXeP27AOESEnwp/In9zfo2Ttkc8nLnvmQDMWjGLpUVLa7w3NjKWCcMnADD1l6ksLVpaI2F1ienCZSMuA2DKvCks27Ssxvp7d+zNH0f9EYAHv3yw+vOrHnsn7M2fD/8zADd9dBOrt62uMf+AXgdw6xG3AnDBWxewoXhDjc/PSMngb2P+BsC458exrWxbdVL0qpczBp/B7Rm3AzD40cE1kpVXvVx8wMXcnnE7O8p2kPLvlBrr9qqXmw+/mb+N+Rtrt62lz7/61Pk/33/M/fzpsD+xZOMSBj06qM78J056gstHXM53a7/joJyD6szPPSOXzGGZzMyfScaUjF0zfgTeo2bSigJOAYbtmjT9gukcnXY0L89/mXPfOLfO+h8d/g3LPj+YvX43mav+m1Vn/mP7LuT00fvy+spHuHX6LXjEQ4Qngghx9tnoR6JZvXJ1nfdFdotkcPZgvrr4KzpGdyShdwKbfttUZ7nk5GQKCgp49JtH+e/S/xIhEaz+YjULX15I8cZiIjyBC1D+RMVEERkTScnWkqDfAyAiXPXXieTcl0dZaVmj3gsQGxfLXX+/lX8/8ARrVq8NuFxTFpIsodcjNTWVgoK6JdeWlJKYSIUHVq/fuAdrEVKO/pBVq5XKSi+Il9GHxPP5C0cBcOuTs1i65DU+eelFNv62kcReifzhT3/gvhvuA+D9X95nffF6Jxm4SSepYxKn7nMqAHk/5rGxZGON+aldUzlryFkAPPrNo2zZuaVGQhnSYwi/H/p7AO6ccSfF5cU15o/sO5Lx+40H4OppV9c44SrK2LSxnLv/uZRWlHLxuxejaI2T6ln7nsX4/cazeedmLnjrgjrzLz7gYn4/9Pes3rqa8948r0Yy9aqXPx/2Z84achY/b/iZ8W+Mr5Pw7h17L6cNPo1vV3/LOa+fU2f+M6c9w/F7H89HSz+qnu8bw/vnvU9GagavLniVc984F696a/zHvr7ka0b2HclT3z3Fpe9dWuc/uvDKhezbY18e+uohbvjfDXXmr7x+Jf069+PumXdz24zb6szf/JfNdIntwk0f3cT9X95fZ37lbZV4xMMVU6/gyblP1pgXFxlH8STnx9/5b55P3k95Neb37NCTwj8VAnDay6fx7s/v1pi/V7e9+PXaXwE4esrRfJr/KR7xOIlBIhjeazhfX/J19fx5v82rThoe8TCq3yjeOuctAI554RiWbVpGhEQQ4YlAEMakjOGJk58A4MS8E9lQvGHX+j0RHJ16NHcedScAZ75yJiUVJQhSnZTGDRjH1SOvBuC8N85DRKqTlUc8HLvXsYzfbzxllWVc/+H11e+rWm7cgHEct/dxbC/bzv1f3F/jsz3i4ajUozik3yFs3rmZ5394vvp7V8U/Onk0+/bYl6KSIj5Y8kGNZBnhieCg3gfRv0t/ikqK+Hb1t9XrjZAIpr8znWcffJbVq1bTr18/LvvLZZx01kk13t+/c386RHdgR9kOikqKquOrmt81tiuRnkjKK8up8Fbw2cwI3nvXw+yvIvhhnlBRAd26wcaNIAIvvwxlZTB0KAweDG+/7b8gVDtpeTwevyV5EcHr9daZXsVfQau2iIgIvF5vdSFkwoQJ/msN6pGSkkJ+fn51Le3u5IKUlBRWrFjR4GdXfdaesoRej0A7XEupOgjOn3B+/VU/DYjoFEfljTV/naZ1HcCyPy4FYOzzY/lk+Sc15g9PGs68y+cBMHLySL5d822N+aOTR/P5Hz4HYN/H9mXxhsU15h+/9/F8kPkBAP0f6s+qratqzP/dkN/x6u9eBSDpgSS27NxSfUITES4YdgGPnfQYAL0e6IWieMSDIHjEw8UHXMydR93JzoqdDH18aPW8qpPbZQddxrWHXEtRSRFjnx9bY54gXHXwVUwYPoHVW1eT+WZm9Qmt6qR89cirOXnQySzftJzr/ntdnfVfdfBVHJlyJD9v+Jnsz7NrnPQF4cqDr+SA3gewYN0C/m/u/1XHXbVc1kFZDEwcyE+FP/HqglcRkeqTskc8TEyfSN/Offmx8Ef+t/R/NRKKiHDe/ueREJfAT4U/8fXqr3fNc2M8Y/AZdIjuwML1C1m4fmH1uqs+57i9jiMqIoolG5dQsKWgzvoP7384IkLB5oIaCbHqpD+kxxAACrcXUlxeXOP7R3gi6NWxFwBbS7dS4a2oTlhV64iNjAWcWgkRaeQebUKluBjmzoV16+As5/c6I0Y406r07Qv77JPH0qVOzV6PHslccUU2l16aSa9eEBHhLBeowBRMcmsoydb+UdDYwlljfoDUR0SqaxwaWq6+HzGN+Ly2kdBF5HjgP0AE8JSq3hto2VCV0MUjqHf3t5tERBAdG0fpju3EdUkk57F/c37m+XTs0psdW3/z+56UlBQ0fiSrl8+kcmfd62fx8fHc8eAdHHbiYdUn66oT6rAkpx5uadFSdpTvqE4GghAbGUtatzQAVm9dTVllWY0TfmxkLN3juwOwqWQTilYnY494iPJEERcVB0BpRWmNz65azhjT9pWXw9KlsGABLFoES5ZASgrcdZczv0cP2LDBee7xQO/eMGEC7Ldf3ZJ2TEw8t92Ww6WXZtKjR8OfHeyPAn+let82RQkJCQA12hfVrgIP9FkNtaHKzs5usEahuUvoIW+p7vvASeJLgQFANPADMCTQ8k3Vyr0xLcqjouL1zDNz9ZRTcjUycndaoaco5KrbyFOjo507QlRVJ0zI1YiImuuMifHfit63E4f2MLqQMaZ1mz/fuavt8cdVJ01SnTjRea6qOmVKrnvukxrnwBtucOZv26aakKCamqo6fLgzBvyJJ+4aYW7y5Lrn2+joeL3vPue8t3276qefqn75perdd+dq797OubF/f+fcWFamWlTk9J9RUuKcc30HvPFV391MDd3pFEyvek2BtnDbGnAo8F+f17cAtwRavilvW8vNzdWEBP+3YVQ9unXbtSPGxKjGxeVqRMSupDp27BUaGxt4Hb17p+hHH6nOmaO6dKnq5s11dypL1MaYcFRerlpYqLpggerMmapvvKH6/ffOvK1bVa+6SnXCBKcznIwM1YMOUn3qKWf+smWqHk/dHwWPPOLM/+EHrS4k+T6ee86ZP2uW//mvv+7M/+gj1U6dVLt1czrH69QpVz2eXefhP/85V/faS3XgQNVevXI1MtKJo3dv5xz91luqBxygeuCBTtwjRqimpeVqnz7Ncy4PlNBbVZW7iJwNHK+ql7ivJwCHqOrVPstk4TTVJjk5+aCmbMy2ahU88kge//lPFqWldRt6nHVWJpWVEBu76/qQP4FazdttYMYYs/vKy53r+yUlzqNbN+jaFbZvh2+/hdJSp+FeWZnz/NBDYcAAWL0aXn/deX/Vo7ISxo+Hffd1LiHk5EBFBXi9zrzKSrj+ehgyBGbPhkcecX4GeL27Hn//OwwaBB995Mz3emv+ZHjySeeyRFNrE9fQReR3wHG1EvpIVb3G3/JNeR+6r0D3pLf0Oowxxpja2kpCPxS4Q1WPc1/fAqCq//C3fHMldGOMMaa1CpTQPaEIph7fAgNFJE1EooHxwLsNvMcYY4xp9yJDHYAvVa0QkauB/+K0eH9GVReEOCxjjDGm1WtVCR1AVacB00IdhzHGGNOWtLYqd2OMMcbsBkvoxhhjTBiwhG6MMcaEAUvoxhhjTBiwhG6MMcaEAUvoxhhjTBiwhG6MMcaEAUvoxhhjTBiwhG6MMcaEgVY1OEtjich6oPb4qd2BDSEIp7Wy7VGXbZOabHvUZNujJtseNbWG7ZGiqj1qT2zTCd0fEZnjbxSa9sq2R122TWqy7VGTbY+abHvU1Jq3h1W5G2OMMWHAEroxxhgTBsIxoeeEOoBWxrZHXbZNarLtUZNtj5pse9TUardH2F1DN8YYY9qjcCyhG2OMMe1Om07oIrKPiMzzeWwVketE5A4RWe0z/cRQx9pSROR6EVkgIvNF5CURiRWRBBH5SESWuH+7hTrOlhJge7Tn/eOP7rZYICLXudPa8/7hb3u0q/1DRJ4RkXUiMt9nWsB9QkRuEZFfReRnETkuNFE3n8ZsDxFJFZESn33lydBFHkZV7iISAawGDgH+AGxX1QdCG1XLEpG+wCxgiKqWiMirwDRgCFCkqveKyM1AN1X9SyhjbQn1bI9U2uf+sR/wMjASKAM+BK4ALqV97h+Btkcm7Wj/EJEjge3A86q6nzvtPvzsEyIyBHgJZ5v1AT4GBqlqZYjCb3KN3B6pwNSq5UKtTZfQaxkLLFXV2h3NtDeRQJyIRALxwBrgNGCKO38KcHpoQgsJf9ujvdoXmK2qxapaAcwEzqD97h+Btke7oqqfAUW1JgfaJ04DXlbVUlVdDvyKk9zDRiO3R6sSTgl9PM4vxypXi8iPbvVJu6hCVNXVwAPACmAtsEVV/wckqepad5m1QM/QRdly6tke0A73D2A+cKSIJIpIPHAi0J92un8QeHtA+9w/fAXaJ/oCK32WW+VOC3f1HSNpIvK9iMwUkSNCE54jLBK6iEQDpwKvuZOeAPYC0nFO5A+GJrKW5Z54TgPScKrDOojI+aGNKnTq2R7tcv9Q1UXAP4GPcKqXfwAqQhpUCNWzPdrl/hEk8TMtPK7b7p61QLKqHgDcALwoIp1DFUxYJHTgBOA7VS0EUNVCVa1UVS8wmTCrEqrHOGC5qq5X1XLgTeAwoFBEegO4f9eFMMaW5Hd7tOP9A1V9WlUPVNUjcaoVl9B+9w+/26M97x8+Au0Tq9hViwHQj/ZxGcvv9nAvPWx0n88FlgKDQhVkuCT0c/Gpbq/a8K4zcKrW2oMVwCgRiRcRwWlXsAh4F7jQXeZC4J0QxdfS/G6Pdrx/ICI93b/JwJk4x0173T/8bo/2vH/4CLRPvAuMF5EYEUkDBgLfhCC+luZ3e4hID7dBNiIyAGd7LAtJhIRBK3f32tdKYICqbnGnvYBTXaZAPnBZ1fWPcCcidwLn4FQdfg9cAnQEXgWScZLc71S1dqOPsBRgezxF+90/PgcSgXLgBlWdLiKJtN/9w9/2aFfnDxF5CcjAGUWsELgdeJsA+4SITAIuwjmmrlPVD1o+6ubTmO0hImcBd+Fsi0rgdlV9LwRhA2GQ0I0xxhgTPlXuxhhjTLtmCd0YY4wJA5bQjTHGmDBgCd0YY4wJA5bQjTHGmDBgCd0YA4CIqHvLVtXrSBFZLyJTQxmXMSY4ltCNMVV2APuJSJz7+hicEQyNMW2AJXRjjK8PgJPc57V7YBwpIl+6A1F8KSL7uNOHisg37njQP4rIQBHpICLvi8gP4ow3fk4Ivosx7YoldGOMr5dxuvaMBYYBX/vMWwwc6Q5EcRvwd3f65cB/VDUdGIHT3/fxwBpVHe6OFf1hC8VvTLsVGeoAjDGth6r+KCKpOKXzabVmdwGmiMhAnG5Ro9zpXwGTRKQf8KaqLhGRn4AHROSfwFRV/bxlvoEx7ZeV0I0xtb2LM478S7Wm3w186pa4TwFiAVT1RZzhi0uA/4rI0ar6C3AQ8BPwDxG5raWCN6a9shK6Maa2Z4AtqvqTiGT4TO/CrkZyE6smuqNMLVPVh93nw0RkMVCkqrkist13eWNM87CEboypQVVXAf/xM+s+nCr3G4BPfKafA5wvIuXAbzijTx0M3C8iXpyRzK5o3qiNMTbamjHGGBMG7Bq6McYYEwYsoRtjjDFhwBK6McYYEwYsoRtjjDFhwBK6McYYEwYsoRtjjDFhwBK6McYYEwYsoRtjjDFh4P8Bgz9WLOMxHgQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbe6.txt\n",
      "value saved to N_2hbe6.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BE_hist6;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_2hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbe6.txt\")\n",
    "with open(\"N_2hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbe6.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5abdb84c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 3561.70 ± 84.11\n",
      "Background Yield: 5.57 ± 5.10\n",
      "Background Slope: 0.00 ± 0.01\n",
      "Chi-squared: 66.19\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.25\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbe4.txt\n",
      "value saved to N_1hbe4.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BE_hist4;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.5, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbe4.txt\")\n",
    "with open(\"N_1hbe4.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbe4.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9553147",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 3153.22 ± 79.97\n",
      "Background Yield: 1.98 ± 2.31\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 65.10\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.23\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbe5.txt\n",
      "value saved to N_1hbe5.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BE_hist5;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbe5.txt\")\n",
    "with open(\"N_1hbe5.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbe5.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "45dac361",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2649.42 ± 60.82\n",
      "Background Yield: 2.85 ± 2.08\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 52.23\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 0.99\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbe6.txt\n",
      "value saved to N_1hbe6.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBE_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BE_hist6;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbe6.txt\")\n",
    "with open(\"N_1hbe6.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbe6.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e3315f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BE_hlt_hist4: 0.8567 ± 0.0112\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BE_hlt_hist4 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 3578.23 \n",
    "Nsig1_error = 75.98\n",
    "Nsig2 = 10692.75\n",
    "Nsig2_error = 149.67\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BE_hlt_hist4: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d3d8bb3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BE_hlt_hist5: 0.8536 ± 0.0115\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BE_hlt_hist5 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 =  3182.52 \n",
    "Nsig1_error = 69.31\n",
    "Nsig2 = 9275.25 \n",
    "Nsig2_error = 133.06\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BE_hlt_hist5: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b4a30b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BE_hlt_hist6: 0.8540 ± 0.0126\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BE_hlt_hist6 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2508.75 \n",
    "Nsig1_error = 57.06\n",
    "Nsig2 = 7337.99 \n",
    "Nsig2_error = 116.85\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency =(2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BE_hlt_hist6: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7516da92",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
