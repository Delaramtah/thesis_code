{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1cbf7fda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['countEvents;1',\n",
       " 'countEvents/unweightedEvents;1',\n",
       " 'countEvents/weightedEvents;1',\n",
       " 'pileupMCTemplateMaker;1',\n",
       " 'pileupMCTemplateMaker/MC_TrueNInt_outOfTimeEarly;1',\n",
       " 'pileupMCTemplateMaker/MC_TrueNInt_inTime;1',\n",
       " 'pileupMCTemplateMaker/MC_TrueNInt_outOfTimeLate;1',\n",
       " 'zcounting;1',\n",
       " 'zcounting/tree;1']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import vector\n",
    "import awkward as ak\n",
    "import hist\n",
    "import numpy as np\n",
    "import itertools\n",
    "import math\n",
    "\n",
    "\n",
    "treename=\"zcounting/tree\"\n",
    "filename_ntuple=\"/eos/cms/store/group/comm_luminosity/ZCounting/2022/MC/crab/DYJetsToLL_M_50_LO_FlatPU0to70_Run3Winter22.root\"\n",
    "f1=uproot.open(filename_ntuple)\n",
    "f1.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6eca3ad6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=uproot.open(filename_ntuple+\":\"+treename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "44c10992",
   "metadata": {},
   "outputs": [],
   "source": [
    "electron_dressed = data.arrays([\"GenDressedLepton_pt\",\"GenDressedLepton_eta\",\"GenDressedLepton_mass\",\"GenDressedLepton_pdgId\",\"GenDressedLepton_phi\"],\"decayMode==11\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "62893095",
   "metadata": {},
   "outputs": [],
   "source": [
    "electron_reco = data.arrays([\"Electron_pt\",\"Electron_eta\",\"Electron_phi\",\"Electron_full5x5_sigmaIetaIeta\",\"Electron_dEtaInSeed\",\"Electron_deltaPhiSuperClusterTrackAtVtx\",\"Electron_eSuperClusterOverP\",\"Electron_ecalEnergy\",\"Electron_superclusterEnergy\",\"Electron_hadronicOverEm\"],\"decayMode==11\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e7a95251",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eta [((1.97, 1.47), (1.47, 1.97)), ((1.18, 1.6), (, ... )), ((0.5, -1.74), (0.5, -1.74))]\n",
      "phi [((-0.88, 2.53), (2.53, -0.879)), ((2.71, -0.322, ... ((1.01, -1.2), (1.01, -1.2))]\n",
      "pt [((39.8, 49.2), (52.2, 38.1)), ((42.4, 45.2), ... )), ((29.6, 23.8), (29.6, 25.2))]\n",
      "energy [(144, 113), (76.1, 115), (32.9, 73), (79.5, ... 192), (33.2, 76.1), (67.4, 122)]\n",
      "full [(0.0212, 0.00854), (0.00878, 0.0236), (, ... 0.00973, 0.0198), (0.0171, 0.00884)]\n",
      "detaseed [(0.000991, -0.000886), (4.47e-06, -0.0069), (, ... 0.000882), (0.00241, 0.00123)]\n",
      "dphin [(0.00213, -0.0189), (-0.0207, -0.0636), (, ... -0.0169, 0.0885), (0.0013, -0.0082)]\n",
      "eoverp [(0.936, 1.71), (1.87, 4.53), (0.978, 1.03), (, ... 1.23), (0.95, 4.25), (1.1, 1.18)]\n"
     ]
    }
   ],
   "source": [
    "import vector\n",
    "vector.register_awkward()\n",
    "myEventg = ak.zip({\n",
    "        \"gpt\" : ak.combinations(electron_dressed[\"GenDressedLepton_pt\"],2),\n",
    "        \"geta\" :ak.combinations(electron_dressed[\"GenDressedLepton_eta\"],2),\n",
    "        \"gphi\" : ak.combinations(electron_dressed[\"GenDressedLepton_phi\"],2),\n",
    "        \n",
    "    }, with_name=\"collection of gendressed\")\n",
    "\n",
    "\n",
    "myEventr = ak.zip({\n",
    "\n",
    "        \"pt\" : ak.combinations(electron_reco[\"Electron_pt\"],2),\n",
    "        \"eta\" :ak.combinations(electron_reco[\"Electron_eta\"],2),\n",
    "        \"phi\" : ak.combinations(electron_reco[\"Electron_phi\"],2),\n",
    "        \"energy\" : ak.combinations(electron_reco[\"Electron_ecalEnergy\"],2),\n",
    "        \"full\" : ak.combinations(electron_reco[\"Electron_full5x5_sigmaIetaIeta\"],2),\n",
    "        \"detaseed\" : ak.combinations(electron_reco[\"Electron_dEtaInSeed\"],2),\n",
    "        \"dphin\" :  ak.combinations(electron_reco[\"Electron_deltaPhiSuperClusterTrackAtVtx\"],2),\n",
    "        \"hovere\" :  ak.combinations(electron_reco[\"Electron_hadronicOverEm\"],2),\n",
    "        \"superc\" :  ak.combinations(electron_reco[\"Electron_superclusterEnergy\"],2),\n",
    "        \"eoverp\" : ak.combinations(electron_reco[\"Electron_eSuperClusterOverP\"],2),\n",
    "          \n",
    "    }, with_name=\"collection of reconstructed\")\n",
    "\n",
    "\n",
    "\n",
    "phi = ak.flatten( ak.cartesian([myEventr[\"phi\"],myEventg[\"gphi\"]]))\n",
    "eta = ak.flatten( ak.cartesian([myEventr[\"eta\"],myEventg[\"geta\"]]))\n",
    "pt = ak.flatten( ak.cartesian([myEventr[\"pt\"],myEventg[\"gpt\"]]))\n",
    "\n",
    "energy = ak.flatten(myEventr[\"energy\"])\n",
    "full = ak.flatten(myEventr[\"full\"])\n",
    "detaseed = ak.flatten(myEventr[\"detaseed\"])\n",
    "dphin = ak.flatten(myEventr[\"dphin\"])\n",
    "\n",
    "eoverp = ak.flatten(myEventr[\"eoverp\"])\n",
    "hovere = ak.flatten(myEventr[\"hovere\"])\n",
    "superc = ak.flatten(myEventr[\"superc\"])\n",
    "\n",
    "\n",
    "print(\"eta\" , eta)\n",
    "print(\"phi\" , phi)\n",
    "print(\"pt\" , pt)\n",
    "print(\"energy\" ,energy)\n",
    "print(\"full\" , full)\n",
    "print(\"detaseed\" , detaseed)\n",
    "print(\"dphin\" , dphin)\n",
    "\n",
    "print(\"eoverp\" , eoverp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2d0b37a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(39.8, 49.2), (42.4, 45.2), (30.8, 60.6), (, ... 40.8), (29.6, 23.8), (11.3, 59)]\n",
      "((30.8, 60.6), (60.9, 30.8))\n",
      "1328146\n"
     ]
    }
   ],
   "source": [
    "print(ak.flatten(myEventr[\"pt\"]))\n",
    "print(pt[2])\n",
    "print(len(ak.flatten(myEventr[\"pt\"])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "76d9908d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(52.2, 38.1), (45.4, 42), (60.9, 30.8), (, ... 32.5), (42.9, 40.3), (29.6, 25.2)]\n",
      "1287972\n"
     ]
    }
   ],
   "source": [
    "print(ak.flatten(myEventg[\"gpt\"]))\n",
    "print(len(ak.flatten(myEventg[\"gpt\"])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ae8ce4fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def deltaREval(phi1, phi2, eta1, eta2):\n",
    "    dPhi = dphi(phi1,phi2)\n",
    "    return math.sqrt(dPhi**2+ (eta1-eta2)**2)\n",
    "\n",
    "\n",
    "def dphi(p1,p2):\n",
    "    res = p1 - p2\n",
    "    while res > math.pi:\n",
    "        res -= 2*math.pi\n",
    "    while res < -math.pi:\n",
    "        res += 2*math.pi\n",
    "    return res\n",
    "\n",
    "\n",
    "\n",
    "myPt = pt.to_list()\n",
    "myEta = eta.to_list()\n",
    "myPhi = phi.to_list()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "drList = []\n",
    "\n",
    "for idx in range(0,len(myEta)):\n",
    "    DRL = -999\n",
    "    DRR = -999\n",
    "\n",
    "    DRL = deltaREval(myPhi[idx][0][0],myPhi[idx][1][0],myEta[idx][0][0],myEta[idx][1][0])\n",
    "    \n",
    "    if (DRL < 0.3):\n",
    "        \n",
    "        DRR = deltaREval(myPhi[idx][0][1],myPhi[idx][1][1],myEta[idx][0][1],myEta[idx][1][1])\n",
    "         \n",
    "     \n",
    "    else:\n",
    "        \n",
    "        DRL = deltaREval(myPhi[idx][0][0],myPhi[idx][1][1],myEta[idx][0][0],myEta[idx][1][1])\n",
    "        DRR = deltaREval(myPhi[idx][0][1],myPhi[idx][1][0],myEta[idx][0][1],myEta[idx][1][0])\n",
    "        \n",
    "        \n",
    "    \n",
    "    tmpList = [1 if (DRL< 0.3) else 0,1 if(DRR<0.3) else 0]\n",
    "    drList.append(tuple(tmpList))\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d049facf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "deltar [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, ... 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n",
      "lendilist 1253250\n",
      "1253250\n",
      "1328146\n",
      "1328146\n"
     ]
    }
   ],
   "source": [
    "o = ak.Array(drList)\n",
    "print(\"deltar\",o)\n",
    "print(\"lendilist\",len(drList))\n",
    "print(len(pt))\n",
    "print(len(full))\n",
    "print(len(ak.flatten(myEventr[\"pt\"])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ed03e2af",
   "metadata": {},
   "outputs": [],
   "source": [
    "myFull = full.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6c5f3c33",
   "metadata": {},
   "outputs": [],
   "source": [
    "myEnergy = energy.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c92d45d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "myDetaseed = detaseed.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f202f35c",
   "metadata": {},
   "outputs": [],
   "source": [
    "myDphi = dphin.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ea87a5f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "myEoverp = eoverp.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c124e28",
   "metadata": {},
   "outputs": [],
   "source": [
    "mySuper = superc.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bc78c1a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "myHovere = hovere.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "42c38231",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1328146\n",
      "1328146\n"
     ]
    }
   ],
   "source": [
    "print(len(myHovere ))\n",
    "print(len(myDphi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "10fd1858",
   "metadata": {},
   "outputs": [],
   "source": [
    "drListid = []\n",
    "\n",
    "for ix in range(0,len(myPt)):\n",
    "    Listid = [1 if(((myFull[ix][0])<0.0106) & ((myHovere[ix][0])<(0.046+(1.16/(mySuper[ix][0])))) & (abs(myDphi[ix][0])<0.0547) & (abs(myDetaseed[ix][0])<0.0032) & (abs((1.0-myEoverp[ix][0])/(myEnergy[ix][0]))<0.184)) else 0 , 1 if((((myFull[ix][1])<0.0106) & ((myHovere[ix][1])<(0.046+(1.16/(mySuper[ix][1]))))) & (abs(myDphi[ix][1])<0.0547) & (abs(myDetaseed[ix][1])<0.0032) & (abs((1.0-myEoverp[ix][1])/(myEnergy[ix][1]))<0.184)) else 0]\n",
    "    drListid.append(Listid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a82d9783",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "idlist 1253250\n"
     ]
    }
   ],
   "source": [
    "oo = ak.Array(drListid)\n",
    "print(\"idlist\",len(oo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d2e7ddbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ntotal 1234386\n",
      "Nid 841658\n",
      "reco eff 0.681843442812864\n"
     ]
    }
   ],
   "source": [
    "Ntotal = 0\n",
    "Nid = 0\n",
    "for k in range(0,len(oo)):\n",
    "    for i in range(0,1):\n",
    "        if ( drList[k][i]  == 1):\n",
    "            Ntotal = Ntotal+1\n",
    "            if (drListid[k][i] == 1):\n",
    "                Nid = Nid+1\n",
    "print(\"Ntotal\",Ntotal)\n",
    "print(\"Nid\",Nid)\n",
    "print(\"reco eff\",Nid/Ntotal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c070d8c3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
