{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b764c176",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 8804.51 ± 130.78\n",
      "Background Yield: 2.52 ± 2.45\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 122.77\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.09\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbb7.txt\n",
      "value saved to N_2hbb7.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BB_hist7;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_2hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbb7.txt\")\n",
    "with open(\"N_2hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbb7.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "26018b46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 7403.13 ± 113.96\n",
      "Background Yield: 34.17 ± 23.92\n",
      "Background Slope: -0.02 ± 0.01\n",
      "Chi-squared: 108.27\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 0.96\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbb8.txt\n",
      "value saved to N_2hbb8.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BB_hist8;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_2hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbb8.txt\")\n",
    "with open(\"N_2hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbb8.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d9c08875",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 6098.08 ± 103.81\n",
      "Background Yield: 9.17 ± 7.52\n",
      "Background Slope: -0.01 ± 0.01\n",
      "Chi-squared: 118.31\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.05\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbb9.txt\n",
      "value saved to N_2hbb9.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_2hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbb9.txt\")\n",
    "with open(\"N_2hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbb9.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6dfa10d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2676.26 ± 68.76\n",
      "Background Yield: 91.14 ± 78.02\n",
      "Background Slope: -0.03 ± 0.01\n",
      "Chi-squared: 64.53\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.22\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbb7.txt\n",
      "value saved to N_1hbb7.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BB_hist7;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbb7.txt\")\n",
    "with open(\"N_1hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbb7.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe626208",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2404.55 ± 53.06\n",
      "Background Yield: 2.77 ± 2.43\n",
      "Background Slope: 0.00 ± 0.01\n",
      "Chi-squared: 45.24\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 0.85\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbb8.txt\n",
      "value saved to N_1hbb8.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BB_hist8;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.5, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbb8.txt\")\n",
    "with open(\"N_1hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbb8.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7eef7392",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2009.72 ± 52.37\n",
      "Background Yield: 37.03 ± 34.60\n",
      "Background Slope: -0.02 ± 0.01\n",
      "Chi-squared: 31.67\n",
      "Degrees of Freedom: 33\n",
      "Chi-squared per dof: 0.96\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbb9.txt\n",
      "value saved to N_1hbb9.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 40\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.8, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(7, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.legend()\n",
    "plt.title(\"Signal and Background Fit with Varying Exponential Background Slope\")\n",
    "plt.show()\n",
    "with open(\"eN_1hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbb9.txt\")\n",
    "with open(\"N_1hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbb9.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3e991e5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hlt_hist7: 0.8708 ± 0.0121\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BB_hlt_hist7 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2612.25\n",
    "Nsig1_error = 59.77\n",
    "Nsig2 = 8804.51 \n",
    "Nsig2_error = 130.78\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hlt_hist7: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "af0c056e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hlt_hist8: 0.8625 ± 0.0124\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BB_hlt_hist8 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2403.33 \n",
    "Nsig1_error = 57.20\n",
    "Nsig2 = 7540.76 \n",
    "Nsig2_error = 115.17\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hlt_hist8: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "154a5cbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hlt_hist9: 0.8629 ± 0.0139\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BB_hlt_hist9 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 1827.88 \n",
    "Nsig1_error = 43.97\n",
    "Nsig2 = 5753.87 \n",
    "Nsig2_error = 99.63\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hlt_hist9: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19dde526",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
