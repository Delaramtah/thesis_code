{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b764c176",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 8804.51 ± 130.78\n",
      "Background Yield: 2.52 ± 2.45\n",
      "Background Slope: 0.01 ± 0.01\n",
      "Chi-squared: 122.77\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.09\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbb7.txt\n",
      "value saved to N_2hbb7.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BB_hist7;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbb7.txt\")\n",
    "with open(\"N_2hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbb7.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "26018b46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 7403.13 ± 113.96\n",
      "Background Yield: 34.17 ± 23.92\n",
      "Background Slope: -0.02 ± 0.01\n",
      "Chi-squared: 108.27\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 0.96\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbb8.txt\n",
      "value saved to N_2hbb8.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BB_hist8;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbb8.txt\")\n",
    "with open(\"N_2hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbb8.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d9c08875",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 6098.08 ± 103.81\n",
      "Background Yield: 9.17 ± 7.52\n",
      "Background Slope: -0.01 ± 0.01\n",
      "Chi-squared: 118.31\n",
      "Degrees of Freedom: 113\n",
      "Chi-squared per dof: 1.05\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_2hbb9.txt\n",
      "value saved to N_2hbb9.txt\n"
     ]
    }
   ],
   "source": [
    "###best and final 1 ###\n",
    "\n",
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_2hlt_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "y_errors = np.sqrt(y_data)  # Assume Poisson statistics for errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 7.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_2hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_2hbb9.txt\")\n",
    "with open(\"N_2hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_2hbb9.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6dfa10d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2676.26 ± 68.76\n",
      "Background Yield: 91.14 ± 78.02\n",
      "Background Slope: -0.03 ± 0.01\n",
      "Chi-squared: 64.53\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 1.22\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbb7.txt\n",
      "value saved to N_1hbb7.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BB_hist7;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 5.0, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbb7.txt\")\n",
    "with open(\"N_1hbb7.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbb7.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe626208",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2404.55 ± 53.06\n",
      "Background Yield: 2.77 ± 2.43\n",
      "Background Slope: 0.00 ± 0.01\n",
      "Chi-squared: 45.24\n",
      "Degrees of Freedom: 53\n",
      "Chi-squared per dof: 0.85\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfkAAAF4CAYAAABXWoCZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAAsTAAALEwEAmpwYAABb0ElEQVR4nO3dd3wUdfrA8c83PQuh95IEBERq6CAoQcTeG8ieiKCxYTsbmvvZc3KnZ7/TCzY0a0HPLnCHQhDQiCCgdERIaNJbSCHl+f0xm5CyCwkkO5vd5/167SvsfGdnnx1m95n5zrcYEUEppZRSgSfE7gCUUkopVTs0ySullFIBSpO8UkopFaA0ySullFIBSpO8UkopFaA0ySullFIBKszuAGpas2bNJD4+3u4wlFJKKZ9ZsmTJbhFpXnF5wCX5+Ph4Fi9ebHcYSimllM8YYzI9LdfqeqWUUipAaZJXSimlApQmeaWUUipABdw9eaWUUrWroKCALVu2kJeXZ3coQScqKop27doRHh5epfU1ySullKqWLVu2EBMTQ3x8PMYYu8MJGiLCnj172LJlCx06dKjSa7S6XimlVLXk5eXRtGlTTfA+ZoyhadOm1apB0SSvlFKq2jTB26O6+12TvFJKqTonNDSUhISE0semTZs4/fTTAdi0aRPvvfeezRH6B70nr5RSqs6Jjo5m2bJl5ZZ9//33wNEkP3bsWBsi8y96Ja+UUiog1K9fH4DJkyczf/58EhISeP75522Oyl56Ja+UUurE3X03VLiiPmkJCfDCC8dcJTc3l4SEBAA6dOjAp59+Wlo2ZcoUnn32Wb766quajasO0iSvlFKqzvFUXa8q0ySvlKpxiYmJAKSnp9sah/KB41xxK3vpPXmllFIBJSYmhkOHDtkdhl/QJK+UUiqg9OrVi7CwMHr37q0N7+wOQCmllKqu7Oxsr8vCw8P59ttvfR2SX9IreaWUUipAaZJXSimlApQmeaXUCUlMTCxtRa+U8k+a5JVSSqkApUleKaWUClCa5JVSSqkApUleKaVUnZSSkkL37t3p1asXCQkJ/Pjjj9x4442sWrWqxt+rZPKbukb7ySullKpzfvjhB7766it+/vlnIiMj2b17N0eOHOH111+3OzS/olfySiml6pzt27fTrFkzIiMjAWjWrBlt2rQhMTGRxYsXA/DGG2/QpUsXEhMTuemmm5g0aRIA48eP58477+T000+nY8eOfPzxx4A1mM7IkSPp27cvPXv25PPPP7fnw9UgvZJXSil1Ujz1pLzmGrjtNsjJgQsuqFw+frz12L0brrqqfFlV5jU655xzeOKJJ+jSpQtnn302o0ePZvjw4aXl27Zt48knn+Tnn38mJiaGs846i969e5eWb9++nQULFrBmzRouueQSrrrqKqKiovj0009p0KABu3fvZvDgwVxyySUYY6qyG/ySXskrpZSqc+rXr8+SJUtITU2lefPmjB49mrfffru0fNGiRQwfPpwmTZoQHh7O1VdfXe71l112GSEhIXTr1o0dO3YAICI8/PDD9OrVi7PPPputW7eWltVVeiWvlFLqpBzrytvhOHZ5s2ZVu3L3JDQ0tHRQpp49ezJt2rTSMhE55mtLqvnLrutyudi1axdLliwhPDyc+Ph48vLyTiw4P6FX8koppeqctWvXsn79+tLny5YtIy4urvT5wIEDmTdvHvv27aOwsJD//Oc/x93mgQMHaNGiBeHh4cydO5fMzMxaid2XNMkrpWqUy+UiIyODefPmER8fj8vlsjskFYCys7O5/vrr6datG7169WLVqlU89thjpeVt27bl4YcfZtCgQZx99tl069aNhg0bHnObTqeTxYsX079/f1wuF127dq3lT1H7zPGqNOqa/v37S0nLSqVU7SkZtz69TF2ry+UiKSmJnJyc0mUOh4PU1FScTqePI1S1ZfXq1Zx22ml2h3Fc2dnZ1K9fn8LCQi6//HImTJjA5ZdfbndYJ83T/jfGLBGR/hXX1St5pVSNSU5OLpfgAXJyckhOTrYpIhXMHnvsMRISEujRowcdOnTgsssuszskn9OGd0qpGpOVlVWt5UrVpmeffdbuEGynV/JKqRoTGxtbreVKqdqlSV4pVW3eGtelpKTgcDjKretwOEhJSbEjTKWCnlbXK6WqpaRxXX5+PgCZmZkkJSUBlDaumzhxIvn5+cTFxZGSkqKN7pSyibauV0pVS3x8vMf+w3FxcWzatAnw3PJeBY660ro+UGnreqVUjSgZTawsbVyn/EFoaCgJCQn07t2bvn378v3335/QdsaPH186QY0/SU9P56KLLjrp7WiSV0pVizauU/4gOjqaZcuWsXz5cp5++mkeeughn8dQWFjo8/esLk3ySqlq0cZ1yt8cPHiQxo0bA8eeLvad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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbb8.txt\n",
      "value saved to N_1hbb8.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BB_hist8;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 60\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.5, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbb8.txt\")\n",
    "with open(\"N_1hbb8.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbb8.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7eef7392",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signal Yield: 2009.72 ± 52.37\n",
      "Background Yield: 37.03 ± 34.60\n",
      "Background Slope: -0.02 ± 0.01\n",
      "Chi-squared: 31.67\n",
      "Degrees of Freedom: 33\n",
      "Chi-squared per dof: 0.96\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error value saved to eN_1hbb9.txt\n",
      "value saved to N_1hbb9.txt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import cauchy, norm\n",
    "\n",
    "# Load histogram data\n",
    "root_file_path = \"mass_regionBB_hlt.root\"\n",
    "with uproot.open(root_file_path) as file:\n",
    "    hist = file[\"h_mass_1hlt_BB_hist9;1\"]\n",
    "    hist_values, hist_edges = hist.to_numpy()\n",
    "\n",
    "# Calculate x-data (bin centers) and normalize y-data\n",
    "x_data = (hist_edges[:-1] + hist_edges[1:]) / 2\n",
    "y_data = hist_values\n",
    "\n",
    "# Re-bin the data to 60 bins\n",
    "new_bin_count = 40\n",
    "new_hist_values, new_hist_edges = np.histogram(\n",
    "    x_data, bins=new_bin_count, weights=y_data\n",
    ")\n",
    "x_data = (new_hist_edges[:-1] + new_hist_edges[1:]) / 2  # Bin centers\n",
    "y_data = new_hist_values\n",
    "y_errors = np.sqrt(y_data)  # Recalculate errors\n",
    "\n",
    "# Define the convoluted signal model (Breit-Wigner + Gaussian)\n",
    "def convoluted_signal(x, m, gamma, mu, sigma):\n",
    "    # Breit-Wigner (Cauchy PDF)\n",
    "    bw = cauchy.pdf(x, loc=m, scale=gamma)\n",
    "    # Gaussian (Normal distribution)\n",
    "    gauss = norm.pdf(x, loc=mu, scale=sigma)\n",
    "    # Convolution approximation (pointwise multiplication, normalize after)\n",
    "    conv = bw * gauss\n",
    "    conv /= np.sum(conv)  # Normalize over entire range\n",
    "    return conv\n",
    "\n",
    "# Exponential background model (with varying slope)\n",
    "def exponential_background(x, a, b):\n",
    "    # a: Exponential normalization (background yield)\n",
    "    # b: Exponential slope (background decay)\n",
    "    return a * np.exp(b * x)\n",
    "\n",
    "# Define the complete fit function for both signal and background\n",
    "def fit_function(x, m, gamma, mu, sigma, a, b, sig_yield):\n",
    "    # Signal model\n",
    "    signal = convoluted_signal(x, m, gamma, mu, sigma)\n",
    "    signal *= sig_yield  # Scale signal by signal yield\n",
    "\n",
    "    # Exponential background model (with varying slope)\n",
    "    background = exponential_background(x, a, b)\n",
    "    \n",
    "    # Combine signal and background\n",
    "    return signal + background\n",
    "\n",
    "# Total number of events in the histogram\n",
    "total_yield = np.sum(y_data)  \n",
    "signal_fraction_guess = 0.95  # Increase signal fraction guess (e.g., 0.95 or 0.9)\n",
    "signal_yield_guess = total_yield * signal_fraction_guess\n",
    "background_yield_guess = total_yield * (1 - signal_fraction_guess)\n",
    "\n",
    "# Initial Parameters (signal and background yield fixed)\n",
    "initial_params = [\n",
    "    91.1876,  # m: Breit-Wigner mass\n",
    "    2.4952,   # gamma: Breit-Wigner width\n",
    "    91.0,     # mu: Gaussian mean\n",
    "    2.0,      # sigma: Gaussian standard deviation\n",
    "    1.0,      # a: Exponential constant term (background normalization)\n",
    "    -0.01,    # b: Exponential slope (background decay)\n",
    "    signal_yield_guess,   # sig_yield: Signal yield\n",
    "]\n",
    "\n",
    "# Bounds for Parameters (background yield and slope are allowed to vary)\n",
    "bounds = (\n",
    "    [90, 0.5, 85, 0.1, 0.0, -0.5, 0],  # Lower bounds\n",
    "    [94, 5.5, 94, 4.8, np.inf, 1.0, total_yield * 1.5]  # Upper bounds\n",
    ")\n",
    "\n",
    "# Fit the data\n",
    "popt, pcov = curve_fit(\n",
    "    fit_function, x_data, y_data, p0=initial_params, sigma=y_errors, bounds=bounds\n",
    ")\n",
    "\n",
    "# Extracting the fitted parameters\n",
    "(m, gamma, mu, sigma, a, b, sig_yield) = popt\n",
    "\n",
    "# Compute errors in the fit parameters\n",
    "sig_yield_error = np.sqrt(pcov[6, 6])  # Error for sig_yield (7th parameter)\n",
    "background_error = np.sqrt(pcov[4, 4])  # Error for background (5th parameter)\n",
    "\n",
    "# Print the results\n",
    "print(f\"Signal Yield: {sig_yield:.2f} ± {sig_yield_error:.2f}\")\n",
    "print(f\"Background Yield: {a:.2f} ± {background_error:.2f}\")\n",
    "print(f\"Background Slope: {b:.2f} ± {np.sqrt(pcov[5, 5]):.2f}\")\n",
    "\n",
    "# Generate the signal and background components for plotting\n",
    "signal = convoluted_signal(x_data, m, gamma, mu, sigma)\n",
    "signal *= sig_yield\n",
    "\n",
    "background = exponential_background(x_data, a, b)\n",
    "\n",
    "# Generate the fit curve\n",
    "fit = signal + background\n",
    "\n",
    "# Compute the Chi-squared value\n",
    "residuals = (y_data - fit) / y_errors  # Residuals\n",
    "chi_squared = np.sum(residuals**2)  # Chi-squared value\n",
    "dof = len(x_data) - len(popt)  # Degrees of freedom\n",
    "chi_squared_dof = chi_squared / dof  # Chi-squared per dof\n",
    "\n",
    "# Print Chi-squared and Degrees of Freedom\n",
    "print(f\"Chi-squared: {chi_squared:.2f}\")\n",
    "print(f\"Degrees of Freedom: {dof}\")\n",
    "print(f\"Chi-squared per dof: {chi_squared_dof:.2f}\")\n",
    "\n",
    "# Diagnostic plot of the fit\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.errorbar(x_data, y_data, yerr=y_errors, fmt='o', label='Data', color='black')\n",
    "plt.plot(x_data, fit, label='Fit', color='red')\n",
    "plt.plot(x_data, signal, '--', label='Signal', color='blue')\n",
    "plt.plot(x_data, background, '--', label='Background', color='green')\n",
    "plt.xlabel(\"Mass (GeV)\" , fontsize=15)\n",
    "plt.ylabel(\"Events\" , fontsize=15)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "with open(\"eN_1hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield_error}\\n\")\n",
    "    print(\"error value saved to eN_1hbb9.txt\")\n",
    "with open(\"N_1hbb9.txt\", \"w\") as file:\n",
    "    file.write(f\"{sig_yield}\\n\")\n",
    "    print(\"value saved to N_1hbb9.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3e991e5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hlt_hist7: 0.8708 ± 0.0121\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BB_hlt_hist7 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2612.25\n",
    "Nsig1_error = 59.77\n",
    "Nsig2 = 8804.51 \n",
    "Nsig2_error = 130.78\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hlt_hist7: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "af0c056e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hlt_hist8: 0.8625 ± 0.0124\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BB_hlt_hist8 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 2403.33 \n",
    "Nsig1_error = 57.20\n",
    "Nsig2 = 7540.76 \n",
    "Nsig2_error = 115.17\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hlt_hist8: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "154a5cbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Efficiency_BB_hlt_hist9: 0.8629 ± 0.0139\n"
     ]
    }
   ],
   "source": [
    "# eff cal for BB_hlt_hist9 #\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Given data with uncertainties\n",
    "Nsig1 = 1827.88 \n",
    "Nsig1_error = 43.97\n",
    "Nsig2 = 5753.87 \n",
    "Nsig2_error = 99.63\n",
    "\n",
    "# Calculate efficiency\n",
    "efficiency = (2*Nsig2) / ((2*Nsig2) + Nsig1)\n",
    "\n",
    "# Partial derivatives\n",
    "d_eta_d_Nsig1 = -Nsig2 / (Nsig1 + Nsig2)**2\n",
    "d_eta_d_Nsig2 = 1 / (Nsig1 + Nsig2)\n",
    "\n",
    "# Propagated uncertainty\n",
    "efficiency_error = np.sqrt((d_eta_d_Nsig1 * Nsig1_error)**2 + (d_eta_d_Nsig2 * Nsig2_error)**2)\n",
    "\n",
    "print(f\"Efficiency_BB_hlt_hist9: {efficiency:.4f} ± {efficiency_error:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19dde526",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
